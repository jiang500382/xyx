function e(e, n) {
    if (!(e instanceof n)) throw new TypeError("Cannot call a class as a function");
}

var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e;
} : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
}, t = function() {
    function e(e, n) {
        for (var t = 0; t < n.length; t++) {
            var o = n[t];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), 
            Object.defineProperty(e, o.key, o);
        }
    }
    return function(n, t, o) {
        return t && e(n.prototype, t), o && e(n, o), n;
    };
}();

!function() {
    var o = Math.floor, i = String.fromCharCode, s = {};
    s.Version = "1.5.6", s.ClientVer = "v1.0.0", s.RunModeType = {
        Dev: "Dev",
        Test: "Test",
        Prod: "Prod"
    }, s.RunMode = s.RunModeType.Dev, s.NetURL = {
        Test: {
            HOST: "https://wxmini-test.hortorgames.com",
            logHOST: "https://wxmini-test.hortorgames.com",
            serveHOST: "https://platform-test.hortorgames.com"
        },
        Prod: {
            HOST: "https://wxmini.hortorgames.com",
            logHOST: "https://wxmini-log.hortorgames.com",
            serveHOST: "https://platform.hortorgames.com"
        }
    }, s.MessageHead = {
        Login: "/mini/api/v1/code",
        WeakLogin: "/mini/api/v1/code/weak",
        GetUserInfo: "/mini/api/v1/test/userinfo",
        SetUserInfo: "/mini/api/v1/userinfo",
        CreateOrder: "/mini/api/v1/order",
        QRCode: "/mini/api/v1/minicode/create",
        CancelOrder: "/mini/api/v1/order/cancel",
        MinigameCallback: "/mini/api/v1/pay/callback",
        ShareInfo: "/mini/api/v1/shareinfo",
        MpBinding: "/mini/api/v1/sdk/binding",
        Log: "/mini/api/v1/log",
        DefaultSet: "/mini/api/v1/defrule/get",
        IpCheck: "/ipregion/api/v1/blockstatus",
        ErrorLog: "/wxlog/api/v1/log",
        StatLog: "/wxlog/api/v1/statlog",
        ExtUserInfo: "/wechat/user-info"
    }, s.Errors = {
        NetWorkErr: {
            errCode: 1e3,
            errMsg: "网络错误"
        },
        WXCodeErr: {
            errCode: 1001,
            errMsg: "微信Code获取失败"
        },
        PayCancel: {
            errCode: 1002,
            errMsg: "支付取消"
        },
        PayFail: {
            errCode: 1003,
            errMsg: "支付失败"
        },
        WXSessionFail: {
            errCode: 1004,
            errMsg: "微信session获取失败"
        },
        WXGetShareInfoFail: {
            errCode: 1005,
            errMsg: "获取分享数据失败"
        },
        IOSCantPay: {
            errCode: 1006,
            errMsg: "IOS设备暂不开放支付功能"
        }
    }, s.StorageKeys = {
        UserInfo: "__miniSDK_User_Info",
        RunMode: "__miniSDK_Run_Mode",
        SaveTime: "__miniSDK_Save_Time",
        LastLogReportTime: "__miniSDK_Last_Log_Report_Time",
        LastLogReportStr: "__miniSDK_Last_Log_Report_Str",
        HeartBeatTimes: "__miniSDK_HeartBeatTimes",
        OnlineBeatTimes: "__miniSDK_OnlineBeatTimes"
    }, s.LogType = {
        Scene: 1,
        Share: 2,
        Login: 3,
        Channel: 4,
        Signup: 5,
        Flag: 6,
        Err: 7,
        MidashiPaySuccess: 8,
        OrderPaySuccess: 9,
        AuthFailed: 10,
        ShareShowCount: 11,
        ShareSuccessCount: 12,
        MidashiPayCall: 13,
        GameZone: 14,
        ADClick: 15,
        ADShow: 16,
        ADClose: 17
    }, s.HortorLogTp = {
        error: "error",
        warn: "warn",
        debug: "debug"
    };
    var r = function() {
        function n() {
            e(this, n);
        }
        return t(n, null, [ {
            key: "showLoading",
            value: function(e) {
                !this.loading && wx.showLoading && (this.loading = !0, wx.showLoading({
                    title: e,
                    mask: !0
                }));
            }
        }, {
            key: "hideLoading",
            value: function() {
                this.loading = !1, wx.showLoading && wx.hideLoading();
            }
        }, {
            key: "assign",
            value: function(e, n) {
                if (Object.assign) return Object.assign(e, n);
                for (var t in n) e[t] = n[t];
                return e;
            }
        }, {
            key: "jsonToQuery",
            value: function(e) {
                var n = [];
                for (var t in e) n.push(t + "=" + e[t]);
                return n.join("&");
            }
        }, {
            key: "queryToJson",
            value: function(e) {
                if (!e) return {};
                var n = {}, t = decodeURIComponent(e).split("&");
                for (var o in t) {
                    var i = t[o].split("=");
                    n[i[0]] = i[1];
                }
                return n;
            }
        }, {
            key: "addToQuery",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t = this.queryToJson(e || ""), o = this.assign(t, n);
                return this.jsonToQuery(o);
            }
        }, {
            key: "resetBaseDef",
            value: function(e, n) {
                for (var t in e = e || {}, n = n || {}) e[t] = void 0 === e[t] ? n[t] : e[t];
                return e;
            }
        }, {
            key: "getWXErrInfo",
            value: function(e) {
                var n = e.errMsg.split(" ");
                return 2 == n.length ? n[1] : 2 < n.length ? msg.slice(1).join(" ") : "fail";
            }
        }, {
            key: "utf8_decode",
            value: function(e) {
                for (var n = "", t = 0, o = 0, s = 0, r = 0; t < e.length; ) 128 > (o = e.charCodeAt(t)) ? (n += i(o), 
                t++) : 191 < o && 224 > o ? (s = e.charCodeAt(t + 1), n += i((31 & o) << 6 | 63 & s), 
                t += 2) : (s = e.charCodeAt(t + 1), r = e.charCodeAt(t + 2), n += i((15 & o) << 12 | (63 & s) << 6 | 63 & r), 
                t += 3);
                return n;
            }
        }, {
            key: "base64Decode",
            value: function(e) {
                var t, o, s, r, a, c, u = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", h = "", l = 0;
                for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); l < e.length; ) s = u.indexOf(e.charAt(l++)), 
                t = (15 & (r = u.indexOf(e.charAt(l++)))) << 4 | (a = u.indexOf(e.charAt(l++))) >> 2, 
                o = (3 & a) << 6 | (c = u.indexOf(e.charAt(l++))), h += i(s << 2 | r >> 4), 64 != a && (h += i(t)), 
                64 != c && (h += i(o));
                return n.utf8_decode(h);
            }
        }, {
            key: "getSystemInfo",
            value: function() {
                return this.systemInfo ? this.systemInfo : (this.systemInfo = wx.getSystemInfoSync(), 
                this.systemInfo.hortorSDKVersion = s.Version, this.systemInfo);
            }
        }, {
            key: "getSystemInfoStr",
            value: function() {
                if (this.systemInfoStr) return this.systemInfoStr;
                var e = this.getSystemInfo(), n = {};
                return [ "SDKVersion", "brand", "model", "system", "version", "hortorSDKVersion" ].map(function(t) {
                    n[t] = e[t];
                }), this.systemInfoStr = JSON.stringify(n), this.systemInfoStr;
            }
        }, {
            key: "compareVersion",
            value: function(e, n) {
                e = e.split("."), n = n.split(".");
                for (var t = Math.max(e.length, n.length); e.length < t; ) e.push("0");
                for (;n.length < t; ) n.push("0");
                for (var o = 0; o < t; o++) {
                    var i = parseInt(e[o]), s = parseInt(n[o]);
                    if (i > s) return 1;
                    if (i < s) return -1;
                }
                return 0;
            }
        }, {
            key: "geVersion",
            value: function(e) {
                return 0 <= this.compareVersion(this.getSystemInfo().SDKVersion, e);
            }
        }, {
            key: "ltVersion",
            value: function(e) {
                return 0 > this.compareVersion(this.getSystemInfo().SDKVersion, e);
            }
        }, {
            key: "isFun",
            value: function(e) {
                return e && "function" == typeof e;
            }
        }, {
            key: "getNowSec",
            value: function() {
                return o(new Date().getTime() / 1e3);
            }
        }, {
            key: "setStorage",
            value: function(e, n) {
                var t = s.StorageKeys[e];
                if (t && void 0 !== n) try {
                    wx.setStorageSync(t, n);
                } catch (e) {
                    console.warn("[SDK] set " + t + " err", e);
                }
            }
        }, {
            key: "getStorage",
            value: function(e) {
                var n = s.StorageKeys[e];
                if (!n) return "";
                var t = "";
                try {
                    t = wx.getStorageSync(n);
                } catch (e) {
                    console.warn("[SDK] get " + n + " err", e);
                }
                return t;
            }
        }, {
            key: "clearStorage",
            value: function(e) {
                wx.removeStorageSync(s.StorageKeys[e]);
            }
        }, {
            key: "setStorageUser",
            value: function(e) {
                this.userInfo = e, this.setStorage("UserInfo", e);
            }
        }, {
            key: "getStorageUser",
            value: function() {
                return this.userInfo = this.userInfo || this.getStorage("UserInfo"), this.userInfo;
            }
        }, {
            key: "getUserSdk",
            value: function() {
                var e = this.getStorageUser();
                return (e ? e.userSdk : {}) || {};
            }
        }, {
            key: "clearStorageUser",
            value: function() {
                this.userInfo = null, this.clearStorage("UserInfo");
            }
        } ]), n;
    }(), a = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "init",
            value: function(e) {
                this.HOST = s.NetURL[e.env].HOST, this.Log_HOST = s.NetURL[e.env].logHOST, this.Serve_HOST = s.NetURL[e.env].serveHOST, 
                e.Server_URL && (this.HOST = e.Server_URL);
            }
        }, {
            key: "request",
            value: function(e, n, t, o) {
                var i = /^(https?:\/\/)/.test(n) ? n : this.HOST + n, a = r.assign({}, t.params);
                a.sysInfo = r.getSystemInfoStr();
                var c = {
                    "content-type": o ? "application/json" : "application/x-www-form-urlencoded"
                }, u = function(e) {
                    var n = {
                        errMsg: e.errMsg || e || "",
                        errCode: e.errCode || s.Errors.NetWorkErr.errCode
                    };
                    r.isFun(t.fail) ? t.fail(n) : console.warn("[SDK] request fail: ", n);
                };
                return wx.request({
                    url: i,
                    data: a,
                    method: e,
                    header: c,
                    success: function(e) {
                        var n = e.data;
                        return 200 == e.statusCode ? n.meta && 0 != n.meta.errCode ? u(n.meta) : void (r.isFun(t.success) && t.success(n.data)) : u(n);
                    },
                    complete: function() {
                        r.isFun(t.complete) && t.complete();
                    },
                    fail: u
                });
            }
        }, {
            key: "get",
            value: function(e, n) {
                return this.request("GET", e, n);
            }
        }, {
            key: "post",
            value: function(e, n) {
                return this.request("POST", e, n);
            }
        }, {
            key: "getJSON",
            value: function(e, n) {
                return this.request("GET", e, n, !0);
            }
        }, {
            key: "postJSON",
            value: function(e, n) {
                return this.request("POST", e, n, !0);
            }
        } ]), n;
    }(), c = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "addEvent",
            value: function(e, n) {
                this.events[e] ? this.events[e].push(n) : (this.events[e] = [], this.events[e].push(n)), 
                this.dispatchEvent("_sdkMethodAdded", e);
            }
        }, {
            key: "removeEvent",
            value: function(e, n) {
                var t = this.events[e], o = t.indexOf(n);
                -1 < o ? t.splice(o, 1) : delete this.events[e];
            }
        }, {
            key: "dispatchEvent",
            value: function(e, n) {
                var t = this.events[e];
                if (t) for (var o = 0; o < t.length; o++) (0, t[o])(n);
            }
        }, {
            key: "_callHandle",
            value: function(e, n) {
                if (e) for (var t = 0; t < e.length; t++) (0, e[t])(n);
            }
        }, {
            key: "_handleOnShow",
            value: function(e) {
                if (e) {
                    this.lastLaunchOptions = e;
                    for (var n = 0; n < this.sdkEvents.length; n++) {
                        var t = this.sdkEvents[n], o = this.events[t], i = e;
                        "getMiniCode" == t && (i = this.getSceneQuery(i)), this._callHandle(o, i);
                    }
                }
            }
        }, {
            key: "_sdkMethodHandle",
            value: function(e) {
                if (0 <= this.sdkEvents.indexOf(e)) for (var n = 0; n < this.sdkEvents.length; n++) {
                    var t = this.sdkEvents[n], o = this.events[t], i = this.lastLaunchOptions;
                    if ("getMiniCode" != t) this._callHandle(o, i); else {
                        var s = this.getSceneQuery(i);
                        s && this._callHandle(o, s);
                    }
                }
            }
        }, {
            key: "getMiniCodeSync",
            value: function() {
                return this.getSceneQuery(this.lastLaunchOptions);
            }
        }, {
            key: "getSceneQuery",
            value: function(e) {
                if (!e) return null;
                if (!e.query) return null;
                if (e.query.scene) {
                    var n = r.queryToJson(e.query.scene);
                    return n.channel ? null : n = r.base64Decode(e.query.scene);
                }
                return null;
            }
        }, {
            key: "init",
            value: function(e) {
                this.conf = e, this.sdkEvents = [ "getMiniCode" ], this.events = {}, this.lastLaunchOptions = null, 
                this.addEvent("_handleOnShow", this._handleOnShow.bind(this)), this.addEvent("_sdkMethodAdded", this._sdkMethodHandle.bind(this));
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance || (this.instance = new n(), this.instance.init(e)), this.instance;
            }
        } ]), n;
    }(), u = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "getUserInfo",
            value: function() {
                var e = r.getUserSdk(), n = e.userId, t = e.uniqueId;
                return n ? {
                    userId: n,
                    uniqueId: t
                } : "";
            }
        }, {
            key: "doHandleOnShow",
            value: function(e, n) {
                if (this.lastLaunchOptions = e, this.launchFlag) {
                    var t = {};
                    if (t.gameId = this.conf.gameId, t.logType = s.LogType.Scene, t.content = e, t.scene = parseInt(t.content.scene), 
                    e.minisdkVersion = s.Version, console.log("[SDK] onShow:", e), this.channel = "hortor", 
                    t.content.query.channel && "" != t.content.query.channel && (this.channel = t.content.query.channel), 
                    t.content.query.scene) {
                        this.pageQuery = t.content.query.scene;
                        var o = r.queryToJson(t.content.query.scene);
                        o.channel && (this.channel = o.channel);
                    }
                    1074 == t.scene && (this.sceneQuery = t.content.query), t.content.query.shareConfigId && (this.shareConfigId = t.content.query.shareConfigId), 
                    t.content.query.h_shareCode && (this.h_shareCode = t.content.query.h_shareCode), 
                    t.channel = this.channel, t.shareConfigId = this.shareConfigId, this.scene = t.scene, 
                    c.getInstance().dispatchEvent("_handleOnShow", e);
                    var i = this.getUserInfo();
                    i && (t = r.assign(t, i), n && this.postLog(t));
                }
            }
        }, {
            key: "handleOnShow",
            value: function(e) {
                this.doHandleOnShow(e, !1);
            }
        }, {
            key: "handleOnHide",
            value: function(e) {
                c.getInstance().dispatchEvent("_handleOnHide", e);
            }
        }, {
            key: "getNow",
            value: function() {
                return o(new Date().getTime() / 1e3);
            }
        }, {
            key: "getStorageReportStr",
            value: function() {
                return r.getStorage("LastLogReportStr") || "";
            }
        }, {
            key: "getStorageReportTime",
            value: function() {
                return r.getStorage("LastLogReportTime") || this.getNow();
            }
        }, {
            key: "init",
            value: function(e) {
                var n = this;
                this.channel = "hortor", this.shareConfigId = "", this.h_shareCode = "", this.scene = 0, 
                this.pageQuery = "", this.sceneQuery = {}, this.lastReportStr = this.getStorageReportStr(), 
                this.lastReportTime = this.getStorageReportTime(), this.conf = e, this.network = new a(), 
                this.network.init(e), this.launchFlag = !0;
                var t = wx.getLaunchOptionsSync();
                this.handleOnShow(t, !1), this.launchFlag = !1, this.payManager = null, setTimeout(function() {
                    n.launchFlag = !0;
                }, 1e3), wx.onShow(this.handleOnShow.bind(this)), wx.onHide(this.handleOnHide.bind(this));
            }
        }, {
            key: "repostSceneLog",
            value: function() {
                this.doHandleOnShow(this.lastLaunchOptions, !0);
            }
        }, {
            key: "postLog",
            value: function(e, n) {
                if (!e.userId && !e.uniqueId) {
                    var t = this.getUserInfo();
                    t && (e = r.assign(e, t));
                }
                var o = r.assign({
                    params: e
                }, n || {});
                this.network.postJSON("" + this.network.Log_HOST + s.MessageHead.Log, o);
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance || (this.instance = new n(), this.instance.init(e)), this.instance;
            }
        } ]), n;
    }(), h = function() {
        function o(n) {
            e(this, o), this.conf = n, this.network = new a(), this.network.init(n);
        }
        return t(o, [ {
            key: "customerService",
            value: function(e) {
                wx.openCustomerServiceConversation(e);
            }
        }, {
            key: "getDefaultSet",
            value: function(e, n) {
                n(null);
            }
        }, {
            key: "checkIP",
            value: function(e, n) {
                "function" == typeof e && (n = e, e = "");
                var t = this.conf, o = t.gameId, i = void 0 === o ? "" : o, a = t.gameVersion, c = void 0 === a ? "" : a;
                this.network.post("" + this.network.Serve_HOST + s.MessageHead.IpCheck, {
                    params: {
                        gameId: i,
                        gameVersion: c,
                        interfaceId: e
                    },
                    success: function(e) {
                        r.isFun(n) && n(e);
                    },
                    fail: function() {
                        r.isFun(n) && n(!1);
                    }
                });
            }
        }, {
            key: "setUserCloudStorage",
            value: function(e) {
                wx.setUserCloudStorage(e);
            }
        }, {
            key: "getExtUserInfo",
            value: function(e) {
                var n = r.getUserSdk();
                if (!n || !n.userId) return e(null, {
                    errCode: 1001,
                    errMsg: "获取用户信息失败"
                });
                var t = {
                    userId: n.uniqueId,
                    gameId: this.conf.gameId
                };
                this.network.get("" + this.network.Serve_HOST + s.MessageHead.ExtUserInfo, {
                    params: t,
                    success: function(n) {
                        console.log("[SDK] getExtUserInfo", n), e(n);
                    },
                    fail: function(n) {
                        console.log("[SDK] getExtUserInfo err", n), e(null, n);
                    }
                });
            }
        }, {
            key: "debugLog",
            value: function(e, t) {
                var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.HortorLogTp.debug;
                if (!e && !t) return !1;
                t = t || {}, "string" == typeof e ? t.msg = t.msg || e : "object" == (void 0 === e ? "undefined" : n(e)) && (t = e, 
                e = t.msg || ""), console.log(o + ": " + e, t);
                var i = r.getUserSdk(), a = i.userId, c = i.uniqueId, u = r.assign({
                    gameId: this.conf.gameId,
                    gameVersion: this.conf.gameVersion || "",
                    logTp: t.logTp,
                    userId: a,
                    uniqueId: c,
                    hortorLogTp: o
                }, t);
                this.network.postJSON("" + this.network.Serve_HOST + s.MessageHead.ErrorLog, {
                    params: u,
                    success: function() {}
                });
            }
        }, {
            key: "warnLog",
            value: function(e, n) {
                this.debugLog(e, n, s.HortorLogTp.warn);
            }
        }, {
            key: "errorLog",
            value: function(e, n) {
                this.debugLog(e, n, s.HortorLogTp.error);
            }
        }, {
            key: "windowOnError",
            value: function(e) {
                var n = this;
                wx.onError(function(t) {
                    n.errorLog("window on err", t), r.isFun(e) && e(t);
                });
            }
        }, {
            key: "statLog",
            value: function(e, n) {
                var t = r.getUserSdk(), o = t.userId, i = t.uniqueId, a = r.assign({
                    gameId: this.conf.gameId,
                    gameVersion: this.conf.gameVersion || "",
                    who: i || o
                }, e);
                this.network.postJSON("" + this.network.Serve_HOST + s.MessageHead.StatLog, {
                    params: a,
                    success: function() {
                        r.isFun(n) && n(null);
                    },
                    fail: function(e) {
                        r.isFun(n) && n(e || {});
                    }
                });
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new o(e), this.instance;
            }
        } ]), o;
    }(), l = {
        isEmpty: !0
    }, g = function() {
        function o() {
            e(this, o);
        }
        return t(o, [ {
            key: "init",
            value: function(e) {
                this.network = new a(), this.network.init(e), this.conf = e, this.userSdk = {}, 
                this.log = u.getInstance(e), this.service = h.getInstance(e), this.useBtnGetUserInfo = this.conf.sdkSet.openBtnGetUserInfo && r.geVersion("2.0.1") && wx.createUserInfoButton;
            }
        }, {
            key: "setStorageInfo",
            value: function(e) {
                if (!e.encryptUserInfo) return !1;
                var n = r.getStorageUser(), t = r.getNowSec();
                this._useEncode && (!this.codeTemp && console.warn("[SDK] use encode lost code"), 
                e.encryptUserInfo.code = this.codeTemp), r.setStorageUser(e), r.setStorage("RunMode", this.conf.env), 
                r.setStorage("SaveTime", t), n || (console.log("[SDK] repostSceneLog"), this.log.repostSceneLog());
            }
        }, {
            key: "getStorageInfo",
            value: function() {
                var e = r.getStorageUser();
                if (!e) return null;
                if (this._isAuthorizeLogin && !e.userSdk.hasUserInfo) return null;
                var n = r.getStorage("SaveTime");
                return n ? n + (this.conf.Expire_Time ? parseInt(this.conf.Expire_Time, 10) : 86400) < r.getNowSec() ? (r.clearStorage("SaveTime"), 
                null) : e : null;
            }
        }, {
            key: "checkSession",
            value: function(e) {
                var n = this, t = function() {
                    console.log("[SDK] checkSession 0"), n.checkSessionPass = !1, r.clearStorageUser(), 
                    e(null, s.Errors.WXSessionFail);
                };
                wx.checkSession({
                    success: function() {
                        if (r.getStorage("RunMode") !== n.conf.env) return t();
                        console.log("[SDK] checkSession 1"), n.checkSessionPass = !0;
                        var o = n.getStorageInfo();
                        console.log("[SDK] getStorageInfo", o), e(o, null);
                    },
                    fail: t
                });
            }
        }, {
            key: "wxLogin",
            value: function(e) {
                wx.login({
                    success: function(n) {
                        return n.code ? (console.log("[SDK] wx.login 1"), void e(n.code, null)) : e(null, s.Errors.WXCodeErr, "[SDK] 获取用户登录凭证失败");
                    },
                    fail: function(n) {
                        var t = r.assign({}, s.Errors.WXCodeErr);
                        t.errMsg += JSON.stringify(n), e(null, t, "[SDK] 获取用户登录状态失败");
                    }
                });
            }
        }, {
            key: "entry",
            value: function(e, n) {
                var t = this, o = {
                    version: s.Version,
                    gameId: this.conf.gameId,
                    channel: this.log.channel,
                    query: this.log.pageQuery,
                    shareConfigId: this.log.shareConfigId,
                    h_shareCode: this.log.h_shareCode,
                    isWeak: !this._isAuthorizeLogin
                };
                this._useEncode ? (this.codeTemp = e, this.encodeManager = l.getInstance(this.conf), 
                o.nonce = this.encodeManager.encodeCode(e)) : o.code = e, this.network.post(s.MessageHead.Login, {
                    params: o,
                    success: function(e) {
                        console.log("[SDK] entry login", e), t.setStorageInfo(e), n(e, null);
                    },
                    fail: function(e) {
                        r.clearStorageUser(), n(null, e);
                    }
                });
            }
        }, {
            key: "postUserInfo",
            value: function() {
                var e = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                r.hideLoading();
                var t = r.getStorageUser(), o = t && t.userSdk ? t.userSdk : this.userSdk;
                console.log("[SDK] postUserInfo", n, o), this.network.post(s.MessageHead.SetUserInfo, {
                    params: {
                        entryAlias: "minisdk",
                        gameId: this.conf.gameId,
                        userId: o.userId,
                        uniqueId: o.uniqueId,
                        encryptedData: n.encryptedData,
                        iv: n.iv
                    },
                    success: function(n) {
                        e.setStorageInfo(n), e.onLogin(n, null);
                    },
                    fail: function(n) {
                        e.onLogin(null, n);
                    }
                });
            }
        }, {
            key: "decodeUserInfo",
            value: function(e, n) {
                var t = this;
                e.gameId = this.conf.gameId, this.network.post(s.MessageHead.GetUserInfo, {
                    params: e,
                    success: function(e) {
                        var o = r.getStorageUser() || {};
                        o.encryptUserInfo && (o.encryptUserInfo.userInfo = e), r.setStorageUser(o), n(o.encryptUserInfo, null, t.checkSessionPass);
                    },
                    fail: function(e) {
                        n(null, e, t.checkSessionPass);
                    }
                });
            }
        }, {
            key: "fetchUserInfo",
            value: function() {
                var e = this;
                console.log("[SDK] fetchUserInfo"), wx.getUserInfo({
                    lang: "zh_CN",
                    success: function(n) {
                        e.postUserInfo(n);
                    },
                    fail: function() {
                        e.useBtnGetUserInfo && r.isFun(e.showGetUserInfoBtn) ? e.showGetUserInfoBtn() : e.onLogin(null, s.Errors.NetWorkErr, "[SDK] 获取用户信息失败");
                    }
                });
            }
        }, {
            key: "_checkAuth",
            value: function(e, n) {
                wx.getSetting({
                    success: function(t) {
                        t.authSetting["scope.userInfo"] ? e() : r.isFun(n) && n();
                    },
                    fail: function() {
                        r.isFun(n) && n();
                    }
                });
            }
        }, {
            key: "_showSetModal",
            value: function(e) {
                var n = this;
                wx.showModal({
                    title: "提示",
                    content: "需要设置开启微信访问信息权限",
                    showCancel: !0,
                    cancelText: "知道了",
                    confirmText: "去设置",
                    success: function(t) {
                        t.confirm && n._toSetting(e);
                    }
                });
            }
        }, {
            key: "_toSetting",
            value: function(e) {
                var n = this;
                wx.openSetting({
                    success: function(t) {
                        t.authSetting["scope.userInfo"] ? r.isFun(e) && e() : n._showSetModal(e);
                    },
                    fail: function() {
                        n._showSetModal(e);
                    }
                });
            }
        }, {
            key: "_wxAuthorize",
            value: function(e, n) {
                var t = this;
                wx.authorize({
                    scope: "scope.userInfo",
                    success: function() {
                        r.isFun(e) && e();
                    },
                    fail: function() {
                        r.isFun(n) ? n() : t._toSetting(e);
                    }
                });
            }
        }, {
            key: "_loginLog",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s.LogType.Login, n = this.userSdk || {}, t = n.userId, o = n.uniqueId;
                this.log.postLog({
                    gameId: this.conf.gameId,
                    gameVersion: this.conf.gameVersion,
                    channel: this.log.channel,
                    scene: this.log.scene,
                    userId: t,
                    uniqueId: o,
                    logType: e
                });
            }
        }, {
            key: "getAuth",
            value: function(e) {
                this.userSdk = e.userSdk, r.hideLoading(), this.useBtnGetUserInfo && r.isFun(this.showGetUserInfoBtn) ? this._checkAuth(this.fetchUserInfo.bind(this), this.showGetUserInfoBtn.bind(this)) : this._wxAuthorize(this.fetchUserInfo.bind(this));
            }
        }, {
            key: "onLogin",
            value: function(e, n, t) {
                r.hideLoading();
                var o = e ? e.encryptUserInfo : null;
                o ? this._loginLog() : t = t || n.errMsg || "[SDK] 未获取到用户信息", t && this.service.errorLog(t, n), 
                this.next(o, n, this.checkSessionPass);
            }
        }, {
            key: "_doLogin",
            value: function(e) {
                var n = this;
                r.showLoading("登录中..."), this.next = e, this.checkSession(function(e, t) {
                    return !t && e ? n.onLogin(e) : void n.wxLogin(function(e, t, o) {
                        return t ? n.onLogin(null, t, o) : void n.entry(e, function(e, t, o) {
                            t ? n.onLogin(null, t, o) : e.userSdk.isAuth ? n.onLogin(e) : n.getAuth(e);
                        });
                    });
                });
            }
        }, {
            key: "setLoginBtn",
            value: function(e) {
                if (!this.useBtnGetUserInfo) return !1;
                var n = r.assign({
                    lang: "zh_CN"
                }, e) || this.conf.getUserInfoBtn || {};
                this.authInfoBtn && (this.authInfoBtn.hide(), this.authInfoBtn.destroy());
                var t = wx.createUserInfoButton(n);
                return this.authInfoBtn = t, this.authInfoBtn;
            }
        }, {
            key: "onLoginBtn",
            value: function(e) {
                var n = this, t = this.authInfoBtn;
                return !!t && (t.offTap(), void t.onTap(function(o) {
                    o && o.encryptedData ? (n.postUserInfo(o), n.authInfoBtn.hide(), r.isFun(e) && e(o, null, t)) : (r.isFun(e) && e(null, o, t), 
                    n._loginLog(s.LogType.AuthFailed));
                }));
            }
        }, {
            key: "getGetUserInfoBtn",
            value: function(e, n) {
                return this.setLoginBtn(e), this.onLoginBtn(n), this.authInfoBtn;
            }
        }, {
            key: "setGetUserInfoBtn",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this.setLoginBtn(e.config), this.onLoginBtn(e.onTap), this.authInfoBtn.show(), r.isFun(e.onShow) && e.onShow();
            }
        }, {
            key: "loginFun",
            value: function(e, t, o, i) {
                r.isFun(t) ? this.showGetUserInfoBtn = t.bind(this) : "object" == (void 0 === t ? "undefined" : n(t)) && (this.showGetUserInfoBtn = this.setGetUserInfoBtn.bind(this, t)), 
                this._isAuthorizeLogin = !!o, this._useEncode = i && !l.isEmpty, i && l.isEmpty && console.warn("[SDK] 此SDK不支持加密登录"), 
                this._doLogin(e);
            }
        }, {
            key: "login",
            value: function(e, n) {
                this.loginFun(e, n, !0);
            }
        }, {
            key: "weakLogin",
            value: function(e, n) {
                this.loginFun(e, n, !1);
            }
        }, {
            key: "decodeLoginFun",
            value: function(e) {
                for (var n = this, t = arguments.length, o = Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++) o[i - 1] = arguments[i];
                this.loginFun.apply(this, [ function(t, o, i) {
                    t && "string" == typeof t.userInfo ? n.decodeUserInfo(t, e) : e(t, o, i);
                } ].concat(o));
            }
        }, {
            key: "decodeLogin",
            value: function(e, n) {
                this.decodeLoginFun(e, n, !0);
            }
        }, {
            key: "decodeWeakLogin",
            value: function(e, n) {
                this.decodeLoginFun(e, n, !1);
            }
        }, {
            key: "encodeLogin",
            value: function(e, n) {
                this.loginFun(e, n, !0, !0);
            }
        }, {
            key: "encodeWeakLogin",
            value: function(e, n) {
                this.loginFun(e, n, !1, !0);
            }
        } ]), o;
    }(), d = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "createImage",
            value: function(e, n, t) {
                var o = wx.createImage();
                return o.src = e, o.onload = n, o.onerror = t, o;
            }
        }, {
            key: "createQRCode",
            value: function() {
                var e = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments[1], o = n.codeUrl, i = n.backUrl, s = n.orderId;
                if (!(o && i && s && r.isFun(t))) return console.log("[SDK] QRCode param err", n);
                r.showLoading("请稍等..."), this._createImages({
                    code: o,
                    back: i
                }, 2, function(n) {
                    try {
                        e._drawQRCode(n, t);
                    } catch (n) {
                        r.hideLoading(), t(n);
                    }
                }, function(e) {
                    r.hideLoading(), t(e);
                });
            }
        }, {
            key: "_createImages",
            value: function(e, n, t, o) {
                var i = this, a = {}, c = 0;
                for (var u in e) !function(u) {
                    a[u] = i.createImage(e[u], function() {
                        console.log("[SDK] createImage", e[u]), ++c == n && setTimeout(function() {
                            t(a);
                        }, 100);
                    }, function() {
                        var e = r.assign({}, s.Errors.NetWorkErr);
                        e.errMsg = "图片" + u + "加载失败", o(e);
                    });
                }(u);
            }
        }, {
            key: "_drawQRCode",
            value: function(e, n) {
                var t = {
                    w: 750,
                    h: 1334,
                    cw: 260,
                    cp: .05,
                    cx: .5,
                    cy: .828
                };
                t.cx = parseInt(t.cx * t.w, 10), t.cy = parseInt(t.cy * t.h, 10), t.cp = parseInt(t.cp * t.cw, 10), 
                t.cr = parseInt(t.cw / 2, 10), t.cqw = parseInt(t.cw - 2 * t.cp, 10), t.cqx = parseInt(t.cx - t.cqw / 2, 10), 
                t.cqy = parseInt(t.cy - t.cqw / 2, 10);
                var o = wx.createCanvas();
                o.width = t.w, o.height = t.h;
                var i = o.getContext("2d");
                i.drawImage(e.back, 0, 0, t.w, t.h), i.beginPath(), i.arc(t.cx, t.cy, t.cr, 0, 2 * Math.PI), 
                i.fillStyle = "rgba(255,255,255,1)", i.fill(), i.clip(), i.drawImage(e.code, t.cqx, t.cqy, t.cqw, t.cqw), 
                console.log("[SDK] drawQRCode", e, t), setTimeout(function() {
                    o.toTempFilePath({
                        x: 0,
                        y: 0,
                        width: t.w,
                        height: t.h,
                        destWidth: t.w,
                        destHeight: t.h,
                        success: function(e) {
                            var t = e.tempFilePath;
                            console.log("[SDK] showImage", t), wx.previewImage({
                                urls: [ t ]
                            }), r.hideLoading(), n();
                        }
                    });
                }, 100);
            }
        } ], [ {
            key: "getInstance",
            value: function() {
                return this.instance = this.instance || new n(), this.instance;
            }
        } ]), n;
    }(), f = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "init",
            value: function(e) {
                this.reportTimer = null, this.conf = this.conf || e, this.network = new a(), this.network.init(e), 
                this.reportErrLog = this.reportErrLog.bind(this), this.qrCode = d.getInstance();
            }
        }, {
            key: "pay",
            value: function(e, n) {
                this._createOrder(e, n);
            }
        }, {
            key: "QRCodePay",
            value: function() {
                var e = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments[1], o = n.orderId;
                n.codeUrl = "" + this.network.HOST + s.MessageHead.QRCode + "?orderId=" + o, this.qrCode.createQRCode(n, function(n) {
                    n && e.reportErrLog(s.LogType.Err, n, o), r.isFun(t) && t(n);
                });
            }
        }, {
            key: "reportErrLog",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s.LogType.Err, n = arguments[1], t = {
                    logType: e,
                    orderId: arguments[2],
                    gameId: this.conf.gameId,
                    errMsg: encodeURIComponent(JSON.stringify(n))
                };
                this.network.postJSON("" + this.network.Log_HOST + s.MessageHead.Log, {
                    params: t
                });
            }
        }, {
            key: "_createOrder",
            value: function(e, n) {
                var t = this;
                if (!e) return console.warn("[SDK] _createOrder data null");
                var o = e.midashiPayInfo, i = e.orderId, a = r.assign({}, o);
                this.reportErrLog(s.LogType.MidashiPayCall, {
                    msg: "[SDK] call midashi: " + i
                }, i), a.success = function() {
                    t.reportErrLog(s.LogType.MidashiPaySuccess, {
                        msg: "[SDK] midashi success: " + i
                    }, i), t.network.post(s.MessageHead.MinigameCallback, {
                        params: {
                            orderId: i
                        },
                        success: function(e) {
                            var o = null;
                            "success" == e ? t.reportErrLog(s.LogType.OrderPaySuccess, {
                                msg: "[SDK] MinigameCallback Success: " + i
                            }, i) : o = s.Errors.PayFail, o && t.reportErrLog(s.LogType.Err, o, i), n(o);
                        },
                        fail: function(e) {
                            e && t.reportErrLog(s.LogType.Err, e, i), n(s.Errors.PayFail);
                        }
                    });
                }, a.fail = function(e) {
                    t.network.post(s.MessageHead.CancelOrder, {
                        params: {
                            orderId: i
                        },
                        success: function(e) {
                            console.log("[SDK] cancel order: " + e);
                        },
                        fail: function() {}
                    }), n(e);
                }, a.complete = function() {}, console.log("[SDK] requestMidasPayment:", a), "ios" == r.getSystemInfo().platform ? a.fail(s.Errors.IOSCantPay) : wx.requestMidasPayment(a);
            }
        } ]), n;
    }(), v = function() {
        function n() {
            e(this, n);
        }
        return t(n, [ {
            key: "_getChannel",
            value: function(e) {
                return e ? e.endsWith("_") ? e : e + "_" : "hortor_";
            }
        }, {
            key: "_getSDKAppendStr",
            value: function(e) {
                var n = r.getNowSec(), t = r.getUserSdk(), o = r.addToQuery(e, {
                    channel: this._getChannel(t.channel),
                    h_shareCode: t.h_shareCode || "",
                    timestamp: n
                });
                return console.log("[SDK] share query", o), o;
            }
        }, {
            key: "_getShareConfigId",
            value: function(e) {
                return r.queryToJson(e).shareConfigId || "";
            }
        }, {
            key: "postLog",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.LogType.Share, t = r.getUserSdk(), o = t.userId, i = void 0 === o ? "" : o, a = t.uniqueId, c = {
                    userId: i,
                    uniqueId: void 0 === a ? "" : a,
                    shareConfigId: this._getShareConfigId(e.query),
                    gameId: this.conf.gameId,
                    logType: n,
                    content: e
                };
                console.log("[SDK] share log", c), this.log.postLog(c);
            }
        }, {
            key: "init",
            value: function(e) {
                var n = this;
                this.conf = this.conf || e, this.network = new a(), this.network.init(e), this.log = u.getInstance(e), 
                wx.onShareAppMessage(function() {
                    var e = n.conf.shareData;
                    return n.onShareCb && (e = n.onShareCb()), e.query = n._getSDKAppendStr(e.query), 
                    n.postLog(e), e;
                });
            }
        }, {
            key: "getShareInfo",
            value: function() {
                var e = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments[1], o = "string" == typeof n ? n : n.shareTicket, i = r.getUserSdk();
                wx.getShareInfo({
                    shareTicket: o,
                    success: function(n) {
                        if ("getShareInfo:ok" == n.errMsg) {
                            var a = r.assign({
                                userId: i.uniqueId,
                                gameId: e.conf.gameId,
                                shareTicket: o
                            }, n);
                            e._getShareInfo(a, t);
                        } else t(null, s.Errors.WXGetShareInfoFail);
                    },
                    fail: function(e) {
                        t(null, e);
                    }
                });
            }
        }, {
            key: "_getShareInfo",
            value: function(e, n) {
                console.log("[SDK] getShareInfo", e), this.network.post(s.MessageHead.ShareInfo, {
                    params: e,
                    success: function(e) {
                        e.openGId ? n(e, null) : n(null, s.Errors.WXGetShareInfoFail);
                    },
                    fail: function() {
                        n(null, s.Errors.WXGetShareInfoFail);
                    }
                });
            }
        }, {
            key: "_shareCallBack",
            value: function() {
                var e = this, n = this;
                return {
                    success: function(e) {
                        console.log("[SDK] share success", e), n.postLog(n.originShareData, s.LogType.ShareSuccessCount), 
                        n.postLog(n.originShareData);
                        var t = n.originShareCbs.success;
                        t && t(e);
                    },
                    fail: function() {
                        console.log("[SDK] share cannel");
                        var n = e.originShareCbs.fail;
                        n && n();
                    }
                };
            }
        }, {
            key: "shareAppMessage",
            value: function(e) {
                e.query = this._getSDKAppendStr(e.query), this.originShareCbs = {}, e.success && (this.originShareCbs.success = e.success), 
                e.fail && (this.originShareCbs.fail = e.fail), this.originShareData = e, this.postLog(this.originShareData, s.LogType.ShareShowCount);
                var n = Object.assign(e, this._shareCallBack());
                wx.shareAppMessage(n);
            }
        }, {
            key: "onShareAppMessage",
            value: function(e) {
                e && (this.onShareCb = e);
            }
        } ]), n;
    }(), p = function() {
        function n(t) {
            e(this, n), this.core = c.getInstance(), this.init(t);
        }
        return t(n, [ {
            key: "init",
            value: function(e) {
                this.canReport = !0, this.opt = !e && this.opt ? this.opt : r.resetBaseDef(e, {
                    storageKey: "HeartBeatTimes",
                    beatFreq: 5,
                    reportFreq: {
                        5: 30,
                        30: 60,
                        default: 300
                    },
                    onReport: null
                }), this._bindEvent();
            }
        }, {
            key: "_bindEvent",
            value: function() {
                this.starter = this.start.bind(this), this.pauseer = this.pause.bind(this), this.core.addEvent("_handleOnShow", this.starter), 
                this.core.addEvent("_handleOnHide", this.pauseer);
            }
        }, {
            key: "_removeEvent",
            value: function() {
                this.core.removeEvent("_handleOnShow", this.starter), this.core.removeEvent("_handleOnHide", this.pauseer);
            }
        }, {
            key: "_getTodayBeatTimes",
            value: function(e) {
                var n = this.opt.storageKey, t = (r.getStorage(n) || "").split("_");
                return e == t[0] ? t[1] - 0 : 0;
            }
        }, {
            key: "_setTodayBeatTimes",
            value: function(e, n) {
                var t = this.opt.storageKey;
                r.setStorage(t, e + "_" + n);
            }
        }, {
            key: "_onReport",
            value: function(e) {
                console.log("[SDK] _onReport", e);
                var n = this.opt.onReport;
                r.isFun(n) && n(e);
            }
        }, {
            key: "_heartBeat",
            value: function() {
                this.pause();
                var e = new Date().toLocaleDateString(), n = this._getTodayBeatTimes(e) + 1, t = this.opt, o = t.beatFreq, i = t.reportFreq, s = (t.storageKey, 
                o * n), r = 0;
                for (var a in i) {
                    var c = 60 * parseInt(a, 10);
                    if (r = i[a], !isNaN(c) && s <= c) break;
                }
                s && 0 == s % r && this.canReport && this._onReport(s), this._setTodayBeatTimes(e, n);
            }
        }, {
            key: "start",
            value: function(e) {
                "isBeat" === e && this._heartBeat(), this._timer = setTimeout(this.start.bind(this, "isBeat"), 1e3 * this.opt.beatFreq);
            }
        }, {
            key: "stopReport",
            value: function() {
                this.canReport = !1;
            }
        }, {
            key: "restart",
            value: function(e) {
                this.stop(), this.init(e), this.start();
            }
        }, {
            key: "stop",
            value: function() {
                this.pause(), this._removeEvent();
            }
        }, {
            key: "pause",
            value: function() {
                this._timer && clearTimeout(this._timer);
            }
        } ]), n;
    }(), y = function() {
        function n(t) {
            e(this, n), this.conf = t;
        }
        return t(n, [ {
            key: "startCheck",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (!wx.checkIsUserAdvisedToRest) return !1;
                if (this.checker) return !1;
                var t = {
                    beatFreq: n.space || 300,
                    reportFreq: {
                        default: n.maxGameTime || 10800
                    },
                    onReport: this._checkNeedRest.bind(this, e)
                };
                this.checker = new p(t), this.checker.start();
            }
        }, {
            key: "_checkNeedRest",
            value: function(e, n) {
                wx.checkIsUserAdvisedToRest({
                    todayPlayedTime: n,
                    success: function(n) {
                        n && n.result && r.isFun(e) && e(n);
                    }
                });
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new n(e), this.instance;
            }
        } ]), n;
    }(), S = function() {
        function n(t) {
            e(this, n), this.conf = t, this.log = u.getInstance(t), this.adStautus = {}, this.canUseAd = r.geVersion("2.0.6") && wx.createRewardedVideoAd;
        }
        return t(n, [ {
            key: "_postLog",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.LogType.ADClick;
                this.log.postLog({
                    adUnitId: e,
                    gameId: this.conf.gameId,
                    channel: this.log.channel,
                    scene: this.log.scene,
                    logType: n
                });
            }
        }, {
            key: "getVideoAd",
            value: function(e) {
                return !(!this.canUseAd || !e) && wx.createRewardedVideoAd({
                    adUnitId: e
                });
            }
        }, {
            key: "checkVideoAd",
            value: function(e) {
                var n = this, t = e.adUnitId, o = e.success, i = e.error, s = this.getVideoAd(t), a = this.adStautus[t], c = function(e) {
                    console.log("[SDK] checkVideoAd onLoad", e), n.adStautus[t] = "success", r.isFun(o) && o(e), 
                    s.offLoad(), s.offError();
                }, u = function(e) {
                    n.adStautus[t] = "fail", console.log("[SDK] checkVideoAd err", e), r.isFun(i) && i(e), 
                    s && s.offError();
                };
                return s ? a ? "success" == a ? c("from storage") : u("from storage") : (s.onLoad(c), 
                void s.onError(u)) : u(null);
            }
        }, {
            key: "showVideoAd",
            value: function(e) {
                var n = this, t = e.adUnitId, o = e.onShow, i = e.onClose, a = e.onError, c = this.getVideoAd(t), u = this.adStautus[t], h = function(e) {
                    r.isFun(a) && a(e), c && c.offError(), n.adStautus[t] = "fail", console.log("[SDK] showVideoAd err: " + (e && e.errMsg));
                };
                return c ? "fail" === u ? h({
                    errMsg: "videoAd error"
                }) : (this._postLog(t), c.load().then(function() {
                    console.log("[SDK] showVideoAd show"), c.show(), r.isFun(o) && o(), n._postLog(t, s.LogType.ADShow);
                }).catch(h), c.onClose(function(e) {
                    console.log("[SDK] showVideoAd close"), r.isFun(i) && i(e), c.offClose(), c.offError(), 
                    n._postLog(t, s.LogType.ADClose);
                }), void c.onError(h)) : h({
                    errMsg: "videoAd null"
                });
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new n(e), this.instance;
            }
        } ]), n;
    }(), k = function() {
        function n(t) {
            e(this, n), this.conf = t, this.log = u.getInstance(t), this.adStautus = {}, this.bannerAds = [], 
            this.canUseAd = r.geVersion("2.0.6") && wx.createBannerAd;
        }
        return t(n, [ {
            key: "_postLog",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.LogType.ADClick;
                this.log.postLog({
                    adUnitId: e,
                    gameId: this.conf.gameId,
                    channel: this.log.channel,
                    scene: this.log.scene,
                    logType: n
                });
            }
        }, {
            key: "clearBannerAd",
            value: function() {
                return console.log("[SDK] clearBannerAd", this.bannerAds), !(!this.bannerAds || !this.bannerAds.length) && (this.bannerAds.map(function(e) {
                    e && (e.hide(), r.isFun(e.destroy) && e.destroy());
                }), void (this.bannerAds = []));
            }
        }, {
            key: "showHandler",
            value: function(e) {
                var n = this;
                return new Promise(function(t, o) {
                    console.log("[SDK] show banner " + e.adUnitId), n._postLog(e.adUnitId), e.show().then(function(o) {
                        console.log("[SDK] showed"), n._postLog(e.adUnitId, s.LogType.ADShow), t(o);
                    }).catch(function(e) {
                        console.log("[SDK] show fail", e), o(e);
                    });
                });
            }
        }, {
            key: "hideHandler",
            value: function(e, n) {
                var t = this;
                return function() {
                    e.hide(), console.log("[SDK] hide " + e.adUnitId), r.isFun(n) && n(), t._postLog(e.adUnitId, s.LogType.ADClose);
                };
            }
        }, {
            key: "destroyHandler",
            value: function(e) {
                return this.hideHandler(e, function() {
                    e.destroy();
                });
            }
        }, {
            key: "handler",
            value: function(e, n) {
                return function() {
                    n[e].apply(n, arguments);
                };
            }
        }, {
            key: "createBannerAd",
            value: function(e) {
                var n = e.adUnitId, t = e.style, o = e.success, i = e.error;
                e.clearOld && this.clearBannerAd(), console.log("[SDK] create banner " + n);
                var s = wx.createBannerAd({
                    adUnitId: n,
                    style: t
                }), a = function(e) {
                    return console.log("[SDK] create fail", e), r.isFun(i) && i(e), s && s.offError(), 
                    {};
                };
                if (!s) return a(null);
                s.onLoad(function() {
                    console.log("[SDK] created"), r.isFun(o) && o(s), s.offLoad();
                }), s.onError(a);
                var c = r.assign({}, s);
                return c.show = this.showHandler.bind(this, s), c.hide = this.hideHandler(s), c.destroy = this.destroyHandler(s), 
                c.onResize = this.handler("onResize", s), c.offResize = this.handler("offResize", s), 
                c.style = s.style, this.bannerAds.push(c), c;
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new n(e), this.instance;
            }
        } ]), n;
    }(), I = function() {
        function n(t) {
            e(this, n), this.conf = t, this.log = u.getInstance(t), this.btn = {}, this.canUseAd = r.geVersion("2.0.3");
        }
        return t(n, [ {
            key: "_postLog",
            value: function() {
                this.log.postLog({
                    gameId: this.conf.gameId,
                    channel: this.log.channel,
                    scene: this.log.scene,
                    logType: s.LogType.GameZone
                });
            }
        }, {
            key: "show",
            value: function(e) {
                if (!this.canUseAd || !wx.createGameClubButton) return console.warn("[SDK] 暂不支持游戏圈"), 
                !1;
                var n = wx.createGameClubButton(e || this.conf.gameClubBtn);
                return n.onTap(this._postLog.bind(this)), n.show(), n.close = this.close.bind(this, n), 
                n.clear = this.clear.bind(this, n), this.btn = n, n;
            }
        }, {
            key: "close",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.btn;
                r.isFun(e.hide) && e.hide();
            }
        }, {
            key: "clear",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.btn;
                r.isFun(e.destroy) && e.destroy();
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new n(e), this.instance;
            }
        } ]), n;
    }(), m = function() {
        function n(t) {
            e(this, n), this.conf = t, this.config = {}, this.server = h.getInstance(t);
        }
        return t(n, [ {
            key: "_reportData",
            value: function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t = arguments[2], o = this.config.afterReport;
                return t ? o(t) : void this.server.statLog({
                    tp: "online_" + e,
                    extra: n
                }, o);
            }
        }, {
            key: "_onReport",
            value: function(e) {
                var n = this, t = this.config, o = t.setReportData, i = t.setReportDataSync;
                r.isFun(i) ? this._reportData(e, i(e)) : r.isFun(o) && o(function(t, o) {
                    n._reportData(e, t, o);
                }, e);
            }
        }, {
            key: "onLineReportStart",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if (this.onlineReporter) return !1;
                var n = {
                    storageKey: "OnlineBeatTimes",
                    beatFreq: e.beatFreq,
                    reportFreq: e.regionFrequency,
                    onReport: this._onReport.bind(this)
                };
                e.afterReport = e.afterReport || function(e, n) {
                    n && console.log("[SDK] online report err", n);
                }, this.config = e, this.onlineReporter = new p(n), this.onlineReporter.start();
            }
        }, {
            key: "onLineReportStop",
            value: function() {
                this.onlineReporter.stopReport();
            }
        } ], [ {
            key: "getInstance",
            value: function(e) {
                return this.instance = this.instance || new n(e), this.instance;
            }
        } ]), n;
    }(), w = {
        login: function(e, n) {
            this.loginManager.login(e, n);
        },
        weakLogin: function(e, n) {
            this.loginManager.weakLogin(e, n);
        },
        decodeLogin: function() {
            var e;
            (e = this.loginManager).decodeLogin.apply(e, arguments);
        },
        decodeWeakLogin: function() {
            var e;
            (e = this.loginManager).decodeWeakLogin.apply(e, arguments);
        },
        encodeLogin: function() {
            var e;
            (e = this.loginManager).encodeLogin.apply(e, arguments);
        },
        encodeWeakLogin: function() {
            var e;
            (e = this.loginManager).encodeWeakLogin.apply(e, arguments);
        },
        getGetUserInfoBtn: function() {
            var e;
            return (e = this.loginManager).getGetUserInfoBtn.apply(e, arguments);
        },
        pay: function() {
            var e;
            (e = this.payManager).pay.apply(e, arguments);
        },
        QRCodePay: function() {
            var e;
            (e = this.payManager).QRCodePay.apply(e, arguments);
        },
        getShareInfo: function() {
            var e;
            (e = this.shareManagerGame).getShareInfo.apply(e, arguments);
        },
        shareAppMessage: function(e) {
            this.shareManagerGame.shareAppMessage(e);
        },
        onShareAppMessage: function(e) {
            this.shareManagerGame.onShareAppMessage(e);
        },
        checkRest: function() {
            var e;
            (e = y.getInstance()).startCheck.apply(e, arguments);
        },
        checkIP: function() {
            var e;
            (e = this.service).checkIP.apply(e, arguments);
        },
        setUserCloudStorage: function() {
            var e;
            (e = this.service).setUserCloudStorage.apply(e, arguments);
        },
        getDefaultSet: function() {
            var e;
            (e = this.service).getDefaultSet.apply(e, arguments);
        },
        customerService: function() {
            var e;
            (e = this.service).customerService.apply(e, arguments);
        },
        errorLog: function() {
            var e;
            (e = this.service).errorLog.apply(e, arguments);
        },
        warnLog: function() {
            var e;
            (e = this.service).warnLog.apply(e, arguments);
        },
        debugLog: function() {
            var e;
            (e = this.service).debugLog.apply(e, arguments);
        },
        windowOnError: function() {
            var e;
            (e = this.service).windowOnError.apply(e, arguments);
        },
        statLog: function() {
            var e;
            (e = this.service).statLog.apply(e, arguments);
        },
        getExtUserInfo: function() {
            var e;
            (e = this.service).getExtUserInfo.apply(e, arguments);
        },
        checkVideoAd: function() {
            var e;
            (e = this.adManager).checkVideoAd.apply(e, arguments);
        },
        showVideoAd: function() {
            var e;
            (e = this.adManager).showVideoAd.apply(e, arguments);
        },
        createBannerAd: function() {
            var e;
            return (e = this.bannerAd).createBannerAd.apply(e, arguments);
        },
        onLineReportStart: function() {
            var e;
            (e = this.onlineReporter).onLineReportStart.apply(e, arguments);
        },
        onLineReportStop: function() {
            var e;
            (e = this.onlineReporter).onLineReportStop.apply(e, arguments);
        },
        init: function(e) {
            e.sdkType = "minigame", e.sdkSet = {
                openBtnGetUserInfo: !0
            }, e.getSdkSetting && "function" == typeof e.getSdkSetting && e.getSdkSetting(e.sdkSet), 
            this.core = c.getInstance(e);
            var n = new g(), t = new f(), o = new v();
            n.init(e), t.init(e), o.init(e), this.loginManager = n, this.payManager = t, this.shareManagerGame = o, 
            this.util = r, this.gameClub = I.getInstance(e), this.adManager = S.getInstance(e), 
            this.bannerAd = k.getInstance(e), this.service = h.getInstance(e), this.onlineReporter = m.getInstance(e);
        },
        getMiniCode: function(e) {
            this.core.addEvent("getMiniCode", e);
        },
        getMiniCodeSync: function() {
            return this.core.getMiniCodeSync();
        }
    };
    "undefined" == typeof module ? "undefined" != typeof window && (window.sdk = w) : module.exports = w;
}();