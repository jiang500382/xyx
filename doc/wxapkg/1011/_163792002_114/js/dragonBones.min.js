var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
    return typeof t;
} : function(t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
}, e = window.egret, a = function() {
    var t = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function(t, e) {
        t.__proto__ = e;
    } || function(t, e) {
        for (var a in e) e.hasOwnProperty(a) && (t[a] = e[a]);
    };
    return function(e, a) {
        function i() {
            this.constructor = e;
        }
        t(e, a), e.prototype = null === a ? Object.create(a) : (i.prototype = a.prototype, 
        new i());
    };
}();

r || (r = {});

if (function(t) {
    var e = function() {
        function e(a) {
            this._clock = new t.WorldClock(), this._events = [], this._objects = [], this._eventManager = null, 
            this._eventManager = a, console.info("DragonBones: " + e.VERSION + "\nWebsite: http://dragonbones.com/\nSource and Demo: https://github.com/DragonBones/");
        }
        return e.prototype.advanceTime = function(e) {
            if (this._objects.length > 0) {
                for (var a = 0, i = this._objects; a < i.length; a++) i[a].returnToPool();
                this._objects.length = 0;
            }
            if (this._clock.advanceTime(e), this._events.length > 0) {
                for (var r = 0; r < this._events.length; ++r) {
                    var n = this._events[r], s = n.armature;
                    null !== s._armatureData && (s.eventDispatcher.dispatchDBEvent(n.type, n), n.type === t.EventObject.SOUND_EVENT && this._eventManager.dispatchDBEvent(n.type, n)), 
                    this.bufferObject(n);
                }
                this._events.length = 0;
            }
        }, e.prototype.bufferEvent = function(t) {
            this._events.indexOf(t) < 0 && this._events.push(t);
        }, e.prototype.bufferObject = function(t) {
            this._objects.indexOf(t) < 0 && this._objects.push(t);
        }, Object.defineProperty(e.prototype, "clock", {
            get: function() {
                return this._clock;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "eventManager", {
            get: function() {
                return this._eventManager;
            },
            enumerable: !0,
            configurable: !0
        }), e.VERSION = "5.6.300", e.yDown = !0, e.debug = !1, e.debugDraw = !1, e.webAssembly = !1, 
        e;
    }();
    t.DragonBones = e;
}(r || (r = {})), void 0 === i) var i = window;

console.warn || (console.warn = function() {}), console.assert || (console.assert = function() {}), 
Date.now || (Date.now = function() {
    return new Date().getTime();
});

a = function(t, e) {
    function a() {
        this.constructor = t;
    }
    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
    a.prototype = e.prototype, t.prototype = new a();
};

!function(t) {
    var e = function() {
        function t() {
            this.hashCode = t._hashCode++, this._isInPool = !1;
        }
        return t._returnObject = function(e) {
            var a = String(e.constructor), i = a in t._maxCountMap ? t._maxCountMap[a] : t._defaultMaxCount, r = t._poolsMap[a] = t._poolsMap[a] || [];
            r.length < i && (e._isInPool ? console.warn("The object is already in the pool.") : (e._isInPool = !0, 
            r.push(e)));
        }, t.toString = function() {
            throw new Error();
        }, t.setMaxCount = function(e, a) {
            if ((a < 0 || a !== a) && (a = 0), null !== e) null !== (r = (i = String(e)) in t._poolsMap ? t._poolsMap[i] : null) && r.length > a && (r.length = a), 
            t._maxCountMap[i] = a; else {
                t._defaultMaxCount = a;
                for (var i in t._poolsMap) {
                    var r = t._poolsMap[i];
                    r.length > a && (r.length = a), i in t._maxCountMap && (t._maxCountMap[i] = a);
                }
            }
        }, t.clearPool = function(e) {
            if (void 0 === e && (e = null), null !== e) {
                var a = String(e);
                null !== (r = a in t._poolsMap ? t._poolsMap[a] : null) && r.length > 0 && (r.length = 0);
            } else for (var i in t._poolsMap) {
                var r = t._poolsMap[i];
                r.length = 0;
            }
        }, t.borrowObject = function(e) {
            var a = String(e), i = a in t._poolsMap ? t._poolsMap[a] : null;
            if (null !== i && i.length > 0) {
                var r = i.pop();
                return r._isInPool = !1, r;
            }
            var n = new e();
            return n._onClear(), n;
        }, t.prototype.returnToPool = function() {
            this._onClear(), t._returnObject(this);
        }, t._hashCode = 0, t._defaultMaxCount = 3e3, t._maxCountMap = {}, t._poolsMap = {}, 
        t;
    }();
    t.BaseObject = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t, e, a, i, r, n) {
            void 0 === t && (t = 1), void 0 === e && (e = 0), void 0 === a && (a = 0), void 0 === i && (i = 1), 
            void 0 === r && (r = 0), void 0 === n && (n = 0), this.a = t, this.b = e, this.c = a, 
            this.d = i, this.tx = r, this.ty = n;
        }
        return t.prototype.toString = function() {
            return "[object dragonBones.Matrix] a:" + this.a + " b:" + this.b + " c:" + this.c + " d:" + this.d + " tx:" + this.tx + " ty:" + this.ty;
        }, t.prototype.copyFrom = function(t) {
            return this.a = t.a, this.b = t.b, this.c = t.c, this.d = t.d, this.tx = t.tx, this.ty = t.ty, 
            this;
        }, t.prototype.copyFromArray = function(t, e) {
            return void 0 === e && (e = 0), this.a = t[e], this.b = t[e + 1], this.c = t[e + 2], 
            this.d = t[e + 3], this.tx = t[e + 4], this.ty = t[e + 5], this;
        }, t.prototype.identity = function() {
            return this.a = this.d = 1, this.b = this.c = 0, this.tx = this.ty = 0, this;
        }, t.prototype.concat = function(t) {
            var e = this.a * t.a, a = 0, i = 0, r = this.d * t.d, n = this.tx * t.a + t.tx, s = this.ty * t.d + t.ty;
            return 0 === this.b && 0 === this.c || (e += this.b * t.c, a += this.b * t.d, i += this.c * t.a, 
            r += this.c * t.b), 0 === t.b && 0 === t.c || (a += this.a * t.b, i += this.d * t.c, 
            n += this.ty * t.c, s += this.tx * t.b), this.a = e, this.b = a, this.c = i, this.d = r, 
            this.tx = n, this.ty = s, this;
        }, t.prototype.invert = function() {
            var t = this.a, e = this.b, a = this.c, i = this.d, r = this.tx, n = this.ty;
            if (0 === e && 0 === a) return this.b = this.c = 0, 0 === t || 0 === i ? this.a = this.b = this.tx = this.ty = 0 : (t = this.a = 1 / t, 
            i = this.d = 1 / i, this.tx = -t * r, this.ty = -i * n), this;
            var s = t * i - e * a;
            if (0 === s) return this.a = this.d = 1, this.b = this.c = 0, this.tx = this.ty = 0, 
            this;
            s = 1 / s;
            var o = this.a = i * s;
            return e = this.b = -e * s, a = this.c = -a * s, i = this.d = t * s, this.tx = -(o * r + a * n), 
            this.ty = -(e * r + i * n), this;
        }, t.prototype.transformPoint = function(t, e, a, i) {
            void 0 === i && (i = !1), a.x = this.a * t + this.c * e, a.y = this.b * t + this.d * e, 
            i || (a.x += this.tx, a.y += this.ty);
        }, t.prototype.transformRectangle = function(t, e) {
            void 0 === e && (e = !1);
            var a = this.a, i = this.b, r = this.c, n = this.d, s = e ? 0 : this.tx, o = e ? 0 : this.ty, l = t.x, h = t.y, u = l + t.width, _ = h + t.height, f = a * l + r * h + s, c = i * l + n * h + o, p = a * u + r * h + s, m = i * u + n * h + o, d = a * u + r * _ + s, y = i * u + n * _ + o, g = a * l + r * _ + s, v = i * l + n * _ + o, b = 0;
            f > p && (b = f, f = p, p = b), d > g && (b = d, d = g, g = b), t.x = Math.floor(f < d ? f : d), 
            t.width = Math.ceil((p > g ? p : g) - t.x), c > m && (b = c, c = m, m = b), y > v && (b = y, 
            y = v, v = b), t.y = Math.floor(c < y ? c : y), t.height = Math.ceil((m > v ? m : v) - t.y);
        }, t;
    }();
    t.Matrix = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t, e, a, i, r, n) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), 
            void 0 === r && (r = 1), void 0 === n && (n = 1), this.x = t, this.y = e, this.skew = a, 
            this.rotation = i, this.scaleX = r, this.scaleY = n;
        }
        return t.normalizeRadian = function(t) {
            return t = (t + Math.PI) % (2 * Math.PI), t += t > 0 ? -Math.PI : Math.PI;
        }, t.prototype.toString = function() {
            return "[object dragonBones.Transform] x:" + this.x + " y:" + this.y + " skewX:" + 180 * this.skew / Math.PI + " skewY:" + 180 * this.rotation / Math.PI + " scaleX:" + this.scaleX + " scaleY:" + this.scaleY;
        }, t.prototype.copyFrom = function(t) {
            return this.x = t.x, this.y = t.y, this.skew = t.skew, this.rotation = t.rotation, 
            this.scaleX = t.scaleX, this.scaleY = t.scaleY, this;
        }, t.prototype.identity = function() {
            return this.x = this.y = 0, this.skew = this.rotation = 0, this.scaleX = this.scaleY = 1, 
            this;
        }, t.prototype.add = function(t) {
            return this.x += t.x, this.y += t.y, this.skew += t.skew, this.rotation += t.rotation, 
            this.scaleX *= t.scaleX, this.scaleY *= t.scaleY, this;
        }, t.prototype.minus = function(t) {
            return this.x -= t.x, this.y -= t.y, this.skew -= t.skew, this.rotation -= t.rotation, 
            this.scaleX /= t.scaleX, this.scaleY /= t.scaleY, this;
        }, t.prototype.fromMatrix = function(e) {
            var a = this.scaleX, i = this.scaleY, r = t.PI_Q;
            this.x = e.tx, this.y = e.ty, this.rotation = Math.atan(e.b / e.a);
            var n = Math.atan(-e.c / e.d);
            return this.scaleX = this.rotation > -r && this.rotation < r ? e.a / Math.cos(this.rotation) : e.b / Math.sin(this.rotation), 
            this.scaleY = n > -r && n < r ? e.d / Math.cos(n) : -e.c / Math.sin(n), a >= 0 && this.scaleX < 0 && (this.scaleX = -this.scaleX, 
            this.rotation = this.rotation - Math.PI), i >= 0 && this.scaleY < 0 && (this.scaleY = -this.scaleY, 
            n -= Math.PI), this.skew = n - this.rotation, this;
        }, t.prototype.toMatrix = function(t) {
            return 0 === this.rotation ? (t.a = 1, t.b = 0) : (t.a = Math.cos(this.rotation), 
            t.b = Math.sin(this.rotation)), 0 === this.skew ? (t.c = -t.b, t.d = t.a) : (t.c = -Math.sin(this.skew + this.rotation), 
            t.d = Math.cos(this.skew + this.rotation)), 1 !== this.scaleX && (t.a *= this.scaleX, 
            t.b *= this.scaleX), 1 !== this.scaleY && (t.c *= this.scaleY, t.d *= this.scaleY), 
            t.tx = this.x, t.ty = this.y, this;
        }, t.PI = Math.PI, t.PI_D = 2 * Math.PI, t.PI_H = Math.PI / 2, t.PI_Q = Math.PI / 4, 
        t.RAD_DEG = 180 / Math.PI, t.DEG_RAD = Math.PI / 180, t;
    }();
    t.Transform = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t, e, a, i, r, n, s, o) {
            void 0 === t && (t = 1), void 0 === e && (e = 1), void 0 === a && (a = 1), void 0 === i && (i = 1), 
            void 0 === r && (r = 0), void 0 === n && (n = 0), void 0 === s && (s = 0), void 0 === o && (o = 0), 
            this.alphaMultiplier = t, this.redMultiplier = e, this.greenMultiplier = a, this.blueMultiplier = i, 
            this.alphaOffset = r, this.redOffset = n, this.greenOffset = s, this.blueOffset = o;
        }
        return t.prototype.copyFrom = function(t) {
            this.alphaMultiplier = t.alphaMultiplier, this.redMultiplier = t.redMultiplier, 
            this.greenMultiplier = t.greenMultiplier, this.blueMultiplier = t.blueMultiplier, 
            this.alphaOffset = t.alphaOffset, this.redOffset = t.redOffset, this.greenOffset = t.greenOffset, 
            this.blueOffset = t.blueOffset;
        }, t.prototype.identity = function() {
            this.alphaMultiplier = this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1, 
            this.alphaOffset = this.redOffset = this.greenOffset = this.blueOffset = 0;
        }, t;
    }();
    t.ColorTransform = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t, e) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), this.x = t, this.y = e;
        }
        return t.prototype.copyFrom = function(t) {
            this.x = t.x, this.y = t.y;
        }, t.prototype.clear = function() {
            this.x = this.y = 0;
        }, t;
    }();
    t.Point = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t, e, a, i) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), 
            this.x = t, this.y = e, this.width = a, this.height = i;
        }
        return t.prototype.copyFrom = function(t) {
            this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height;
        }, t.prototype.clear = function() {
            this.x = this.y = 0, this.width = this.height = 0;
        }, t;
    }();
    t.Rectangle = e;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.ints = [], e.floats = [], e.strings = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.UserData]";
        }, e.prototype._onClear = function() {
            this.ints.length = 0, this.floats.length = 0, this.strings.length = 0;
        }, e.prototype.addInt = function(t) {
            this.ints.push(t);
        }, e.prototype.addFloat = function(t) {
            this.floats.push(t);
        }, e.prototype.addString = function(t) {
            this.strings.push(t);
        }, e.prototype.getInt = function(t) {
            return void 0 === t && (t = 0), t >= 0 && t < this.ints.length ? this.ints[t] : 0;
        }, e.prototype.getFloat = function(t) {
            return void 0 === t && (t = 0), t >= 0 && t < this.floats.length ? this.floats[t] : 0;
        }, e.prototype.getString = function(t) {
            return void 0 === t && (t = 0), t >= 0 && t < this.strings.length ? this.strings[t] : "";
        }, e;
    }(t.BaseObject);
    t.UserData = e;
    var i = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.data = null, e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.ActionData]";
        }, e.prototype._onClear = function() {
            null !== this.data && this.data.returnToPool(), this.type = 0, this.name = "", this.bone = null, 
            this.slot = null, this.data = null;
        }, e;
    }(t.BaseObject);
    t.ActionData = i;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.frameIndices = [], e.cachedFrames = [], e.armatureNames = [], e.armatures = {}, 
            e.userData = null, e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.DragonBonesData]";
        }, e.prototype._onClear = function() {
            for (var t in this.armatures) this.armatures[t].returnToPool(), delete this.armatures[t];
            null !== this.userData && this.userData.returnToPool(), this.autoSearch = !1, this.frameRate = 0, 
            this.version = "", this.name = "", this.stage = null, this.frameIndices.length = 0, 
            this.cachedFrames.length = 0, this.armatureNames.length = 0, this.binary = null, 
            this.intArray = null, this.floatArray = null, this.frameIntArray = null, this.frameFloatArray = null, 
            this.frameArray = null, this.timelineArray = null, this.userData = null;
        }, e.prototype.addArmature = function(t) {
            t.name in this.armatures ? console.warn("Same armature: " + t.name) : (t.parent = this, 
            this.armatures[t.name] = t, this.armatureNames.push(t.name));
        }, e.prototype.getArmature = function(t) {
            return t in this.armatures ? this.armatures[t] : null;
        }, e.prototype.dispose = function() {
            console.warn("已废弃"), this.returnToPool();
        }, e;
    }(t.BaseObject);
    t.DragonBonesData = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.aabb = new t.Rectangle(), a.animationNames = [], a.sortedBones = [], a.sortedSlots = [], 
            a.defaultActions = [], a.actions = [], a.bones = {}, a.slots = {}, a.constraints = {}, 
            a.skins = {}, a.animations = {}, a.canvas = null, a.userData = null, a;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.ArmatureData]";
        }, i.prototype._onClear = function() {
            for (var t = 0, e = this.defaultActions; t < e.length; t++) (r = e[t]).returnToPool();
            for (var a = 0, i = this.actions; a < i.length; a++) {
                var r = i[a];
                r.returnToPool();
            }
            for (var n in this.bones) this.bones[n].returnToPool(), delete this.bones[n];
            for (var n in this.slots) this.slots[n].returnToPool(), delete this.slots[n];
            for (var n in this.constraints) this.constraints[n].returnToPool(), delete this.constraints[n];
            for (var n in this.skins) this.skins[n].returnToPool(), delete this.skins[n];
            for (var n in this.animations) this.animations[n].returnToPool(), delete this.animations[n];
            null !== this.canvas && this.canvas.returnToPool(), null !== this.userData && this.userData.returnToPool(), 
            this.type = 0, this.frameRate = 0, this.cacheFrameRate = 0, this.scale = 1, this.name = "", 
            this.aabb.clear(), this.animationNames.length = 0, this.sortedBones.length = 0, 
            this.sortedSlots.length = 0, this.defaultActions.length = 0, this.actions.length = 0, 
            this.defaultSkin = null, this.defaultAnimation = null, this.canvas = null, this.userData = null, 
            this.parent = null;
        }, i.prototype.sortBones = function() {
            var t = this.sortedBones.length;
            if (!(t <= 0)) {
                var e = this.sortedBones.concat(), a = 0, i = 0;
                for (this.sortedBones.length = 0; i < t; ) {
                    var r = e[a++];
                    if (a >= t && (a = 0), !(this.sortedBones.indexOf(r) >= 0)) {
                        var n = !1;
                        for (var s in this.constraints) {
                            var o = this.constraints[s];
                            if (o.root === r && this.sortedBones.indexOf(o.target) < 0) {
                                n = !0;
                                break;
                            }
                        }
                        n || null !== r.parent && this.sortedBones.indexOf(r.parent) < 0 || (this.sortedBones.push(r), 
                        i++);
                    }
                }
            }
        }, i.prototype.cacheFrames = function(t) {
            if (!(this.cacheFrameRate > 0)) {
                this.cacheFrameRate = t;
                for (var e in this.animations) this.animations[e].cacheFrames(this.cacheFrameRate);
            }
        }, i.prototype.setCacheFrame = function(t, e) {
            var a = this.parent.cachedFrames, i = a.length;
            return a.length += 10, a[i] = t.a, a[i + 1] = t.b, a[i + 2] = t.c, a[i + 3] = t.d, 
            a[i + 4] = t.tx, a[i + 5] = t.ty, a[i + 6] = e.rotation, a[i + 7] = e.skew, a[i + 8] = e.scaleX, 
            a[i + 9] = e.scaleY, i;
        }, i.prototype.getCacheFrame = function(t, e, a) {
            var i = this.parent.cachedFrames;
            t.a = i[a], t.b = i[a + 1], t.c = i[a + 2], t.d = i[a + 3], t.tx = i[a + 4], t.ty = i[a + 5], 
            e.rotation = i[a + 6], e.skew = i[a + 7], e.scaleX = i[a + 8], e.scaleY = i[a + 9], 
            e.x = t.tx, e.y = t.ty;
        }, i.prototype.addBone = function(t) {
            t.name in this.bones ? console.warn("Same bone: " + t.name) : (this.bones[t.name] = t, 
            this.sortedBones.push(t));
        }, i.prototype.addSlot = function(t) {
            t.name in this.slots ? console.warn("Same slot: " + t.name) : (this.slots[t.name] = t, 
            this.sortedSlots.push(t));
        }, i.prototype.addConstraint = function(t) {
            t.name in this.constraints ? console.warn("Same constraint: " + t.name) : this.constraints[t.name] = t;
        }, i.prototype.addSkin = function(t) {
            t.name in this.skins ? console.warn("Same skin: " + t.name) : (t.parent = this, 
            this.skins[t.name] = t, null === this.defaultSkin && (this.defaultSkin = t), "default" === t.name && (this.defaultSkin = t));
        }, i.prototype.addAnimation = function(t) {
            t.name in this.animations ? console.warn("Same animation: " + t.name) : (t.parent = this, 
            this.animations[t.name] = t, this.animationNames.push(t.name), null === this.defaultAnimation && (this.defaultAnimation = t));
        }, i.prototype.addAction = function(t, e) {
            e ? this.defaultActions.push(t) : this.actions.push(t);
        }, i.prototype.getBone = function(t) {
            return t in this.bones ? this.bones[t] : null;
        }, i.prototype.getSlot = function(t) {
            return t in this.slots ? this.slots[t] : null;
        }, i.prototype.getConstraint = function(t) {
            return t in this.constraints ? this.constraints[t] : null;
        }, i.prototype.getSkin = function(t) {
            return t in this.skins ? this.skins[t] : null;
        }, i.prototype.getMesh = function(t, e, a) {
            var i = this.getSkin(t);
            return null === i ? null : i.getDisplay(e, a);
        }, i.prototype.getAnimation = function(t) {
            return t in this.animations ? this.animations[t] : null;
        }, i;
    }(t.BaseObject);
    t.ArmatureData = e;
    var i = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.transform = new t.Transform(), a.userData = null, a;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.BoneData]";
        }, i.prototype._onClear = function() {
            null !== this.userData && this.userData.returnToPool(), this.inheritTranslation = !1, 
            this.inheritRotation = !1, this.inheritScale = !1, this.inheritReflection = !1, 
            this.type = 0, this.length = 0, this.name = "", this.transform.identity(), this.userData = null, 
            this.parent = null;
        }, i;
    }(t.BaseObject);
    t.BoneData = i;
    var r = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.vertices = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.SurfaceData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 1, this.segmentX = 0, this.segmentY = 0, 
            this.vertices.length = 0;
        }, e;
    }(i);
    t.SurfaceData = r;
    var n = function(e) {
        function i() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t.color = null, t.userData = null, t;
        }
        return a(i, e), i.createColor = function() {
            return new t.ColorTransform();
        }, i.toString = function() {
            return "[class dragonBones.SlotData]";
        }, i.prototype._onClear = function() {
            null !== this.userData && this.userData.returnToPool(), this.blendMode = 0, this.displayIndex = 0, 
            this.zOrder = 0, this.name = "", this.color = null, this.userData = null, this.parent = null;
        }, i.DEFAULT_COLOR = new t.ColorTransform(), i;
    }(t.BaseObject);
    t.SlotData = n;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.CanvasData]";
        }, e.prototype._onClear = function() {
            this.hasBackground = !1, this.color = 0, this.x = 0, this.y = 0, this.width = 0, 
            this.height = 0;
        }, e;
    }(t.BaseObject);
    t.CanvasData = e;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.displays = {}, e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.SkinData]";
        }, e.prototype._onClear = function() {
            for (var t in this.displays) {
                for (var e = 0, a = this.displays[t]; e < a.length; e++) {
                    var i = a[e];
                    null !== i && i.returnToPool();
                }
                delete this.displays[t];
            }
            this.name = "", this.parent = null;
        }, e.prototype.addDisplay = function(t, e) {
            t in this.displays || (this.displays[t] = []), null !== e && (e.parent = this), 
            this.displays[t].push(e);
        }, e.prototype.getDisplay = function(t, e) {
            var a = this.getDisplays(t);
            if (null !== a) for (var i = 0, r = a; i < r.length; i++) {
                var n = r[i];
                if (null !== n && n.name === e) return n;
            }
            return null;
        }, e.prototype.getDisplays = function(t) {
            return t in this.displays ? this.displays[t] : null;
        }, e;
    }(t.BaseObject);
    t.SkinData = e;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            this.order = 0, this.name = "", this.type = 0, this.target = null, this.root = null, 
            this.bone = null;
        }, e;
    }(t.BaseObject);
    t.ConstraintData = e;
    var i = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.IKConstraintData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.scaleEnabled = !1, this.bendPositive = !1, 
            this.weight = 1;
        }, e;
    }(e);
    t.IKConstraintData = i;
    var r = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.bones = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.PathConstraintData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.pathSlot = null, this.pathDisplayData = null, 
            this.bones.length = 0, this.positionMode = 0, this.spacingMode = 1, this.rotateMode = 1, 
            this.position = 0, this.spacing = 0, this.rotateOffset = 0, this.rotateMix = 0, 
            this.translateMix = 0;
        }, e.prototype.AddBone = function(t) {
            this.bones.push(t);
        }, e;
    }(e);
    t.PathConstraintData = r;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t() {
            this.weight = null;
        }
        return t.prototype.clear = function() {
            this.isShared || null === this.weight || this.weight.returnToPool(), this.isShared = !1, 
            this.inheritDeform = !1, this.offset = 0, this.data = null, this.weight = null;
        }, t.prototype.shareFrom = function(t) {
            this.isShared = !0, this.offset = t.offset, this.weight = t.weight;
        }, t;
    }();
    t.VerticesData = e;
    var i = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.transform = new t.Transform(), a;
        }
        return a(i, e), i.prototype._onClear = function() {
            this.name = "", this.path = "", this.transform.identity(), this.parent = null;
        }, i;
    }(t.BaseObject);
    t.DisplayData = i;
    var r = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.pivot = new t.Point(), a;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.ImageDisplayData]";
        }, i.prototype._onClear = function() {
            e.prototype._onClear.call(this), this.type = 0, this.pivot.clear(), this.texture = null;
        }, i;
    }(i);
    t.ImageDisplayData = r;
    var n = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.actions = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.ArmatureDisplayData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this);
            for (var e = 0, a = this.actions; e < a.length; e++) a[e].returnToPool();
            this.type = 1, this.inheritAnimation = !1, this.actions.length = 0, this.armature = null;
        }, e.prototype.addAction = function(t) {
            this.actions.push(t);
        }, e;
    }(i);
    t.ArmatureDisplayData = n;
    var s = function(t) {
        function i() {
            var a = null !== t && t.apply(this, arguments) || this;
            return a.vertices = new e(), a;
        }
        return a(i, t), i.toString = function() {
            return "[class dragonBones.MeshDisplayData]";
        }, i.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 2, this.vertices.clear(), this.texture = null;
        }, i;
    }(i);
    t.MeshDisplayData = s;
    var o = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.boundingBox = null, e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.BoundingBoxDisplayData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), null !== this.boundingBox && this.boundingBox.returnToPool(), 
            this.type = 3, this.boundingBox = null;
        }, e;
    }(i);
    t.BoundingBoxDisplayData = o;
    var l = function(t) {
        function i() {
            var a = null !== t && t.apply(this, arguments) || this;
            return a.vertices = new e(), a.curveLengths = [], a;
        }
        return a(i, t), i.toString = function() {
            return "[class dragonBones.PathDisplayData]";
        }, i.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 4, this.closed = !1, this.constantSpeed = !1, 
            this.vertices.clear(), this.curveLengths.length = 0;
        }, i;
    }(i);
    t.PathDisplayData = l;
    var h = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.bones = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.WeightData]";
        }, e.prototype._onClear = function() {
            this.count = 0, this.offset = 0, this.bones.length = 0;
        }, e.prototype.addBone = function(t) {
            this.bones.push(t);
        }, e;
    }(t.BaseObject);
    t.WeightData = h;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            this.color = 0, this.width = 0, this.height = 0;
        }, e;
    }(t.BaseObject);
    t.BoundingBoxData = e;
    var i = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.RectangleBoundingBoxData]";
        }, e._computeOutCode = function(t, e, a, i, r, n) {
            var s = 0;
            return t < a ? s |= 1 : t > r && (s |= 2), e < i ? s |= 4 : e > n && (s |= 8), s;
        }, e.rectangleIntersectsSegment = function(t, a, i, r, n, s, o, l, h, u, _) {
            void 0 === h && (h = null), void 0 === u && (u = null), void 0 === _ && (_ = null);
            var f = t > n && t < o && a > s && a < l, c = i > n && i < o && r > s && r < l;
            if (f && c) return -1;
            for (var p = 0, m = e._computeOutCode(t, a, n, s, o, l), d = e._computeOutCode(i, r, n, s, o, l); ;) {
                if (0 == (m | d)) {
                    p = 2;
                    break;
                }
                if (0 != (m & d)) break;
                var y = 0, g = 0, v = 0, b = 0 !== m ? m : d;
                0 != (4 & b) ? (y = t + (i - t) * (s - a) / (r - a), g = s, null !== _ && (v = .5 * -Math.PI)) : 0 != (8 & b) ? (y = t + (i - t) * (l - a) / (r - a), 
                g = l, null !== _ && (v = .5 * Math.PI)) : 0 != (2 & b) ? (g = a + (r - a) * (o - t) / (i - t), 
                y = o, null !== _ && (v = 0)) : 0 != (1 & b) && (g = a + (r - a) * (n - t) / (i - t), 
                y = n, null !== _ && (v = Math.PI)), b === m ? (t = y, a = g, m = e._computeOutCode(t, a, n, s, o, l), 
                null !== _ && (_.x = v)) : (i = y, r = g, d = e._computeOutCode(i, r, n, s, o, l), 
                null !== _ && (_.y = v));
            }
            return p && (f ? (p = 2, null !== h && (h.x = i, h.y = r), null !== u && (u.x = i, 
            u.y = i), null !== _ && (_.x = _.y + Math.PI)) : c ? (p = 1, null !== h && (h.x = t, 
            h.y = a), null !== u && (u.x = t, u.y = a), null !== _ && (_.y = _.x + Math.PI)) : (p = 3, 
            null !== h && (h.x = t, h.y = a), null !== u && (u.x = i, u.y = r))), p;
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 0;
        }, e.prototype.containsPoint = function(t, e) {
            var a = .5 * this.width;
            if (t >= -a && t <= a) {
                var i = .5 * this.height;
                if (e >= -i && e <= i) return !0;
            }
            return !1;
        }, e.prototype.intersectsSegment = function(t, a, i, r, n, s, o) {
            void 0 === n && (n = null), void 0 === s && (s = null), void 0 === o && (o = null);
            var l = .5 * this.width, h = .5 * this.height;
            return e.rectangleIntersectsSegment(t, a, i, r, -l, -h, l, h, n, s, o);
        }, e;
    }(e);
    t.RectangleBoundingBoxData = i;
    var r = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.EllipseData]";
        }, e.ellipseIntersectsSegment = function(t, e, a, i, r, n, s, o, l, h, u) {
            void 0 === l && (l = null), void 0 === h && (h = null), void 0 === u && (u = null);
            var _ = s / o, f = _ * _, c = a - t, p = (i *= _) - (e *= _), m = Math.sqrt(c * c + p * p), d = c / m, y = p / m, g = (r - t) * d + (n - e) * y, v = s * s, b = v - (t * t + e * e) + g * g, D = 0;
            if (b >= 0) {
                var T = Math.sqrt(b), A = g - T, P = g + T, O = A < 0 ? -1 : A <= m ? 0 : 1, S = P < 0 ? -1 : P <= m ? 0 : 1, x = O * S;
                if (x < 0) return -1;
                0 === x && (-1 === O ? (D = 2, a = t + P * d, i = (e + P * y) / _, null !== l && (l.x = a, 
                l.y = i), null !== h && (h.x = a, h.y = i), null !== u && (u.x = Math.atan2(i / v * f, a / v), 
                u.y = u.x + Math.PI)) : 1 === S ? (D = 1, t += A * d, e = (e + A * y) / _, null !== l && (l.x = t, 
                l.y = e), null !== h && (h.x = t, h.y = e), null !== u && (u.x = Math.atan2(e / v * f, t / v), 
                u.y = u.x + Math.PI)) : (D = 3, null !== l && (l.x = t + A * d, l.y = (e + A * y) / _, 
                null !== u && (u.x = Math.atan2(l.y / v * f, l.x / v))), null !== h && (h.x = t + P * d, 
                h.y = (e + P * y) / _, null !== u && (u.y = Math.atan2(h.y / v * f, h.x / v)))));
            }
            return D;
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 1;
        }, e.prototype.containsPoint = function(t, e) {
            var a = .5 * this.width;
            if (t >= -a && t <= a) {
                var i = .5 * this.height;
                if (e >= -i && e <= i) return e *= a / i, Math.sqrt(t * t + e * e) <= a;
            }
            return !1;
        }, e.prototype.intersectsSegment = function(t, a, i, r, n, s, o) {
            return void 0 === n && (n = null), void 0 === s && (s = null), void 0 === o && (o = null), 
            e.ellipseIntersectsSegment(t, a, i, r, 0, 0, .5 * this.width, .5 * this.height, n, s, o);
        }, e;
    }(e);
    t.EllipseBoundingBoxData = r;
    var n = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.vertices = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.PolygonBoundingBoxData]";
        }, e.polygonIntersectsSegment = function(t, e, a, i, r, n, s, o) {
            void 0 === n && (n = null), void 0 === s && (s = null), void 0 === o && (o = null), 
            t === a && (t = a + 1e-6), e === i && (e = i + 1e-6);
            for (var l = r.length, h = t - a, u = e - i, _ = t * i - e * a, f = 0, c = r[l - 2], p = r[l - 1], m = 0, d = 0, y = 0, g = 0, v = 0, b = 0, D = 0; D < l; D += 2) {
                var T = r[D], A = r[D + 1];
                c === T && (c = T + 1e-4), p === A && (p = A + 1e-4);
                var P = c - T, O = p - A, S = c * A - p * T, x = h * O - u * P, E = (_ * P - h * S) / x;
                if ((E >= c && E <= T || E >= T && E <= c) && (0 === h || E >= t && E <= a || E >= a && E <= t)) {
                    var M = (_ * O - u * S) / x;
                    if ((M >= p && M <= A || M >= A && M <= p) && (0 === u || M >= e && M <= i || M >= i && M <= e)) {
                        if (null === s) {
                            y = E, g = M, v = E, b = M, f++, null !== o && (o.x = Math.atan2(A - p, T - c) - .5 * Math.PI, 
                            o.y = o.x);
                            break;
                        }
                        var C = E - t;
                        C < 0 && (C = -C), 0 === f ? (m = C, d = C, y = E, g = M, v = E, b = M, null !== o && (o.x = Math.atan2(A - p, T - c) - .5 * Math.PI, 
                        o.y = o.x)) : (C < m && (m = C, y = E, g = M, null !== o && (o.x = Math.atan2(A - p, T - c) - .5 * Math.PI)), 
                        C > d && (d = C, v = E, b = M, null !== o && (o.y = Math.atan2(A - p, T - c) - .5 * Math.PI))), 
                        f++;
                    }
                }
                c = T, p = A;
            }
            return 1 === f ? (null !== n && (n.x = y, n.y = g), null !== s && (s.x = y, s.y = g), 
            null !== o && (o.y = o.x + Math.PI)) : f > 1 && (f++, null !== n && (n.x = y, n.y = g), 
            null !== s && (s.x = v, s.y = b)), f;
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.type = 2, this.x = 0, this.y = 0, this.vertices.length = 0;
        }, e.prototype.containsPoint = function(t, e) {
            var a = !1;
            if (t >= this.x && t <= this.width && e >= this.y && e <= this.height) for (var i = 0, r = this.vertices.length, n = r - 2; i < r; i += 2) {
                var s = this.vertices[n + 1], o = this.vertices[i + 1];
                if (o < e && s >= e || s < e && o >= e) {
                    var l = this.vertices[n], h = this.vertices[i];
                    (e - o) * (l - h) / (s - o) + h < t && (a = !a);
                }
                n = i;
            }
            return a;
        }, e.prototype.intersectsSegment = function(t, a, r, n, s, o, l) {
            void 0 === s && (s = null), void 0 === o && (o = null), void 0 === l && (l = null);
            var h = 0;
            return 0 !== i.rectangleIntersectsSegment(t, a, r, n, this.x, this.y, this.x + this.width, this.y + this.height, null, null, null) && (h = e.polygonIntersectsSegment(t, a, r, n, this.vertices, s, o, l)), 
            h;
        }, e;
    }(e);
    t.PolygonBoundingBoxData = n;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.cachedFrames = [], e.boneTimelines = {}, e.surfaceTimelines = {}, e.slotTimelines = {}, 
            e.constraintTimelines = {}, e.animationTimelines = {}, e.boneCachedFrameIndices = {}, 
            e.slotCachedFrameIndices = {}, e.actionTimeline = null, e.zOrderTimeline = null, 
            e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.AnimationData]";
        }, e.prototype._onClear = function() {
            for (var t in this.boneTimelines) {
                for (var e = 0, a = this.boneTimelines[t]; e < a.length; e++) (_ = a[e]).returnToPool();
                delete this.boneTimelines[t];
            }
            for (var t in this.surfaceTimelines) {
                for (var i = 0, r = this.surfaceTimelines[t]; i < r.length; i++) (_ = r[i]).returnToPool();
                delete this.surfaceTimelines[t];
            }
            for (var t in this.slotTimelines) {
                for (var n = 0, s = this.slotTimelines[t]; n < s.length; n++) (_ = s[n]).returnToPool();
                delete this.slotTimelines[t];
            }
            for (var t in this.constraintTimelines) {
                for (var o = 0, l = this.constraintTimelines[t]; o < l.length; o++) (_ = l[o]).returnToPool();
                delete this.constraintTimelines[t];
            }
            for (var t in this.animationTimelines) {
                for (var h = 0, u = this.animationTimelines[t]; h < u.length; h++) {
                    var _ = u[h];
                    _.returnToPool();
                }
                delete this.animationTimelines[t];
            }
            for (var t in this.boneCachedFrameIndices) delete this.boneCachedFrameIndices[t];
            for (var t in this.slotCachedFrameIndices) delete this.slotCachedFrameIndices[t];
            null !== this.actionTimeline && this.actionTimeline.returnToPool(), null !== this.zOrderTimeline && this.zOrderTimeline.returnToPool(), 
            this.frameIntOffset = 0, this.frameFloatOffset = 0, this.frameOffset = 0, this.frameCount = 0, 
            this.playTimes = 0, this.duration = 0, this.scale = 1, this.fadeInTime = 0, this.cacheFrameRate = 0, 
            this.name = "", this.cachedFrames.length = 0, this.actionTimeline = null, this.zOrderTimeline = null, 
            this.parent = null;
        }, e.prototype.cacheFrames = function(t) {
            if (!(this.cacheFrameRate > 0)) {
                this.cacheFrameRate = Math.max(Math.ceil(t * this.scale), 1);
                var e = Math.ceil(this.cacheFrameRate * this.duration) + 1;
                this.cachedFrames.length = e;
                for (var a = 0, i = this.cacheFrames.length; a < i; ++a) this.cachedFrames[a] = !1;
                for (var r = 0, n = this.parent.sortedBones; r < n.length; r++) {
                    for (var s = n[r], a = 0, i = (u = new Array(e)).length; a < i; ++a) u[a] = -1;
                    this.boneCachedFrameIndices[s.name] = u;
                }
                for (var o = 0, l = this.parent.sortedSlots; o < l.length; o++) {
                    for (var h = l[o], u = new Array(e), a = 0, i = u.length; a < i; ++a) u[a] = -1;
                    this.slotCachedFrameIndices[h.name] = u;
                }
            }
        }, e.prototype.addBoneTimeline = function(t, e) {
            var a = t.name in this.boneTimelines ? this.boneTimelines[t.name] : this.boneTimelines[t.name] = [];
            a.indexOf(e) < 0 && a.push(e);
        }, e.prototype.addSurfaceTimeline = function(t, e) {
            var a = t.name in this.surfaceTimelines ? this.surfaceTimelines[t.name] : this.surfaceTimelines[t.name] = [];
            a.indexOf(e) < 0 && a.push(e);
        }, e.prototype.addSlotTimeline = function(t, e) {
            var a = t.name in this.slotTimelines ? this.slotTimelines[t.name] : this.slotTimelines[t.name] = [];
            a.indexOf(e) < 0 && a.push(e);
        }, e.prototype.addConstraintTimeline = function(t, e) {
            var a = t.name in this.constraintTimelines ? this.constraintTimelines[t.name] : this.constraintTimelines[t.name] = [];
            a.indexOf(e) < 0 && a.push(e);
        }, e.prototype.addAnimationTimeline = function(t, e) {
            var a = t in this.animationTimelines ? this.animationTimelines[t] : this.animationTimelines[t] = [];
            a.indexOf(e) < 0 && a.push(e);
        }, e.prototype.getBoneTimelines = function(t) {
            return t in this.boneTimelines ? this.boneTimelines[t] : null;
        }, e.prototype.getSurfaceTimelines = function(t) {
            return t in this.surfaceTimelines ? this.surfaceTimelines[t] : null;
        }, e.prototype.getSlotTimelines = function(t) {
            return t in this.slotTimelines ? this.slotTimelines[t] : null;
        }, e.prototype.getConstraintTimelines = function(t) {
            return t in this.constraintTimelines ? this.constraintTimelines[t] : null;
        }, e.prototype.getAnimationTimelines = function(t) {
            return t in this.animationTimelines ? this.animationTimelines[t] : null;
        }, e.prototype.getBoneCachedFrameIndices = function(t) {
            return t in this.boneCachedFrameIndices ? this.boneCachedFrameIndices[t] : null;
        }, e.prototype.getSlotCachedFrameIndices = function(t) {
            return t in this.slotCachedFrameIndices ? this.slotCachedFrameIndices[t] : null;
        }, e;
    }(t.BaseObject);
    t.AnimationData = e;
    var i = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.TimelineData]";
        }, e.prototype._onClear = function() {
            this.type = 10, this.offset = 0, this.frameIndicesOffset = -1;
        }, e;
    }(t.BaseObject);
    t.TimelineData = i;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.boneMask = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.AnimationConfig]";
        }, e.prototype._onClear = function() {
            this.pauseFadeOut = !0, this.fadeOutMode = 4, this.fadeOutTweenType = 1, this.fadeOutTime = -1, 
            this.actionEnabled = !0, this.additiveBlending = !1, this.displayControl = !0, this.pauseFadeIn = !0, 
            this.resetToPose = !0, this.fadeInTweenType = 1, this.playTimes = -1, this.layer = 0, 
            this.position = 0, this.duration = -1, this.timeScale = -100, this.weight = 1, this.fadeInTime = -1, 
            this.autoFadeOutTime = -1, this.name = "", this.animation = "", this.group = "", 
            this.boneMask.length = 0;
        }, e.prototype.clear = function() {
            this._onClear();
        }, e.prototype.copyFrom = function(t) {
            this.pauseFadeOut = t.pauseFadeOut, this.fadeOutMode = t.fadeOutMode, this.autoFadeOutTime = t.autoFadeOutTime, 
            this.fadeOutTweenType = t.fadeOutTweenType, this.actionEnabled = t.actionEnabled, 
            this.additiveBlending = t.additiveBlending, this.displayControl = t.displayControl, 
            this.pauseFadeIn = t.pauseFadeIn, this.resetToPose = t.resetToPose, this.playTimes = t.playTimes, 
            this.layer = t.layer, this.position = t.position, this.duration = t.duration, this.timeScale = t.timeScale, 
            this.fadeInTime = t.fadeInTime, this.fadeOutTime = t.fadeOutTime, this.fadeInTweenType = t.fadeInTweenType, 
            this.weight = t.weight, this.name = t.name, this.animation = t.animation, this.group = t.group, 
            this.boneMask.length = t.boneMask.length;
            for (var e = 0, a = this.boneMask.length; e < a; ++e) this.boneMask[e] = t.boneMask[e];
        }, e.prototype.containsBoneMask = function(t) {
            return 0 === this.boneMask.length || this.boneMask.indexOf(t) >= 0;
        }, e.prototype.addBoneMask = function(t, e, a) {
            void 0 === a && (a = !0);
            var i = t.getBone(e);
            if (null !== i && (this.boneMask.indexOf(e) < 0 && this.boneMask.push(e), a)) for (var r = 0, n = t.getBones(); r < n.length; r++) {
                var s = n[r];
                this.boneMask.indexOf(s.name) < 0 && i.contains(s) && this.boneMask.push(s.name);
            }
        }, e.prototype.removeBoneMask = function(t, e, a) {
            void 0 === a && (a = !0);
            var i = this.boneMask.indexOf(e);
            if (i >= 0 && this.boneMask.splice(i, 1), a) {
                var r = t.getBone(e);
                if (null !== r) if (this.boneMask.length > 0) for (var n = 0, s = t.getBones(); n < s.length; n++) {
                    var o = s[n], l = this.boneMask.indexOf(o.name);
                    l >= 0 && r.contains(o) && this.boneMask.splice(l, 1);
                } else for (var h = 0, u = t.getBones(); h < u.length; h++) (o = u[h]) !== r && (r.contains(o) || this.boneMask.push(o.name));
            }
        }, e;
    }(t.BaseObject);
    t.AnimationConfig = e;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.textures = {}, e;
        }
        return a(e, t), e.prototype._onClear = function() {
            for (var t in this.textures) this.textures[t].returnToPool(), delete this.textures[t];
            this.autoSearch = !1, this.width = 0, this.height = 0, this.scale = 1, this.name = "", 
            this.imagePath = "";
        }, e.prototype.copyFrom = function(t) {
            this.autoSearch = t.autoSearch, this.scale = t.scale, this.width = t.width, this.height = t.height, 
            this.name = t.name, this.imagePath = t.imagePath;
            for (var e in this.textures) this.textures[e].returnToPool(), delete this.textures[e];
            for (var e in t.textures) {
                var a = this.createTexture();
                a.copyFrom(t.textures[e]), this.textures[e] = a;
            }
        }, e.prototype.addTexture = function(t) {
            t.name in this.textures ? console.warn("Same texture: " + t.name) : (t.parent = this, 
            this.textures[t.name] = t);
        }, e.prototype.getTexture = function(t) {
            return t in this.textures ? this.textures[t] : null;
        }, e;
    }(t.BaseObject);
    t.TextureAtlasData = e;
    var i = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.region = new t.Rectangle(), a.frame = null, a;
        }
        return a(i, e), i.createRectangle = function() {
            return new t.Rectangle();
        }, i.prototype._onClear = function() {
            this.rotated = !1, this.name = "", this.region.clear(), this.parent = null, this.frame = null;
        }, i.prototype.copyFrom = function(t) {
            this.rotated = t.rotated, this.name = t.name, this.region.copyFrom(t.region), this.parent = t.parent, 
            null === this.frame && null !== t.frame ? this.frame = i.createRectangle() : null !== this.frame && null === t.frame && (this.frame = null), 
            null !== this.frame && null !== t.frame && this.frame.copyFrom(t.frame);
        }, i;
    }(t.BaseObject);
    t.TextureData = i;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.vertices = [], e.bones = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.DeformVertices]";
        }, e.prototype._onClear = function() {
            this.verticesDirty = !1, this.vertices.length = 0, this.bones.length = 0, this.verticesData = null;
        }, e.prototype.init = function(t, e) {
            if (this.verticesData = t, null !== this.verticesData) {
                var a = 0;
                a = null !== this.verticesData.weight ? 2 * this.verticesData.weight.count : 2 * this.verticesData.data.intArray[this.verticesData.offset + 0], 
                this.verticesDirty = !0, this.vertices.length = a, this.bones.length = 0;
                for (var i = 0, r = this.vertices.length; i < r; ++i) this.vertices[i] = 0;
                if (null !== this.verticesData.weight) for (var i = 0, r = this.verticesData.weight.bones.length; i < r; ++i) {
                    var n = e.getBone(this.verticesData.weight.bones[i].name);
                    this.bones.push(n);
                }
            } else this.verticesDirty = !1, this.vertices.length = 0, this.bones.length = 0, 
            this.verticesData = null;
        }, e.prototype.isBonesUpdate = function() {
            for (var t = 0, e = this.bones; t < e.length; t++) {
                var a = e[t];
                if (null !== a && a._childrenTransformDirty) return !0;
            }
            return !1;
        }, e;
    }(t.BaseObject);
    t.DeformVertices = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t._bones = [], t._slots = [], t._constraints = [], t._actions = [], t._animation = null, 
            t._proxy = null, t._replaceTextureAtlasData = null, t._clock = null, t;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.Armature]";
        }, i._onSortSlots = function(t, e) {
            return t._zOrder > e._zOrder ? 1 : -1;
        }, i.prototype._onClear = function() {
            null !== this._clock && this._clock.remove(this);
            for (var t = 0, e = this._bones; t < e.length; t++) e[t].returnToPool();
            for (var a = 0, i = this._slots; a < i.length; a++) i[a].returnToPool();
            for (var r = 0, n = this._constraints; r < n.length; r++) n[r].returnToPool();
            for (var s = 0, o = this._actions; s < o.length; s++) o[s].returnToPool();
            null !== this._animation && this._animation.returnToPool(), null !== this._proxy && this._proxy.dbClear(), 
            null !== this._replaceTextureAtlasData && this._replaceTextureAtlasData.returnToPool(), 
            this.inheritAnimation = !0, this.userData = null, this._lockUpdate = !1, this._slotsDirty = !0, 
            this._zOrderDirty = !1, this._flipX = !1, this._flipY = !1, this._cacheFrameIndex = -1, 
            this._bones.length = 0, this._slots.length = 0, this._constraints.length = 0, this._actions.length = 0, 
            this._armatureData = null, this._animation = null, this._proxy = null, this._display = null, 
            this._replaceTextureAtlasData = null, this._replacedTexture = null, this._dragonBones = null, 
            this._clock = null, this._parent = null;
        }, i.prototype._sortZOrder = function(t, e) {
            var a = this._armatureData.sortedSlots, i = null === t;
            if (this._zOrderDirty || !i) {
                for (var r = 0, n = a.length; r < n; ++r) {
                    var s = i ? r : t[e + r];
                    if (!(s < 0 || s >= n)) {
                        var o = a[s], l = this.getSlot(o.name);
                        null !== l && l._setZorder(r);
                    }
                }
                this._slotsDirty = !0, this._zOrderDirty = !i;
            }
        }, i.prototype._addBone = function(t) {
            this._bones.indexOf(t) < 0 && this._bones.push(t);
        }, i.prototype._addSlot = function(t) {
            this._slots.indexOf(t) < 0 && this._slots.push(t);
        }, i.prototype._addConstraint = function(t) {
            this._constraints.indexOf(t) < 0 && this._constraints.push(t);
        }, i.prototype._bufferAction = function(t, e) {
            this._actions.indexOf(t) < 0 && (e ? this._actions.push(t) : this._actions.unshift(t));
        }, i.prototype.dispose = function() {
            null !== this._armatureData && (this._lockUpdate = !0, this._dragonBones.bufferObject(this));
        }, i.prototype.init = function(e, a, i, r) {
            null === this._armatureData && (this._armatureData = e, this._animation = t.BaseObject.borrowObject(t.Animation), 
            this._proxy = a, this._display = i, this._dragonBones = r, this._proxy.dbInit(this), 
            this._animation.init(this), this._animation.animations = this._armatureData.animations);
        }, i.prototype.advanceTime = function(t) {
            if (!this._lockUpdate) if (null !== this._armatureData) if (null !== this._armatureData.parent) {
                var e = this._cacheFrameIndex;
                if (this._animation.advanceTime(t), this._slotsDirty && (this._slotsDirty = !1, 
                this._slots.sort(i._onSortSlots)), this._cacheFrameIndex < 0 || this._cacheFrameIndex !== e) {
                    var a = 0, r = 0;
                    for (a = 0, r = this._bones.length; a < r; ++a) this._bones[a].update(this._cacheFrameIndex);
                    for (a = 0, r = this._slots.length; a < r; ++a) this._slots[a].update(this._cacheFrameIndex);
                }
                if (this._actions.length > 0) {
                    this._lockUpdate = !0;
                    for (var n = 0, s = this._actions; n < s.length; n++) {
                        var o = s[n], l = o.actionData;
                        if (null !== l && 0 === l.type) if (null !== o.slot) null !== (f = o.slot.childArmature) && f.animation.fadeIn(l.name); else if (null !== o.bone) for (var h = 0, u = this.getSlots(); h < u.length; h++) {
                            var _ = u[h];
                            if (_.parent === o.bone) {
                                var f = _.childArmature;
                                null !== f && f.animation.fadeIn(l.name);
                            }
                        } else this._animation.fadeIn(l.name);
                        o.returnToPool();
                    }
                    this._actions.length = 0, this._lockUpdate = !1;
                }
                this._proxy.dbUpdate();
            } else console.warn("The armature data has been disposed.\nPlease make sure dispose armature before call factory.clear()."); else console.warn("The armature has been disposed.");
        }, i.prototype.invalidUpdate = function(t, e) {
            if (void 0 === t && (t = null), void 0 === e && (e = !1), null !== t && t.length > 0) {
                if (null !== (s = this.getBone(t)) && (s.invalidUpdate(), e)) for (var a = 0, i = this._slots; a < i.length; a++) (h = i[a]).parent === s && h.invalidUpdate();
            } else {
                for (var r = 0, n = this._bones; r < n.length; r++) {
                    var s = n[r];
                    s.invalidUpdate();
                }
                if (e) for (var o = 0, l = this._slots; o < l.length; o++) {
                    var h = l[o];
                    h.invalidUpdate();
                }
            }
        }, i.prototype.containsPoint = function(t, e) {
            for (var a = 0, i = this._slots; a < i.length; a++) {
                var r = i[a];
                if (r.containsPoint(t, e)) return r;
            }
            return null;
        }, i.prototype.intersectsSegment = function(t, e, a, i, r, n, s) {
            void 0 === r && (r = null), void 0 === n && (n = null), void 0 === s && (s = null);
            for (var o = t === a, l = 0, h = 0, u = 0, _ = 0, f = 0, c = 0, p = 0, m = 0, d = null, y = null, g = 0, v = this._slots; g < v.length; g++) {
                var b = v[g];
                if (b.intersectsSegment(t, e, a, i, r, n, s) > 0) {
                    if (null === r && null === n) {
                        d = b;
                        break;
                    }
                    if (null !== r && ((D = o ? r.y - e : r.x - t) < 0 && (D = -D), (null === d || D < l) && (l = D, 
                    u = r.x, _ = r.y, d = b, s && (p = s.x))), null !== n) {
                        var D = n.x - t;
                        D < 0 && (D = -D), (null === y || D > h) && (h = D, f = n.x, c = n.y, y = b, null !== s && (m = s.y));
                    }
                }
            }
            return null !== d && null !== r && (r.x = u, r.y = _, null !== s && (s.x = p)), 
            null !== y && null !== n && (n.x = f, n.y = c, null !== s && (s.y = m)), d;
        }, i.prototype.getBone = function(t) {
            for (var e = 0, a = this._bones; e < a.length; e++) {
                var i = a[e];
                if (i.name === t) return i;
            }
            return null;
        }, i.prototype.getBoneByDisplay = function(t) {
            var e = this.getSlotByDisplay(t);
            return null !== e ? e.parent : null;
        }, i.prototype.getSlot = function(t) {
            for (var e = 0, a = this._slots; e < a.length; e++) {
                var i = a[e];
                if (i.name === t) return i;
            }
            return null;
        }, i.prototype.getSlotByDisplay = function(t) {
            if (null !== t) for (var e = 0, a = this._slots; e < a.length; e++) {
                var i = a[e];
                if (i.display === t) return i;
            }
            return null;
        }, i.prototype.getBones = function() {
            return this._bones;
        }, i.prototype.getSlots = function() {
            return this._slots;
        }, Object.defineProperty(i.prototype, "flipX", {
            get: function() {
                return this._flipX;
            },
            set: function(t) {
                this._flipX !== t && (this._flipX = t, this.invalidUpdate());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "flipY", {
            get: function() {
                return this._flipY;
            },
            set: function(t) {
                this._flipY !== t && (this._flipY = t, this.invalidUpdate());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "cacheFrameRate", {
            get: function() {
                return this._armatureData.cacheFrameRate;
            },
            set: function(t) {
                if (this._armatureData.cacheFrameRate !== t) {
                    this._armatureData.cacheFrames(t);
                    for (var e = 0, a = this._slots; e < a.length; e++) {
                        var i = a[e].childArmature;
                        null !== i && (i.cacheFrameRate = t);
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "name", {
            get: function() {
                return this._armatureData.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "armatureData", {
            get: function() {
                return this._armatureData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animation", {
            get: function() {
                return this._animation;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "proxy", {
            get: function() {
                return this._proxy;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "eventDispatcher", {
            get: function() {
                return this._proxy;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "display", {
            get: function() {
                return this._display;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "replacedTexture", {
            get: function() {
                return this._replacedTexture;
            },
            set: function(t) {
                if (this._replacedTexture !== t) {
                    null !== this._replaceTextureAtlasData && (this._replaceTextureAtlasData.returnToPool(), 
                    this._replaceTextureAtlasData = null), this._replacedTexture = t;
                    for (var e = 0, a = this._slots; e < a.length; e++) {
                        var i = a[e];
                        i.invalidUpdate(), i.update(-1);
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "clock", {
            get: function() {
                return this._clock;
            },
            set: function(t) {
                if (this._clock !== t) {
                    null !== this._clock && this._clock.remove(this), this._clock = t, this._clock && this._clock.add(this);
                    for (var e = 0, a = this._slots; e < a.length; e++) {
                        var i = a[e].childArmature;
                        null !== i && (i.clock = this._clock);
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "parent", {
            get: function() {
                return this._parent;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.replaceTexture = function(t) {
            this.replacedTexture = t;
        }, i.prototype.hasEventListener = function(t) {
            return console.warn("Deprecated."), this._proxy.hasDBEventListener(t);
        }, i.prototype.addEventListener = function(t, e, a) {
            console.warn("Deprecated."), this._proxy.addDBEventListener(t, e, a);
        }, i.prototype.removeEventListener = function(t, e, a) {
            console.warn("Deprecated."), this._proxy.removeDBEventListener(t, e, a);
        }, i.prototype.enableAnimationCache = function(t) {
            console.warn("Deprecated."), this.cacheFrameRate = t;
        }, i.prototype.getDisplay = function() {
            return this._display;
        }, i;
    }(t.BaseObject);
    t.Armature = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.globalTransformMatrix = new t.Matrix(), a.global = new t.Transform(), a.offset = new t.Transform(), 
            a;
        }
        return a(i, e), i.prototype._onClear = function() {
            this.globalTransformMatrix.identity(), this.global.identity(), this.offset.identity(), 
            this.origin = null, this.userData = null, this._globalDirty = !1, this._armature = null;
        }, i.prototype.updateGlobalTransform = function() {
            this._globalDirty && (this._globalDirty = !1, this.global.fromMatrix(this.globalTransformMatrix));
        }, Object.defineProperty(i.prototype, "armature", {
            get: function() {
                return this._armature;
            },
            enumerable: !0,
            configurable: !0
        }), i._helpMatrix = new t.Matrix(), i._helpTransform = new t.Transform(), i._helpPoint = new t.Point(), 
        i;
    }(t.BaseObject);
    t.TransformObject = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.animationPose = new t.Transform(), a._blendState = new t.BlendState(), 
            a;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.Bone]";
        }, i.prototype._onClear = function() {
            e.prototype._onClear.call(this), this.offsetMode = 1, this.animationPose.identity(), 
            this._transformDirty = !1, this._childrenTransformDirty = !1, this._localDirty = !0, 
            this._hasConstraint = !1, this._visible = !0, this._cachedFrameIndex = -1, this._blendState.clear(), 
            this._boneData = null, this._parent = null, this._cachedFrameIndices = null;
        }, i.prototype._updateGlobalTransformMatrix = function(e) {
            var a = this._boneData, i = this.global, r = this.globalTransformMatrix, n = this.origin, s = this.offset, o = this.animationPose, l = this._parent, h = this._armature.flipX, u = this._armature.flipY === t.DragonBones.yDown, _ = null !== l, f = 0;
            if (1 === this.offsetMode ? null !== n ? (i.x = n.x + s.x + o.x, i.y = n.y + s.y + o.y, 
            i.skew = n.skew + s.skew + o.skew, i.rotation = n.rotation + s.rotation + o.rotation, 
            i.scaleX = n.scaleX * s.scaleX * o.scaleX, i.scaleY = n.scaleY * s.scaleY * o.scaleY) : i.copyFrom(s).add(o) : 0 === this.offsetMode ? null !== n ? i.copyFrom(n).add(o) : i.copyFrom(o) : (_ = !1, 
            i.copyFrom(s)), _) {
                var c = 0 === l._boneData.type ? l.globalTransformMatrix : l._getGlobalTransformMatrix(i.x, i.y);
                if (a.inheritScale) a.inheritRotation || (l.updateGlobalTransform(), f = h && u ? i.rotation - (l.global.rotation + Math.PI) : h ? i.rotation + l.global.rotation + Math.PI : u ? i.rotation + l.global.rotation : i.rotation - l.global.rotation, 
                i.rotation = f), i.toMatrix(r), r.concat(c), a.inheritTranslation ? (i.x = r.tx, 
                i.y = r.ty) : (r.tx = i.x, r.ty = i.y), e ? i.fromMatrix(r) : this._globalDirty = !0; else {
                    if (a.inheritTranslation) {
                        var p = i.x, m = i.y;
                        i.x = c.a * p + c.c * m + c.tx, i.y = c.b * p + c.d * m + c.ty;
                    } else h && (i.x = -i.x), u && (i.y = -i.y);
                    a.inheritRotation ? (l.updateGlobalTransform(), f = l.global.scaleX < 0 ? i.rotation + l.global.rotation + Math.PI : i.rotation + l.global.rotation, 
                    c.a * c.d - c.b * c.c < 0 && (f -= 2 * i.rotation, (h !== u || a.inheritReflection) && (i.skew += Math.PI)), 
                    i.rotation = f) : (h || u) && (h && u ? f = i.rotation + Math.PI : (f = h ? Math.PI - i.rotation : -i.rotation, 
                    i.skew += Math.PI), i.rotation = f), i.toMatrix(r);
                }
            } else (h || u) && (h && (i.x = -i.x), u && (i.y = -i.y), h && u ? f = i.rotation + Math.PI : (f = h ? Math.PI - i.rotation : -i.rotation, 
            i.skew += Math.PI), i.rotation = f), i.toMatrix(r);
        }, i.prototype.init = function(t, e) {
            null === this._boneData && (this._boneData = t, this._armature = e, null !== this._boneData.parent && (this._parent = this._armature.getBone(this._boneData.parent.name)), 
            this._armature._addBone(this), this.origin = this._boneData.transform);
        }, i.prototype.update = function(t) {
            if (this._blendState.dirty = !1, t >= 0 && null !== this._cachedFrameIndices) {
                var e = this._cachedFrameIndices[t];
                if (e >= 0 && this._cachedFrameIndex === e) this._transformDirty = !1; else if (e >= 0) this._transformDirty = !0, 
                this._cachedFrameIndex = e; else {
                    if (this._hasConstraint) for (var a = 0, i = this._armature._constraints; a < i.length; a++) (s = i[a])._root === this && s.update();
                    this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty ? (this._transformDirty = !0, 
                    this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, 
                    this._cachedFrameIndices[t] = this._cachedFrameIndex) : (this._transformDirty = !0, 
                    this._cachedFrameIndex = -1);
                }
            } else {
                if (this._hasConstraint) for (var r = 0, n = this._armature._constraints; r < n.length; r++) {
                    var s = n[r];
                    s._root === this && s.update();
                }
                (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && (t = -1, 
                this._transformDirty = !0, this._cachedFrameIndex = -1);
            }
            if (this._transformDirty) if (this._transformDirty = !1, this._childrenTransformDirty = !0, 
            this._cachedFrameIndex < 0) {
                var o = t >= 0;
                this._localDirty && this._updateGlobalTransformMatrix(o), o && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
            } else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex); else this._childrenTransformDirty && (this._childrenTransformDirty = !1);
            this._localDirty = !0;
        }, i.prototype.updateByConstraint = function() {
            this._localDirty && (this._localDirty = !1, (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && this._updateGlobalTransformMatrix(!0), 
            this._transformDirty = !0);
        }, i.prototype.invalidUpdate = function() {
            this._transformDirty = !0;
        }, i.prototype.contains = function(t) {
            if (t === this) return !1;
            for (var e = t; e !== this && null !== e; ) e = e.parent;
            return e === this;
        }, Object.defineProperty(i.prototype, "boneData", {
            get: function() {
                return this._boneData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "visible", {
            get: function() {
                return this._visible;
            },
            set: function(t) {
                if (this._visible !== t) {
                    this._visible = t;
                    for (var e = 0, a = this._armature.getSlots(); e < a.length; e++) {
                        var i = a[e];
                        i.parent === this && i._updateVisible();
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "name", {
            get: function() {
                return this._boneData.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "parent", {
            get: function() {
                return this._parent;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.getBones = function() {
            console.warn("Deprecated.");
            for (var t = new Array(), e = 0, a = this._armature.getBones(); e < a.length; e++) {
                var i = a[e];
                i.parent === this && t.push(i);
            }
            return t;
        }, i.prototype.getSlots = function() {
            console.warn("Deprecated.");
            for (var t = new Array(), e = 0, a = this._armature.getSlots(); e < a.length; e++) {
                var i = a[e];
                i.parent === this && t.push(i);
            }
            return t;
        }, Object.defineProperty(i.prototype, "slot", {
            get: function() {
                console.warn("Deprecated.");
                for (var t = 0, e = this._armature.getSlots(); t < e.length; t++) {
                    var a = e[t];
                    if (a.parent === this) return a;
                }
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), i;
    }(t.TransformObject);
    t.Bone = e;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e._vertices = [], e._deformVertices = [], e._hullCache = [], e._matrixCahce = [], 
            e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.Surface]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this._dX = 0, this._dY = 0, this._k = 0, this._kX = 0, 
            this._kY = 0, this._vertices.length = 0, this._deformVertices.length = 0, this._matrixCahce.length = 0, 
            this._hullCache.length = 0;
        }, e.prototype._getAffineTransform = function(t, e, a, i, r, n, s, o, l, h, u, _, f) {
            var c = s - r, p = o - n, m = l - r, d = h - n;
            u.rotation = Math.atan2(p, c), u.skew = Math.atan2(d, m) - .5 * Math.PI - u.rotation, 
            f && (u.rotation += Math.PI), u.scaleX = Math.sqrt(c * c + p * p) / a, u.scaleY = Math.sqrt(m * m + d * d) / i, 
            u.toMatrix(_), u.x = _.tx = r - (_.a * t + _.c * e), u.y = _.ty = n - (_.b * t + _.d * e);
        }, e.prototype._updateVertices = function() {
            var t = this._boneData.vertices, e = this._vertices, a = this._deformVertices;
            if (null !== this._parent) if (1 === this._parent._boneData.type) for (var i = 0, r = t.length; i < r; i += 2) {
                var n = t[i] + a[i], s = t[i + 1] + a[i], o = this._parent._getGlobalTransformMatrix(n, s);
                e[i] = o.a * n + o.c * s + o.tx, e[i + 1] = o.b * n + o.d * s + o.ty;
            } else for (var l = this._parent.globalTransformMatrix, i = 0, r = t.length; i < r; i += 2) {
                var n = t[i] + a[i], s = t[i + 1] + a[i + 1];
                e[i] = l.a * n + l.c * s + l.tx, e[i + 1] = l.b * n + l.d * s + l.ty;
            } else for (var i = 0, r = t.length; i < r; i += 2) e[i] = t[i] + a[i], e[i + 1] = t[i + 1] + a[i + 1];
        }, e.prototype._updateGlobalTransformMatrix = function(t) {
            var e = 2 * this._boneData.segmentX, a = this._vertices.length - 2, i = this._vertices[0], r = this._vertices[1], n = this._vertices[e], s = this._vertices[e + 1], o = this._vertices[a], l = this._vertices[a + 1], h = this._vertices[a - e], u = this._vertices[a - e + 1], _ = i + .5 * (o - i), f = r + .5 * (l - r), c = _ + .5 * (n + .5 * (h - n) - _), p = f + .5 * (s + .5 * (u - s) - f), m = n + .5 * (o - n), d = s + .5 * (l - s), y = h + .5 * (o - h), g = u + .5 * (l - u);
            this._globalDirty = !1, this._getAffineTransform(0, 0, 200, 200, c, p, m, d, y, g, this.global, this.globalTransformMatrix, !1);
        }, e.prototype._getGlobalTransformMatrix = function(t, a) {
            var i = 1e3;
            if (t < -i || i < t || a < -i || i < a) return this.globalTransformMatrix;
            var r = !1, n = 200, s = this._boneData, o = s.segmentX, l = s.segmentY, h = 2 * s.segmentX, u = this._dX, _ = this._dY, f = Math.floor((t + n) / u), c = Math.floor((a + n) / _), p = 0, m = f * u - n, d = c * _ - n, y = this._matrixCahce, g = e._helpMatrix;
            if (t < -n) {
                if (a < -n || a >= n) return this.globalTransformMatrix;
                if (r = a > this._kX * (t + n) + d, p = 7 * (2 * (o * (l + 1) + 2 * o + l + c) + (r ? 1 : 0)), 
                this._matrixCahce[p] > 0) g.copyFromArray(y, p + 1); else {
                    var v = c * (h + 2), b = this._hullCache[4], D = this._hullCache[5], T = this._hullCache[2] - (l - c) * b, A = this._hullCache[3] - (l - c) * D, P = this._vertices;
                    r ? this._getAffineTransform(-n, d + _, 800, _, P[v + h + 2], P[v + h + 3], T + b, A + D, P[v], P[v + 1], e._helpTransform, g, !0) : this._getAffineTransform(-i, d, 800, _, T, A, P[v], P[v + 1], T + b, A + D, e._helpTransform, g, !1), 
                    y[p] = 1, y[p + 1] = g.a, y[p + 2] = g.b, y[p + 3] = g.c, y[p + 4] = g.d, y[p + 5] = g.tx, 
                    y[p + 6] = g.ty;
                }
            } else if (t >= n) {
                if (a < -n || a >= n) return this.globalTransformMatrix;
                if (r = a > this._kX * (t - i) + d, p = 7 * (2 * (o * (l + 1) + o + c) + (r ? 1 : 0)), 
                this._matrixCahce[p] > 0) g.copyFromArray(y, p + 1); else {
                    var v = (c + 1) * (h + 2) - 2, b = this._hullCache[4], D = this._hullCache[5], T = this._hullCache[0] + c * b, A = this._hullCache[1] + c * D, P = this._vertices;
                    r ? this._getAffineTransform(i, d + _, 800, _, T + b, A + D, P[v + h + 2], P[v + h + 3], T, A, e._helpTransform, g, !0) : this._getAffineTransform(n, d, 800, _, P[v], P[v + 1], T, A, P[v + h + 2], P[v + h + 3], e._helpTransform, g, !1), 
                    y[p] = 1, y[p + 1] = g.a, y[p + 2] = g.b, y[p + 3] = g.c, y[p + 4] = g.d, y[p + 5] = g.tx, 
                    y[p + 6] = g.ty;
                }
            } else if (a < -n) {
                if (t < -n || t >= n) return this.globalTransformMatrix;
                if (r = a > this._kY * (t - m - u) - i, p = 7 * (o * (l + 1) + 2 * f + (r ? 1 : 0)), 
                this._matrixCahce[p] > 0) g.copyFromArray(y, p + 1); else {
                    var v = 2 * f, b = this._hullCache[10], D = this._hullCache[11], T = this._hullCache[8] + f * b, A = this._hullCache[9] + f * D, P = this._vertices;
                    r ? this._getAffineTransform(m + u, -n, u, 800, P[v + 2], P[v + 3], P[v], P[v + 1], T + b, A + D, e._helpTransform, g, !0) : this._getAffineTransform(m, -i, u, 800, T, A, T + b, A + D, P[v], P[v + 1], e._helpTransform, g, !1), 
                    y[p] = 1, y[p + 1] = g.a, y[p + 2] = g.b, y[p + 3] = g.c, y[p + 4] = g.d, y[p + 5] = g.tx, 
                    y[p + 6] = g.ty;
                }
            } else if (a >= n) {
                if (t < -n || t >= n) return this.globalTransformMatrix;
                if (r = a > this._kY * (t - m - u) + n, p = 7 * (2 * (o * (l + 1) + o + l + c) + (r ? 1 : 0)), 
                this._matrixCahce[p] > 0) g.copyFromArray(y, p + 1); else {
                    var v = l * (h + 2) + 2 * f, b = this._hullCache[10], D = this._hullCache[11], T = this._hullCache[6] - (o - f) * b, A = this._hullCache[7] - (o - f) * D, P = this._vertices;
                    r ? this._getAffineTransform(m + u, i, u, 800, T + b, A + D, T, A, P[v + 2], P[v + 3], e._helpTransform, g, !0) : this._getAffineTransform(m, n, u, 800, P[v], P[v + 1], P[v + 2], P[v + 3], T, A, e._helpTransform, g, !1), 
                    y[p] = 1, y[p + 1] = g.a, y[p + 2] = g.b, y[p + 3] = g.c, y[p + 4] = g.d, y[p + 5] = g.tx, 
                    y[p + 6] = g.ty;
                }
            } else if (r = a > this._k * (t - m - u) + d, p = 7 * (2 * (o * c + f) + (r ? 1 : 0)), 
            this._matrixCahce[p] > 0) g.copyFromArray(y, p + 1); else {
                var v = 2 * f + c * (h + 2), P = this._vertices;
                r ? this._getAffineTransform(m + u, d + _, u, _, P[v + h + 4], P[v + h + 5], P[v + h + 2], P[v + h + 3], P[v + 2], P[v + 3], e._helpTransform, g, !0) : this._getAffineTransform(m, d, u, _, P[v], P[v + 1], P[v + 2], P[v + 3], P[v + h + 2], P[v + h + 3], e._helpTransform, g, !1), 
                y[p] = 1, y[p + 1] = g.a, y[p + 2] = g.b, y[p + 3] = g.c, y[p + 4] = g.d, y[p + 5] = g.tx, 
                y[p + 6] = g.ty;
            }
            return g;
        }, e.prototype.init = function(e, a) {
            if (null === this._boneData) {
                t.prototype.init.call(this, e, a);
                var i = e.segmentX, r = e.segmentY, n = e.vertices.length;
                this._dX = 400 / i, this._dY = 400 / r, this._k = -this._dY / this._dX, this._kX = -this._dY / 800, 
                this._kY = -800 / this._dX, this._vertices.length = n, this._deformVertices.length = n, 
                this._matrixCahce.length = 2 * (i * r + 2 * i + 2 * r) * 7, this._hullCache.length = 10;
                for (var s = 0; s < n; ++s) this._deformVertices[s] = 0;
            }
        }, e.prototype.update = function(t) {
            if (this._blendState.dirty = !1, t >= 0 && null !== this._cachedFrameIndices) {
                var a = this._cachedFrameIndices[t];
                if (a >= 0 && this._cachedFrameIndex === a) this._transformDirty = !1; else if (a >= 0) this._transformDirty = !0, 
                this._cachedFrameIndex = a; else {
                    if (this._hasConstraint) for (var i = 0, r = this._armature._constraints; i < r.length; i++) (o = r[i])._root === this && o.update();
                    this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty ? (this._transformDirty = !0, 
                    this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, 
                    this._cachedFrameIndices[t] = this._cachedFrameIndex) : (this._transformDirty = !0, 
                    this._cachedFrameIndex = -1);
                }
            } else {
                if (this._hasConstraint) for (var n = 0, s = this._armature._constraints; n < s.length; n++) {
                    var o = s[n];
                    o._root === this && o.update();
                }
                (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && (t = -1, 
                this._transformDirty = !0, this._cachedFrameIndex = -1);
            }
            if (this._transformDirty) {
                this._transformDirty = !1, this._childrenTransformDirty = !0;
                for (var l = 0, h = this._matrixCahce.length; l < h; l += 7) this._matrixCahce[l] = -1;
                if (this._updateVertices(), this._cachedFrameIndex < 0) {
                    var u = t >= 0;
                    this._localDirty && this._updateGlobalTransformMatrix(u), u && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
                } else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
                var _ = 2 * this.global.x, f = 2 * this.global.y, c = e._helpPoint;
                this.globalTransformMatrix.transformPoint(1e3, -200, c), this._hullCache[0] = c.x, 
                this._hullCache[1] = c.y, this._hullCache[2] = _ - c.x, this._hullCache[3] = f - c.y, 
                this.globalTransformMatrix.transformPoint(0, this._dY, c, !0), this._hullCache[4] = c.x, 
                this._hullCache[5] = c.y, this.globalTransformMatrix.transformPoint(200, 1e3, c), 
                this._hullCache[6] = c.x, this._hullCache[7] = c.y, this._hullCache[8] = _ - c.x, 
                this._hullCache[9] = f - c.y, this.globalTransformMatrix.transformPoint(this._dX, 0, c, !0), 
                this._hullCache[10] = c.x, this._hullCache[11] = c.y;
            } else this._childrenTransformDirty && (this._childrenTransformDirty = !1);
            this._localDirty = !0;
        }, e;
    }(t.Bone);
    t.Surface = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a._localMatrix = new t.Matrix(), a._colorTransform = new t.ColorTransform(), 
            a._displayDatas = [], a._displayList = [], a._deformVertices = null, a._rawDisplay = null, 
            a._meshDisplay = null, a;
        }
        return a(i, e), i.prototype._onClear = function() {
            e.prototype._onClear.call(this);
            for (var a = [], i = 0, r = this._displayList; i < r.length; i++) null !== (o = r[i]) && o !== this._rawDisplay && o !== this._meshDisplay && a.indexOf(o) < 0 && a.push(o);
            for (var n = 0, s = a; n < s.length; n++) {
                var o = s[n];
                o instanceof t.Armature ? o.dispose() : this._disposeDisplay(o, !0);
            }
            null !== this._deformVertices && this._deformVertices.returnToPool(), null !== this._meshDisplay && this._meshDisplay !== this._rawDisplay && this._disposeDisplay(this._meshDisplay, !1), 
            null !== this._rawDisplay && this._disposeDisplay(this._rawDisplay, !1), this.displayController = null, 
            this._displayDirty = !1, this._zOrderDirty = !1, this._blendModeDirty = !1, this._colorDirty = !1, 
            this._transformDirty = !1, this._visible = !0, this._blendMode = 0, this._displayIndex = -1, 
            this._animationDisplayIndex = -1, this._zOrder = 0, this._cachedFrameIndex = -1, 
            this._pivotX = 0, this._pivotY = 0, this._localMatrix.identity(), this._colorTransform.identity(), 
            this._displayList.length = 0, this._displayDatas.length = 0, this._slotData = null, 
            this._rawDisplayDatas = null, this._displayData = null, this._boundingBoxData = null, 
            this._textureData = null, this._deformVertices = null, this._rawDisplay = null, 
            this._meshDisplay = null, this._display = null, this._childArmature = null, this._parent = null, 
            this._cachedFrameIndices = null;
        }, i.prototype._getDefaultRawDisplayData = function(t) {
            var e = this._armature._armatureData.defaultSkin;
            if (null !== e) {
                var a = e.getDisplays(this._slotData.name);
                if (null !== a) return t < a.length ? a[t] : null;
            }
            return null;
        }, i.prototype._updateDisplayData = function() {
            var e = this._displayData, a = null !== this._deformVertices ? this._deformVertices.verticesData : null, r = this._textureData, n = null, s = null;
            if (this._displayData = null, this._boundingBoxData = null, this._textureData = null, 
            this._displayIndex >= 0 && (null !== this._rawDisplayDatas && (n = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null), 
            null === n && (n = this._getDefaultRawDisplayData(this._displayIndex)), this._displayIndex < this._displayDatas.length && (this._displayData = this._displayDatas[this._displayIndex])), 
            null !== this._displayData && (2 === this._displayData.type ? s = this._displayData.vertices : 4 === this._displayData.type ? s = this._displayData.vertices : null !== n && (2 === n.type ? s = n.vertices : 4 === n.type && (s = n.vertices)), 
            3 === this._displayData.type ? this._boundingBoxData = this._displayData.boundingBox : null !== n && 3 === n.type && (this._boundingBoxData = n.boundingBox), 
            0 === this._displayData.type ? this._textureData = this._displayData.texture : 2 === this._displayData.type && (this._textureData = this._displayData.texture)), 
            this._displayData !== e || s !== a || this._textureData !== r) {
                if (null === s && null !== this._textureData) {
                    var o = this._displayData, l = this._textureData.parent.scale * this._armature._armatureData.scale, h = this._textureData.frame;
                    this._pivotX = o.pivot.x, this._pivotY = o.pivot.y;
                    var u = null !== h ? h : this._textureData.region, _ = u.width, f = u.height;
                    this._textureData.rotated && null === h && (_ = u.height, f = u.width), this._pivotX *= _ * l, 
                    this._pivotY *= f * l, null !== h && (this._pivotX += h.x * l, this._pivotY += h.y * l), 
                    null !== this._displayData && null !== n && this._displayData !== n && (n.transform.toMatrix(i._helpMatrix), 
                    i._helpMatrix.invert(), i._helpMatrix.transformPoint(0, 0, i._helpPoint), this._pivotX -= i._helpPoint.x, 
                    this._pivotY -= i._helpPoint.y, this._displayData.transform.toMatrix(i._helpMatrix), 
                    i._helpMatrix.invert(), i._helpMatrix.transformPoint(0, 0, i._helpPoint), this._pivotX += i._helpPoint.x, 
                    this._pivotY += i._helpPoint.y), t.DragonBones.yDown || (this._pivotY = (this._textureData.rotated ? this._textureData.region.width : this._textureData.region.height) * l - this._pivotY);
                } else this._pivotX = 0, this._pivotY = 0;
                null !== n ? this.origin = n.transform : null !== this._displayData ? this.origin = this._displayData.transform : this.origin = null, 
                s !== a ? (null === this._deformVertices && (this._deformVertices = t.BaseObject.borrowObject(t.DeformVertices)), 
                this._deformVertices.init(s, this._armature)) : null !== this._deformVertices && this._textureData !== r && (this._deformVertices.verticesDirty = !0), 
                this._displayDirty = !0, this._transformDirty = !0;
            }
        }, i.prototype._updateDisplay = function() {
            var e = null !== this._display ? this._display : this._rawDisplay, a = this._childArmature;
            this._displayIndex >= 0 && this._displayIndex < this._displayList.length ? (this._display = this._displayList[this._displayIndex], 
            null !== this._display && this._display instanceof t.Armature ? (this._childArmature = this._display, 
            this._display = this._childArmature.display) : this._childArmature = null) : (this._display = null, 
            this._childArmature = null);
            var i = null !== this._display ? this._display : this._rawDisplay;
            if (i !== e && (this._onUpdateDisplay(), this._replaceDisplay(e), this._transformDirty = !0, 
            this._visibleDirty = !0, this._blendModeDirty = !0, this._colorDirty = !0), i !== this._rawDisplay && i !== this._meshDisplay || this._updateFrame(), 
            this._childArmature !== a && (null !== a && (a._parent = null, a.clock = null, a.inheritAnimation && a.animation.reset()), 
            null !== this._childArmature && (this._childArmature._parent = this, this._childArmature.clock = this._armature.clock, 
            this._childArmature.inheritAnimation))) {
                if (0 === this._childArmature.cacheFrameRate) {
                    var r = this._armature.cacheFrameRate;
                    0 !== r && (this._childArmature.cacheFrameRate = r);
                }
                var n = null;
                if (null !== this._displayData && 1 === this._displayData.type) n = this._displayData.actions; else if (this._displayIndex >= 0 && null !== this._rawDisplayDatas) {
                    var s = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null;
                    null === s && (s = this._getDefaultRawDisplayData(this._displayIndex)), null !== s && 1 === s.type && (n = s.actions);
                }
                if (null !== n && n.length > 0) for (var o = 0, l = n; o < l.length; o++) {
                    var h = l[o], u = t.BaseObject.borrowObject(t.EventObject);
                    t.EventObject.actionDataToInstance(h, u, this._armature), u.slot = this, this._armature._bufferAction(u, !1);
                } else this._childArmature.animation.play();
            }
        }, i.prototype._updateGlobalTransformMatrix = function(t) {
            var e = 0 === this._parent._boneData.type ? this._parent.globalTransformMatrix : this._parent._getGlobalTransformMatrix(this.global.x, this.global.y);
            this.globalTransformMatrix.copyFrom(this._localMatrix), this.globalTransformMatrix.concat(e), 
            t ? this.global.fromMatrix(this.globalTransformMatrix) : this._globalDirty = !0;
        }, i.prototype._setDisplayIndex = function(t, e) {
            if (void 0 === e && (e = !1), e) {
                if (this._animationDisplayIndex === t) return !1;
                this._animationDisplayIndex = t;
            }
            return this._displayIndex !== t && (this._displayIndex = t, this._displayDirty = !0, 
            this._updateDisplayData(), this._displayDirty);
        }, i.prototype._setZorder = function(t) {
            return this._zOrder, this._zOrder = t, this._zOrderDirty = !0, this._zOrderDirty;
        }, i.prototype._setColor = function(t) {
            return this._colorTransform.copyFrom(t), this._colorDirty = !0, this._colorDirty;
        }, i.prototype._setDisplayList = function(e) {
            if (null !== e && e.length > 0) {
                this._displayList.length !== e.length && (this._displayList.length = e.length);
                for (var a = 0, i = e.length; a < i; ++a) {
                    var r = e[a];
                    null !== r && r !== this._rawDisplay && r !== this._meshDisplay && !(r instanceof t.Armature) && this._displayList.indexOf(r) < 0 && this._initDisplay(r, !0), 
                    this._displayList[a] = r;
                }
            } else this._displayList.length > 0 && (this._displayList.length = 0);
            return this._displayIndex >= 0 && this._displayIndex < this._displayList.length ? this._displayDirty = this._display !== this._displayList[this._displayIndex] : this._displayDirty = null !== this._display, 
            this._updateDisplayData(), this._displayDirty;
        }, i.prototype.init = function(t, e, a, i) {
            if (null === this._slotData) {
                this._slotData = t, this._visibleDirty = !0, this._blendModeDirty = !0, this._colorDirty = !0, 
                this._blendMode = this._slotData.blendMode, this._zOrder = this._slotData.zOrder, 
                this._colorTransform.copyFrom(this._slotData.color), this._rawDisplay = a, this._meshDisplay = i, 
                this._armature = e;
                var r = this._armature.getBone(this._slotData.parent.name);
                null !== r && (this._parent = r), this._armature._addSlot(this), this._initDisplay(this._rawDisplay, !1), 
                this._rawDisplay !== this._meshDisplay && this._initDisplay(this._meshDisplay, !1), 
                this._onUpdateDisplay(), this._addDisplay();
            }
        }, i.prototype.update = function(t) {
            if (this._displayDirty && (this._displayDirty = !1, this._updateDisplay(), this._transformDirty && (null !== this.origin ? this.global.copyFrom(this.origin).add(this.offset).toMatrix(this._localMatrix) : this.global.copyFrom(this.offset).toMatrix(this._localMatrix))), 
            this._zOrderDirty && (this._zOrderDirty = !1, this._updateZOrder()), t >= 0 && null !== this._cachedFrameIndices) {
                var e = this._cachedFrameIndices[t];
                e >= 0 && this._cachedFrameIndex === e ? this._transformDirty = !1 : e >= 0 ? (this._transformDirty = !0, 
                this._cachedFrameIndex = e) : this._transformDirty || this._parent._childrenTransformDirty ? (this._transformDirty = !0, 
                this._cachedFrameIndex = -1) : this._cachedFrameIndex >= 0 ? (this._transformDirty = !1, 
                this._cachedFrameIndices[t] = this._cachedFrameIndex) : (this._transformDirty = !0, 
                this._cachedFrameIndex = -1);
            } else (this._transformDirty || this._parent._childrenTransformDirty) && (t = -1, 
            this._transformDirty = !0, this._cachedFrameIndex = -1);
            if (null !== this._display) {
                if (this._visibleDirty && (this._visibleDirty = !1, this._updateVisible()), this._blendModeDirty && (this._blendModeDirty = !1, 
                this._updateBlendMode()), this._colorDirty && (this._colorDirty = !1, this._updateColor()), 
                null !== this._deformVertices && null !== this._deformVertices.verticesData && this._display === this._meshDisplay) {
                    var a = null !== this._deformVertices.verticesData.weight, i = 0 !== this._parent._boneData.type;
                    if ((this._deformVertices.verticesDirty || a && this._deformVertices.isBonesUpdate() || i && this._parent._childrenTransformDirty) && (this._deformVertices.verticesDirty = !1, 
                    this._updateMesh()), a || i) return;
                }
                if (this._transformDirty) {
                    if (this._transformDirty = !1, this._cachedFrameIndex < 0) {
                        var r = t >= 0;
                        this._updateGlobalTransformMatrix(r), r && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
                    } else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
                    this._updateTransform();
                }
            }
        }, i.prototype.updateTransformAndMatrix = function() {
            this._transformDirty && (this._transformDirty = !1, this._updateGlobalTransformMatrix(!1));
        }, i.prototype.replaceDisplayData = function(t, e) {
            if (void 0 === e && (e = -1), e < 0 && (e = this._displayIndex < 0 ? 0 : this._displayIndex), 
            this._displayDatas.length <= e) {
                this._displayDatas.length = e + 1;
                for (var a = 0, i = this._displayDatas.length; a < i; ++a) this._displayDatas[a] || (this._displayDatas[a] = null);
            }
            this._displayDatas[e] = t;
        }, i.prototype.containsPoint = function(t, e) {
            return null !== this._boundingBoxData && (this.updateTransformAndMatrix(), i._helpMatrix.copyFrom(this.globalTransformMatrix), 
            i._helpMatrix.invert(), i._helpMatrix.transformPoint(t, e, i._helpPoint), this._boundingBoxData.containsPoint(i._helpPoint.x, i._helpPoint.y));
        }, i.prototype.intersectsSegment = function(t, e, a, r, n, s, o) {
            if (void 0 === n && (n = null), void 0 === s && (s = null), void 0 === o && (o = null), 
            null === this._boundingBoxData) return 0;
            this.updateTransformAndMatrix(), i._helpMatrix.copyFrom(this.globalTransformMatrix), 
            i._helpMatrix.invert(), i._helpMatrix.transformPoint(t, e, i._helpPoint), t = i._helpPoint.x, 
            e = i._helpPoint.y, i._helpMatrix.transformPoint(a, r, i._helpPoint), a = i._helpPoint.x, 
            r = i._helpPoint.y;
            var l = this._boundingBoxData.intersectsSegment(t, e, a, r, n, s, o);
            return l > 0 && (1 === l || 2 === l ? null !== n ? (this.globalTransformMatrix.transformPoint(n.x, n.y, n), 
            null !== s && (s.x = n.x, s.y = n.y)) : null !== s && this.globalTransformMatrix.transformPoint(s.x, s.y, s) : (null !== n && this.globalTransformMatrix.transformPoint(n.x, n.y, n), 
            null !== s && this.globalTransformMatrix.transformPoint(s.x, s.y, s)), null !== o && (this.globalTransformMatrix.transformPoint(Math.cos(o.x), Math.sin(o.x), i._helpPoint, !0), 
            o.x = Math.atan2(i._helpPoint.y, i._helpPoint.x), this.globalTransformMatrix.transformPoint(Math.cos(o.y), Math.sin(o.y), i._helpPoint, !0), 
            o.y = Math.atan2(i._helpPoint.y, i._helpPoint.x))), l;
        }, i.prototype.invalidUpdate = function() {
            this._displayDirty = !0, this._transformDirty = !0;
        }, Object.defineProperty(i.prototype, "visible", {
            get: function() {
                return this._visible;
            },
            set: function(t) {
                this._visible !== t && (this._visible = t, this._updateVisible());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "displayIndex", {
            get: function() {
                return this._displayIndex;
            },
            set: function(t) {
                this._setDisplayIndex(t) && this.update(-1);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "name", {
            get: function() {
                return this._slotData.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "displayList", {
            get: function() {
                return this._displayList.concat();
            },
            set: function(e) {
                var a = this._displayList.concat(), i = new Array();
                this._setDisplayList(e) && this.update(-1);
                for (var r = 0, n = a; r < n.length; r++) null !== (l = n[r]) && l !== this._rawDisplay && l !== this._meshDisplay && this._displayList.indexOf(l) < 0 && i.indexOf(l) < 0 && i.push(l);
                for (var s = 0, o = i; s < o.length; s++) {
                    var l = o[s];
                    l instanceof t.Armature || this._disposeDisplay(l, !0);
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "slotData", {
            get: function() {
                return this._slotData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "rawDisplayDatas", {
            get: function() {
                return this._rawDisplayDatas;
            },
            set: function(t) {
                if (this._rawDisplayDatas !== t) if (this._displayDirty = !0, this._rawDisplayDatas = t, 
                null !== this._rawDisplayDatas) {
                    this._displayDatas.length = this._rawDisplayDatas.length;
                    for (var e = 0, a = this._displayDatas.length; e < a; ++e) {
                        var i = this._rawDisplayDatas[e];
                        null === i && (i = this._getDefaultRawDisplayData(e)), this._displayDatas[e] = i;
                    }
                } else this._displayDatas.length = 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "displayData", {
            get: function() {
                return this._displayData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "boundingBoxData", {
            get: function() {
                return this._boundingBoxData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "rawDisplay", {
            get: function() {
                return this._rawDisplay;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "meshDisplay", {
            get: function() {
                return this._meshDisplay;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "display", {
            get: function() {
                return this._display;
            },
            set: function(t) {
                if (this._display !== t) {
                    var e = this._displayList.length;
                    if (this._displayIndex < 0 && 0 === e && (this._displayIndex = 0), !(this._displayIndex < 0)) {
                        var a = this.displayList;
                        e <= this._displayIndex && (a.length = this._displayIndex + 1), a[this._displayIndex] = t, 
                        this.displayList = a;
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "childArmature", {
            get: function() {
                return this._childArmature;
            },
            set: function(t) {
                this._childArmature !== t && (this.display = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "parent", {
            get: function() {
                return this._parent;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.getDisplay = function() {
            return this._display;
        }, i.prototype.setDisplay = function(t) {
            this.display = t;
        }, i;
    }(t.TransformObject);
    t.Slot = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.prototype._onClear = function() {
            this._armature = null, this._target = null, this._root = null, this._bone = null;
        }, Object.defineProperty(i.prototype, "name", {
            get: function() {
                return this._constraintData.name;
            },
            enumerable: !0,
            configurable: !0
        }), i._helpMatrix = new t.Matrix(), i._helpTransform = new t.Transform(), i._helpPoint = new t.Point(), 
        i;
    }(t.BaseObject);
    t.Constraint = e;
    var i = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.IKConstraint]";
        }, i.prototype._onClear = function() {
            e.prototype._onClear.call(this), this._scaleEnabled = !1, this._bendPositive = !1, 
            this._weight = 1, this._constraintData = null;
        }, i.prototype._computeA = function() {
            var e = this._target.global, a = this._root.global, i = this._root.globalTransformMatrix, r = Math.atan2(e.y - a.y, e.x - a.x);
            a.scaleX < 0 && (r += Math.PI), a.rotation += t.Transform.normalizeRadian(r - a.rotation) * this._weight, 
            a.toMatrix(i);
        }, i.prototype._computeB = function() {
            var e = this._bone._boneData.length, a = this._root, i = this._target.global, r = a.global, n = this._bone.global, s = this._bone.globalTransformMatrix, o = s.a * e, l = s.b * e, h = o * o + l * l, u = Math.sqrt(h), _ = n.x - r.x, f = n.y - r.y, c = _ * _ + f * f, p = Math.sqrt(c), m = n.rotation, d = r.rotation, y = Math.atan2(f, _), g = (_ = i.x - r.x) * _ + (f = i.y - r.y) * f, v = Math.sqrt(g), b = 0;
            if (u + p <= v || v + u <= p || v + p <= u) b = Math.atan2(i.y - r.y, i.x - r.x), 
            u + p <= v || p < u && (b += Math.PI); else {
                var D = (c - h + g) / (2 * g), T = Math.sqrt(c - D * D * g) / v, A = r.x + _ * D, P = r.y + f * D, O = -f * T, S = _ * T, x = !1, E = a.parent;
                if (null !== E) {
                    var M = E.globalTransformMatrix;
                    x = M.a * M.d - M.b * M.c < 0;
                }
                x !== this._bendPositive ? (n.x = A - O, n.y = P - S) : (n.x = A + O, n.y = P + S), 
                b = Math.atan2(n.y - r.y, n.x - r.x);
            }
            var C = t.Transform.normalizeRadian(b - y);
            r.rotation = d + C * this._weight, r.toMatrix(a.globalTransformMatrix);
            var w = y + C * this._weight;
            n.x = r.x + Math.cos(w) * p, n.y = r.y + Math.sin(w) * p;
            var I = Math.atan2(i.y - n.y, i.x - n.x);
            n.scaleX < 0 && (I += Math.PI), n.rotation = r.rotation + m - d + t.Transform.normalizeRadian(I - C - m) * this._weight, 
            n.toMatrix(s);
        }, i.prototype.init = function(t, e) {
            if (null === this._constraintData) {
                this._constraintData = t, this._armature = e, this._target = this._armature.getBone(this._constraintData.target.name), 
                this._root = this._armature.getBone(this._constraintData.root.name), this._bone = null !== this._constraintData.bone ? this._armature.getBone(this._constraintData.bone.name) : null;
                var a = this._constraintData;
                this._scaleEnabled = a.scaleEnabled, this._bendPositive = a.bendPositive, this._weight = a.weight, 
                this._root._hasConstraint = !0;
            }
        }, i.prototype.update = function() {
            this._root.updateByConstraint(), null !== this._bone ? (this._bone.updateByConstraint(), 
            this._computeB()) : this._computeA();
        }, i.prototype.invalidUpdate = function() {
            this._root.invalidUpdate(), null !== this._bone && this._bone.invalidUpdate();
        }, i;
    }(e);
    t.IKConstraint = i;
    var r = function(e) {
        function i() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t._bones = [], t._spaces = [], t._positions = [], t._curves = [], t._boneLengths = [], 
            t._pathGlobalVertices = [], t._segments = [ 10 ], t;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.PathConstraint]";
        }, i.prototype._onClear = function() {
            e.prototype._onClear.call(this), this.dirty = !1, this.pathOffset = 0, this.position = 0, 
            this.spacing = 0, this.rotateOffset = 0, this.rotateMix = 1, this.translateMix = 1, 
            this._pathSlot = null, this._bones.length = 0, this._spaces.length = 0, this._positions.length = 0, 
            this._curves.length = 0, this._boneLengths.length = 0, this._pathGlobalVertices.length = 0;
        }, i.prototype._updatePathVertices = function(t) {
            var e = this._armature, a = e.armatureData.parent, i = e.armatureData.scale, r = a.intArray, n = a.floatArray, s = t.offset, o = r[s + 0], l = r[s + 2];
            this._pathGlobalVertices.length = 2 * o;
            var h = t.weight;
            if (null !== h) for (var u = this._pathSlot._deformVertices.bones, _ = h.bones.length, f = h.offset, c = r[f + 1], p = f + 2 + _, m = 0, d = 0; m < o; m++) {
                for (var y = 0, g = 0, v = 0, b = r[p++]; v < b; v++) {
                    var D = u[r[p++]];
                    if (null !== D) {
                        D.updateByConstraint();
                        var T = D.globalTransformMatrix, A = n[c++], P = n[c++] * i, O = n[c++] * i;
                        y += (T.a * P + T.c * O + T.tx) * A, g += (T.b * P + T.d * O + T.ty) * A;
                    }
                }
                this._pathGlobalVertices[d++] = y, this._pathGlobalVertices[d++] = g;
            } else {
                var S = this._pathSlot.parent;
                S.updateByConstraint();
                for (var T = S.globalTransformMatrix, m = 0, x = l; m < o; m += 2) {
                    var P = n[x++] * i, O = n[x++] * i, E = T.a * P + T.c * O + T.tx, M = T.b * P + T.d * O + T.ty;
                    this._pathGlobalVertices[m] = E, this._pathGlobalVertices[m + 1] = M;
                }
            }
        }, i.prototype._computeVertices = function(t, e, a, i) {
            for (var r = a, n = t; r < e; r += 2) i[r] = this._pathGlobalVertices[n++], i[r + 1] = this._pathGlobalVertices[n++];
        }, i.prototype._computeBezierCurve = function(t, e, a, i, r) {
            var n = this._armature.armatureData.parent.intArray[t.vertices.offset + 0], s = this._positions, o = this._spaces, l = t.closed, h = Array(), u = 2 * n, _ = u / 6, f = -1, c = this.position;
            s.length = 3 * e + 2;
            var p = 0;
            if (t.constantSpeed) {
                l ? (u += 2, h.length = n, this._computeVertices(2, u - 4, 0, h), this._computeVertices(0, 2, u - 4, h), 
                h[u - 2] = h[0], h[u - 1] = h[1]) : (_--, u -= 4, h.length = u, this._computeVertices(2, u, 0, h));
                var m = new Array(_);
                p = 0;
                for (var d, y, g, v, b, D, T, A, P = h[0], O = h[1], S = 0, x = 0, E = 0, M = 0, C = 0, w = 0, I = 0, B = 2; I < _; I++, 
                B += 6) S = h[B], x = h[B + 1], E = h[B + 2], M = h[B + 3], b = 2 * (d = .1875 * (P - 2 * S + E)) + (g = .09375 * (3 * (S - E) - P + (C = h[B + 4]))), 
                D = 2 * (y = .1875 * (O - 2 * x + M)) + (v = .09375 * (3 * (x - M) - O + (w = h[B + 5]))), 
                T = .75 * (S - P) + d + .16666667 * g, A = .75 * (x - O) + y + .16666667 * v, p += Math.sqrt(T * T + A * A), 
                T += b, A += D, b += g, D += v, p += Math.sqrt(T * T + A * A), T += b, A += D, p += Math.sqrt(T * T + A * A), 
                T += b + g, A += D + v, p += Math.sqrt(T * T + A * A), m[I] = p, P = C, O = w;
                if (i && (c *= p), r) for (I = 0; I < e; I++) o[I] *= p;
                for (var F = this._segments, N = 0, I = 0, R = 0, j = 0, k = 0; I < e; I++, R += 3) {
                    var L = o[I], V = c += L;
                    if (l) (V %= p) < 0 && (V += p), j = 0; else {
                        if (V < 0) continue;
                        if (V > p) continue;
                    }
                    for (;;j++) {
                        var U = m[j];
                        if (!(V > U)) {
                            0 === j ? V /= U : V = (V - (H = m[j - 1])) / (U - H);
                            break;
                        }
                    }
                    if (j !== f) {
                        f = j;
                        var Y = 6 * j;
                        for (P = h[Y], O = h[Y + 1], S = h[Y + 2], x = h[Y + 3], E = h[Y + 4], M = h[Y + 5], 
                        b = 2 * (d = .03 * (P - 2 * S + E)) + (g = .006 * (3 * (S - E) - P + (C = h[Y + 6]))), 
                        D = 2 * (y = .03 * (O - 2 * x + M)) + (v = .006 * (3 * (x - M) - O + (w = h[Y + 7]))), 
                        T = .3 * (S - P) + d + .16666667 * g, A = .3 * (x - O) + y + .16666667 * v, N = Math.sqrt(T * T + A * A), 
                        F[0] = N, Y = 1; Y < 8; Y++) T += b, A += D, b += g, D += v, N += Math.sqrt(T * T + A * A), 
                        F[Y] = N;
                        T += b, A += D, N += Math.sqrt(T * T + A * A), F[8] = N, T += b + g, A += D + v, 
                        N += Math.sqrt(T * T + A * A), F[9] = N, k = 0;
                    }
                    for (V *= N; ;k++) {
                        var X = F[k];
                        if (!(V > X)) {
                            if (0 === k) V /= X; else {
                                var H = F[k - 1];
                                V = k + (V - H) / (X - H);
                            }
                            break;
                        }
                    }
                    this.addCurvePosition(.1 * V, P, O, S, x, E, M, C, w, s, R, a);
                }
            } else {
                var $ = t.curveLengths;
                if (_ -= l ? 1 : 2, p = $[_], i && (c *= p), r) for (I = 0; I < e; I++) o[I] *= p;
                h.length = 8;
                for (var I = 0, R = 0, j = 0; I < e; I++, R += 3) {
                    if (c += L = o[I], l) (c %= p) < 0 && (c += p), j = 0; else {
                        if (c < 0) continue;
                        if (c > p) continue;
                    }
                    for (var G = 0; ;j++) {
                        var W = $[j];
                        if (!(c > W)) {
                            if (0 === j) G = c / W; else {
                                var z = $[j - 1];
                                G = (c - z) / (W - z);
                            }
                            break;
                        }
                    }
                    j !== f && (f = j, l && j === _ ? (this._computeVertices(u - 4, 4, 0, h), this._computeVertices(0, 4, 4, h)) : this._computeVertices(6 * j + 2, 8, 0, h)), 
                    this.addCurvePosition(G, h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], s, R, a);
                }
            }
        }, i.prototype.addCurvePosition = function(t, e, a, i, r, n, s, o, l, h, u, _) {
            if (0 === t) return h[u] = e, h[u + 1] = a, void (h[u + 2] = 0);
            if (1 === t) return h[u] = o, h[u + 1] = l, void (h[u + 2] = 0);
            var f = 1 - t, c = f * f, p = t * t, m = c * f, d = c * t * 3, y = f * p * 3, g = t * p, v = m * e + d * i + y * n + g * o, b = m * a + d * r + y * s + g * l;
            h[u] = v, h[u + 1] = b, h[u + 2] = _ ? Math.atan2(b - (m * a + d * r + y * s), v - (m * e + d * i + y * n)) : 0;
        }, i.prototype.init = function(t, e) {
            this._constraintData = t, this._armature = e;
            var a = t;
            this.pathOffset = a.pathDisplayData.vertices.offset, this.position = a.position, 
            this.spacing = a.spacing, this.rotateOffset = a.rotateOffset, this.rotateMix = a.rotateMix, 
            this.translateMix = a.translateMix, this._root = this._armature.getBone(a.root.name), 
            this._target = this._armature.getBone(a.target.name), this._pathSlot = this._armature.getSlot(a.pathSlot.name);
            for (var i = 0, r = a.bones.length; i < r; i++) {
                var n = this._armature.getBone(a.bones[i].name);
                null !== n && this._bones.push(n);
            }
            2 === a.rotateMode && (this._boneLengths.length = this._bones.length), this._root._hasConstraint = !0;
        }, i.prototype.update = function() {
            var e = this._pathSlot;
            if (null !== e._deformVertices && null !== e._deformVertices.verticesData && e._deformVertices.verticesData.offset === this.pathOffset) {
                var a = this._constraintData, i = e._displayData, r = !1, n = e._deformVertices;
                if (this._root._childrenTransformDirty ? (this._updatePathVertices(i.vertices), 
                r = !0) : null !== n && (n.verticesDirty || n.isBonesUpdate()) && (this._updatePathVertices(i.vertices), 
                n.verticesDirty = !1, r = !0), r || this.dirty) {
                    var s = a.positionMode, o = a.spacingMode, l = a.rotateMode, h = this._bones, u = 0 === o, _ = 2 === l, f = 0 === l, c = h.length, p = f ? c : c + 1, m = this.spacing, d = this._spaces;
                    if (d.length = p, _ || u) {
                        d[0] = 0;
                        for (var y = 0, g = p - 1; y < g; y++) {
                            (w = h[y]).updateByConstraint();
                            var v = w._boneData.length, b = v * (I = w.globalTransformMatrix).a, D = v * I.b, T = Math.sqrt(b * b + D * D);
                            _ && (this._boneLengths[y] = T), d[y + 1] = (v + m) * T / v;
                        }
                    } else for (y = 0; y < p; y++) d[y] = m;
                    this._computeBezierCurve(i, p, f, 1 === s, 2 === o);
                    var A, P = this._positions, O = this.rotateOffset, S = P[0], x = P[1];
                    0 === O ? A = 1 === l : (A = !1, null !== (w = e.parent) && (O *= (I = w.globalTransformMatrix).a * I.d - I.b * I.c > 0 ? t.Transform.DEG_RAD : -t.Transform.DEG_RAD));
                    for (var E = this.rotateMix, M = this.translateMix, y = 0, C = 3; y < c; y++, C += 3) {
                        var w = h[y];
                        w.updateByConstraint();
                        var I = w.globalTransformMatrix;
                        I.tx += (S - I.tx) * M, I.ty += (x - I.ty) * M;
                        var B = (b = P[C]) - S, F = (D = P[C + 1]) - x;
                        if (_) {
                            var N = this._boneLengths[y], R = (Math.sqrt(B * B + F * F) / N - 1) * E + 1;
                            I.a *= R, I.b *= R;
                        }
                        if (S = b, x = D, E > 0) {
                            var j = I.a, k = I.b, L = I.c, V = I.d, U = void 0, Y = void 0, X = void 0;
                            if (U = f ? P[C - 1] : Math.atan2(F, B), U -= Math.atan2(k, j), A) {
                                Y = Math.cos(U), X = Math.sin(U);
                                var H = w._boneData.length;
                                S += (H * (Y * j - X * k) - B) * E, x += (H * (X * j + Y * k) - F) * E;
                            } else U += O;
                            U > t.Transform.PI ? U -= t.Transform.PI_D : U < -t.Transform.PI && (U += t.Transform.PI_D), 
                            U *= E, Y = Math.cos(U), X = Math.sin(U), I.a = Y * j - X * k, I.b = X * j + Y * k, 
                            I.c = Y * L - X * V, I.d = X * L + Y * V;
                        }
                        w.global.fromMatrix(I);
                    }
                    this.dirty = !1;
                }
            }
        }, i.prototype.invalidUpdate = function() {}, i;
    }(e);
    t.PathConstraint = r;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function t(t) {
            void 0 === t && (t = 0), this.time = 0, this.timeScale = 1, this._systemTime = 0, 
            this._animatebles = [], this._clock = null, this.time = t, this._systemTime = .001 * new Date().getTime();
        }
        return t.prototype.advanceTime = function(t) {
            t !== t && (t = 0);
            var e = .001 * Date.now();
            if (t < 0 && (t = e - this._systemTime), this._systemTime = e, 1 !== this.timeScale && (t *= this.timeScale), 
            0 !== t) {
                t < 0 ? this.time -= t : this.time += t;
                for (var a = 0, i = 0, r = this._animatebles.length; a < r; ++a) {
                    var n = this._animatebles[a];
                    null !== n ? (i > 0 && (this._animatebles[a - i] = n, this._animatebles[a] = null), 
                    n.advanceTime(t)) : i++;
                }
                if (i > 0) {
                    for (r = this._animatebles.length; a < r; ++a) {
                        var s = this._animatebles[a];
                        null !== s ? this._animatebles[a - i] = s : i++;
                    }
                    this._animatebles.length -= i;
                }
            }
        }, t.prototype.contains = function(t) {
            if (t === this) return !1;
            for (var e = t; e !== this && null !== e; ) e = e.clock;
            return e === this;
        }, t.prototype.add = function(t) {
            this._animatebles.indexOf(t) < 0 && (this._animatebles.push(t), t.clock = this);
        }, t.prototype.remove = function(t) {
            var e = this._animatebles.indexOf(t);
            e >= 0 && (this._animatebles[e] = null, t.clock = null);
        }, t.prototype.clear = function() {
            for (var t = 0, e = this._animatebles; t < e.length; t++) {
                var a = e[t];
                null !== a && (a.clock = null);
            }
        }, Object.defineProperty(t.prototype, "clock", {
            get: function() {
                return this._clock;
            },
            set: function(t) {
                this._clock !== t && (null !== this._clock && this._clock.remove(this), this._clock = t, 
                null !== this._clock && this._clock.add(this));
            },
            enumerable: !0,
            configurable: !0
        }), t.clock = new t(), t;
    }();
    t.WorldClock = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t._animationNames = [], t._animationStates = [], t._animations = {}, t._animationConfig = null, 
            t;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.Animation]";
        }, i.prototype._onClear = function() {
            for (var t = 0, e = this._animationStates; t < e.length; t++) e[t].returnToPool();
            for (var a in this._animations) delete this._animations[a];
            null !== this._animationConfig && this._animationConfig.returnToPool(), this.timeScale = 1, 
            this._lockUpdate = !1, this._animationDirty = !1, this._inheritTimeScale = 1, this._animationNames.length = 0, 
            this._animationStates.length = 0, this._armature = null, this._animationConfig = null, 
            this._lastAnimationState = null;
        }, i.prototype._fadeOut = function(t) {
            switch (t.fadeOutMode) {
              case 1:
                for (var e = 0, a = this._animationStates; e < a.length; e++) null === (h = a[e])._parent && h.layer === t.layer && h.fadeOut(t.fadeOutTime, t.pauseFadeOut);
                break;

              case 2:
                for (var i = 0, r = this._animationStates; i < r.length; i++) null === (h = r[i])._parent && h.group === t.group && h.fadeOut(t.fadeOutTime, t.pauseFadeOut);
                break;

              case 3:
                for (var n = 0, s = this._animationStates; n < s.length; n++) null === (h = s[n])._parent && h.layer === t.layer && h.group === t.group && h.fadeOut(t.fadeOutTime, t.pauseFadeOut);
                break;

              case 4:
                for (var o = 0, l = this._animationStates; o < l.length; o++) {
                    var h = l[o];
                    null === h._parent && h.fadeOut(t.fadeOutTime, t.pauseFadeOut);
                }
            }
        }, i.prototype.init = function(e) {
            null === this._armature && (this._armature = e, this._animationConfig = t.BaseObject.borrowObject(t.AnimationConfig));
        }, i.prototype.advanceTime = function(t) {
            t < 0 && (t = -t), this._armature.inheritAnimation && null !== this._armature._parent ? this._inheritTimeScale = this._armature._parent._armature.animation._inheritTimeScale * this.timeScale : this._inheritTimeScale = this.timeScale, 
            1 !== this._inheritTimeScale && (t *= this._inheritTimeScale);
            var e = this._animationStates.length;
            if (1 === e) if ((p = this._animationStates[0])._fadeState > 0 && p._subFadeState > 0) this._armature._dragonBones.bufferObject(p), 
            this._animationStates.length = 0, this._lastAnimationState = null; else {
                var a = p._animationData, i = a.cacheFrameRate;
                if (this._animationDirty && i > 0) {
                    this._animationDirty = !1;
                    for (var r = 0, n = this._armature.getBones(); r < n.length; r++) {
                        var s = n[r];
                        s._cachedFrameIndices = a.getBoneCachedFrameIndices(s.name);
                    }
                    for (var o = 0, l = this._armature.getSlots(); o < l.length; o++) {
                        var h = l[o], u = h.rawDisplayDatas;
                        if (null !== u && u.length > 0) {
                            var _ = u[0];
                            if (null !== _ && _.parent === this._armature.armatureData.defaultSkin) {
                                h._cachedFrameIndices = a.getSlotCachedFrameIndices(h.name);
                                continue;
                            }
                        }
                        h._cachedFrameIndices = null;
                    }
                }
                p.advanceTime(t, i);
            } else if (e > 1) {
                for (var f = 0, c = 0; f < e; ++f) {
                    var p = this._animationStates[f];
                    p._fadeState > 0 && p._subFadeState > 0 ? (c++, this._armature._dragonBones.bufferObject(p), 
                    this._animationDirty = !0, this._lastAnimationState === p && (this._lastAnimationState = null)) : (c > 0 && (this._animationStates[f - c] = p), 
                    p.advanceTime(t, 0)), f === e - 1 && c > 0 && (this._animationStates.length -= c, 
                    null === this._lastAnimationState && this._animationStates.length > 0 && (this._lastAnimationState = this._animationStates[this._animationStates.length - 1]));
                }
                this._armature._cacheFrameIndex = -1;
            } else this._armature._cacheFrameIndex = -1;
        }, i.prototype.reset = function() {
            for (var t = 0, e = this._animationStates; t < e.length; t++) e[t].returnToPool();
            this._animationDirty = !1, this._animationConfig.clear(), this._animationStates.length = 0, 
            this._lastAnimationState = null;
        }, i.prototype.stop = function(t) {
            if (void 0 === t && (t = null), null !== t) null !== (i = this.getState(t)) && i.stop(); else for (var e = 0, a = this._animationStates; e < a.length; e++) {
                var i = a[e];
                i.stop();
            }
        }, i.prototype.playConfig = function(e) {
            var a = e.animation;
            if (!(a in this._animations)) return console.warn("Non-existent animation.\n", "DragonBones name: " + this._armature.armatureData.parent.name, "Armature name: " + this._armature.name, "Animation name: " + a), 
            null;
            var i = this._animations[a];
            if (5 === e.fadeOutMode) for (var r = 0, n = this._animationStates; r < n.length; r++) {
                var s = n[r];
                if (s._animationData === i) return s;
            }
            0 === this._animationStates.length ? e.fadeInTime = 0 : e.fadeInTime < 0 && (e.fadeInTime = i.fadeInTime), 
            e.fadeOutTime < 0 && (e.fadeOutTime = e.fadeInTime), e.timeScale <= -100 && (e.timeScale = 1 / i.scale), 
            i.frameCount > 1 ? (e.position < 0 ? (e.position %= i.duration, e.position = i.duration - e.position) : e.position === i.duration ? e.position -= 1e-6 : e.position > i.duration && (e.position %= i.duration), 
            e.duration > 0 && e.position + e.duration > i.duration && (e.duration = i.duration - e.position), 
            e.playTimes < 0 && (e.playTimes = i.playTimes)) : (e.playTimes = 1, e.position = 0, 
            e.duration > 0 && (e.duration = 0)), 0 === e.duration && (e.duration = -1), this._fadeOut(e);
            var o = t.BaseObject.borrowObject(t.AnimationState);
            if (o.init(this._armature, i, e), this._animationDirty = !0, this._armature._cacheFrameIndex = -1, 
            this._animationStates.length > 0) {
                for (var l = !1, h = 0, u = this._animationStates.length; h < u; ++h) {
                    if (o.layer > this._animationStates[h].layer) {
                        l = !0, this._animationStates.splice(h, 0, o);
                        break;
                    }
                    if (h !== u - 1 && o.layer > this._animationStates[h + 1].layer) {
                        l = !0, this._animationStates.splice(h + 1, 0, o);
                        break;
                    }
                }
                l || this._animationStates.push(o);
            } else this._animationStates.push(o);
            for (var _ = 0, f = this._armature.getSlots(); _ < f.length; _++) {
                var c = f[_].childArmature;
                null !== c && c.inheritAnimation && c.animation.hasAnimation(a) && null === c.animation.getState(a) && c.animation.fadeIn(a);
            }
            var p = !1;
            for (var m in i.animationTimelines) {
                this._lockUpdate || (p = !0, this._lockUpdate = !0);
                var d = this.fadeIn(m, e.fadeInTime, 1, o.layer, null, 0);
                null !== d && (d.resetToPose = !1, d._parent = o, d.stop());
            }
            return p && (this._lockUpdate = !1), this._lockUpdate || (e.fadeInTime <= 0 && this._armature.advanceTime(0), 
            this._lastAnimationState = o), o;
        }, i.prototype.play = function(t, e) {
            if (void 0 === t && (t = null), void 0 === e && (e = -1), this._animationConfig.clear(), 
            this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = e, this._animationConfig.fadeInTime = 0, 
            this._animationConfig.animation = null !== t ? t : "", null !== t && t.length > 0) this.playConfig(this._animationConfig); else if (null === this._lastAnimationState) {
                var a = this._armature.armatureData.defaultAnimation;
                null !== a && (this._animationConfig.animation = a.name, this.playConfig(this._animationConfig));
            } else this._lastAnimationState.isPlaying || this._lastAnimationState.isCompleted ? (this._animationConfig.animation = this._lastAnimationState.name, 
            this.playConfig(this._animationConfig)) : this._lastAnimationState.play();
            return this._lastAnimationState;
        }, i.prototype.fadeIn = function(t, e, a, i, r, n) {
            return void 0 === e && (e = -1), void 0 === a && (a = -1), void 0 === i && (i = 0), 
            void 0 === r && (r = null), void 0 === n && (n = 3), this._animationConfig.clear(), 
            this._animationConfig.fadeOutMode = n, this._animationConfig.playTimes = a, this._animationConfig.layer = i, 
            this._animationConfig.fadeInTime = e, this._animationConfig.animation = t, this._animationConfig.group = null !== r ? r : "", 
            this.playConfig(this._animationConfig);
        }, i.prototype.gotoAndPlayByTime = function(t, e, a) {
            return void 0 === e && (e = 0), void 0 === a && (a = -1), this._animationConfig.clear(), 
            this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = a, this._animationConfig.position = e, 
            this._animationConfig.fadeInTime = 0, this._animationConfig.animation = t, this.playConfig(this._animationConfig);
        }, i.prototype.gotoAndPlayByFrame = function(t, e, a) {
            void 0 === e && (e = 0), void 0 === a && (a = -1), this._animationConfig.clear(), 
            this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = a, this._animationConfig.fadeInTime = 0, 
            this._animationConfig.animation = t;
            var i = t in this._animations ? this._animations[t] : null;
            return null !== i && (this._animationConfig.position = i.duration * e / i.frameCount), 
            this.playConfig(this._animationConfig);
        }, i.prototype.gotoAndPlayByProgress = function(t, e, a) {
            void 0 === e && (e = 0), void 0 === a && (a = -1), this._animationConfig.clear(), 
            this._animationConfig.resetToPose = !0, this._animationConfig.playTimes = a, this._animationConfig.fadeInTime = 0, 
            this._animationConfig.animation = t;
            var i = t in this._animations ? this._animations[t] : null;
            return null !== i && (this._animationConfig.position = i.duration * (e > 0 ? e : 0)), 
            this.playConfig(this._animationConfig);
        }, i.prototype.gotoAndStopByTime = function(t, e) {
            void 0 === e && (e = 0);
            var a = this.gotoAndPlayByTime(t, e, 1);
            return null !== a && a.stop(), a;
        }, i.prototype.gotoAndStopByFrame = function(t, e) {
            void 0 === e && (e = 0);
            var a = this.gotoAndPlayByFrame(t, e, 1);
            return null !== a && a.stop(), a;
        }, i.prototype.gotoAndStopByProgress = function(t, e) {
            void 0 === e && (e = 0);
            var a = this.gotoAndPlayByProgress(t, e, 1);
            return null !== a && a.stop(), a;
        }, i.prototype.getState = function(t) {
            for (var e = this._animationStates.length; e--; ) {
                var a = this._animationStates[e];
                if (a.name === t) return a;
            }
            return null;
        }, i.prototype.hasAnimation = function(t) {
            return t in this._animations;
        }, i.prototype.getStates = function() {
            return this._animationStates;
        }, Object.defineProperty(i.prototype, "isPlaying", {
            get: function() {
                for (var t = 0, e = this._animationStates; t < e.length; t++) if (e[t].isPlaying) return !0;
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "isCompleted", {
            get: function() {
                for (var t = 0, e = this._animationStates; t < e.length; t++) if (!e[t].isCompleted) return !1;
                return this._animationStates.length > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "lastAnimationName", {
            get: function() {
                return null !== this._lastAnimationState ? this._lastAnimationState.name : "";
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animationNames", {
            get: function() {
                return this._animationNames;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animations", {
            get: function() {
                return this._animations;
            },
            set: function(t) {
                if (this._animations !== t) {
                    this._animationNames.length = 0;
                    for (var e in this._animations) delete this._animations[e];
                    for (var e in t) this._animationNames.push(e), this._animations[e] = t[e];
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animationConfig", {
            get: function() {
                return this._animationConfig.clear(), this._animationConfig;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "lastAnimationState", {
            get: function() {
                return this._lastAnimationState;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.gotoAndPlay = function(t, e, a, i, r, n, s, o, l) {
            void 0 === e && (e = -1), void 0 === a && (a = -1), void 0 === i && (i = -1), void 0 === r && (r = 0), 
            void 0 === n && (n = null), void 0 === s && (s = 3), void 0 === o && (o = !0), void 0 === l && (l = !0), 
            console.warn("Deprecated."), this._animationConfig.clear(), this._animationConfig.resetToPose = !0, 
            this._animationConfig.fadeOutMode = s, this._animationConfig.playTimes = i, this._animationConfig.layer = r, 
            this._animationConfig.fadeInTime = e, this._animationConfig.animation = t, this._animationConfig.group = null !== n ? n : "";
            var h = this._animations[t];
            return h && a > 0 && (this._animationConfig.timeScale = h.duration / a), this.playConfig(this._animationConfig);
        }, i.prototype.gotoAndStop = function(t, e) {
            return void 0 === e && (e = 0), console.warn("Deprecated."), this.gotoAndStopByTime(t, e);
        }, Object.defineProperty(i.prototype, "animationList", {
            get: function() {
                return console.warn("Deprecated."), this._animationNames;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animationDataList", {
            get: function() {
                console.warn("Deprecated.");
                for (var t = [], e = 0, a = this._animationNames.length; e < a; ++e) t.push(this._animations[this._animationNames[e]]);
                return t;
            },
            enumerable: !0,
            configurable: !0
        }), i;
    }(t.BaseObject);
    t.Animation = e;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function n() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t._blendState = new r(), t._boneMask = [], t._boneTimelines = [], t._surfaceTimelines = [], 
            t._slotTimelines = [], t._constraintTimelines = [], t._animationTimelines = [], 
            t._poseTimelines = [], t._bonePoses = {}, t._actionTimeline = null, t._zOrderTimeline = null, 
            t._parent = null, t;
        }
        return a(n, e), n.toString = function() {
            return "[class dragonBones.AnimationState]";
        }, n.prototype._onClear = function() {
            for (var t = 0, e = this._boneTimelines; t < e.length; t++) (u = e[t]).returnToPool();
            for (var a = 0, i = this._surfaceTimelines; a < i.length; a++) (u = i[a]).returnToPool();
            for (var r = 0, n = this._slotTimelines; r < n.length; r++) (u = n[r]).returnToPool();
            for (var s = 0, o = this._constraintTimelines; s < o.length; s++) (u = o[s]).returnToPool();
            for (var l = 0, h = this._animationTimelines; l < h.length; l++) {
                var u = h[l];
                u.returnToPool();
            }
            for (var _ in this._bonePoses) this._bonePoses[_].returnToPool(), delete this._bonePoses[_];
            null !== this._actionTimeline && this._actionTimeline.returnToPool(), null !== this._zOrderTimeline && this._zOrderTimeline.returnToPool(), 
            this.actionEnabled = !1, this.additiveBlending = !1, this.displayControl = !1, this.resetToPose = !1, 
            this.playTimes = 1, this.layer = 0, this.timeScale = 1, this.weight = 1, this.autoFadeOutTime = 0, 
            this.fadeTotalTime = 0, this.name = "", this.group = "", this._timelineDirty = 2, 
            this._playheadState = 0, this._fadeState = -1, this._subFadeState = -1, this._position = 0, 
            this._duration = 0, this._fadeTime = 0, this._time = 0, this._fadeProgress = 0, 
            this._weightResult = 0, this._blendState.clear(), this._boneMask.length = 0, this._boneTimelines.length = 0, 
            this._surfaceTimelines.length = 0, this._slotTimelines.length = 0, this._constraintTimelines.length = 0, 
            this._animationTimelines.length = 0, this._poseTimelines.length = 0, this._animationData = null, 
            this._armature = null, this._actionTimeline = null, this._zOrderTimeline = null, 
            this._parent = null;
        }, n.prototype._updateTimelines = function() {
            for (var e = 0, a = this._armature._constraints; e < a.length; e++) {
                var i = a[e];
                if (null !== (h = this._animationData.getConstraintTimelines(i.name))) for (var r = 0, n = h; r < n.length; r++) switch ((f = n[r]).type) {
                  case 30:
                    (c = t.BaseObject.borrowObject(t.IKConstraintTimelineState)).constraint = i, c.init(this._armature, this, f), 
                    this._constraintTimelines.push(c);
                } else this.resetToPose && ((c = t.BaseObject.borrowObject(t.IKConstraintTimelineState)).constraint = i, 
                c.init(this._armature, this, null), this._constraintTimelines.push(c), this._poseTimelines.push(c));
            }
            for (var s = 0, o = this._armature.animation.getStates(); s < o.length; s++) {
                var l = o[s];
                if (l._parent === this) {
                    var h = this._animationData.getAnimationTimelines(l.name);
                    if (null !== h) for (var u = 0, _ = h; u < _.length; u++) {
                        var f = _[u];
                        switch (f.type) {
                          case 40:
                            var c = t.BaseObject.borrowObject(t.AnimationTimelineState);
                            c.animationState = l, c.init(this._armature, this, f), this._animationTimelines.push(c);
                        }
                    }
                }
            }
        }, n.prototype._updateBoneAndSlotTimelines = function() {
            for (var e = {}, a = 0, r = this._boneTimelines; a < r.length; a++) (l = (j = r[a]).bone.name) in e || (e[l] = []), 
            e[l].push(j);
            for (var n = 0, s = this._armature.getBones(); n < s.length; n++) {
                var o = s[n], l = o.name;
                if (this.containsBoneMask(l)) if (l in e) delete e[l]; else if (0 === o._boneData.type) {
                    var h = this._animationData.getBoneTimelines(l), u = l in this._bonePoses ? this._bonePoses[l] : this._bonePoses[l] = t.BaseObject.borrowObject(i);
                    if (null !== h) for (var _ = 0, f = h; _ < f.length; _++) switch ((C = f[_]).type) {
                      case 10:
                        (j = t.BaseObject.borrowObject(t.BoneAllTimelineState)).bone = o, j.bonePose = u, 
                        j.init(this._armature, this, C), this._boneTimelines.push(j);
                        break;

                      case 11:
                        (j = t.BaseObject.borrowObject(t.BoneTranslateTimelineState)).bone = o, j.bonePose = u, 
                        j.init(this._armature, this, C), this._boneTimelines.push(j);
                        break;

                      case 12:
                        (j = t.BaseObject.borrowObject(t.BoneRotateTimelineState)).bone = o, j.bonePose = u, 
                        j.init(this._armature, this, C), this._boneTimelines.push(j);
                        break;

                      case 13:
                        (j = t.BaseObject.borrowObject(t.BoneScaleTimelineState)).bone = o, j.bonePose = u, 
                        j.init(this._armature, this, C), this._boneTimelines.push(j);
                    } else this.resetToPose && ((j = t.BaseObject.borrowObject(t.BoneAllTimelineState)).bone = o, 
                    j.bonePose = u, j.init(this._armature, this, null), this._boneTimelines.push(j), 
                    this._poseTimelines.push(j));
                } else if (1 === o._boneData.type) if (null !== (h = this._animationData.getSurfaceTimelines(l))) for (var c = 0, p = h; c < p.length; c++) switch ((C = p[c]).type) {
                  case 50:
                    (j = t.BaseObject.borrowObject(t.SurfaceTimelineState)).surface = o, j.init(this._armature, this, C), 
                    this._surfaceTimelines.push(j);
                } else this.resetToPose && ((j = t.BaseObject.borrowObject(t.SurfaceTimelineState)).surface = o, 
                j.init(this._armature, this, null), this._surfaceTimelines.push(j), this._poseTimelines.push(j));
            }
            for (var m in e) for (var d = 0, y = e[m]; d < y.length; d++) {
                j = y[d];
                this._boneTimelines.splice(this._boneTimelines.indexOf(j), 1), j.returnToPool();
            }
            for (var g = {}, v = [], b = 0, D = this._slotTimelines; b < D.length; b++) (l = (j = D[b]).slot.name) in g || (g[l] = []), 
            g[l].push(j);
            for (var T = 0, A = this._armature.getSlots(); T < A.length; T++) {
                var P = A[T], O = P.parent.name;
                if (this.containsBoneMask(O)) {
                    var l = P.name, h = this._animationData.getSlotTimelines(l);
                    if (l in g) delete g[l]; else {
                        var S = !1, x = !1;
                        if (v.length = 0, null !== h) for (var E = 0, M = h; E < M.length; E++) {
                            var C = M[E];
                            switch (C.type) {
                              case 20:
                                (j = t.BaseObject.borrowObject(t.SlotDislayTimelineState)).slot = P, j.init(this._armature, this, C), 
                                this._slotTimelines.push(j), S = !0;
                                break;

                              case 21:
                                (j = t.BaseObject.borrowObject(t.SlotColorTimelineState)).slot = P, j.init(this._armature, this, C), 
                                this._slotTimelines.push(j), x = !0;
                                break;

                              case 22:
                                (j = t.BaseObject.borrowObject(t.DeformTimelineState)).slot = P, j.init(this._armature, this, C), 
                                this._slotTimelines.push(j), v.push(j.vertexOffset);
                            }
                        }
                        if (this.resetToPose && (S || ((j = t.BaseObject.borrowObject(t.SlotDislayTimelineState)).slot = P, 
                        j.init(this._armature, this, null), this._slotTimelines.push(j), this._poseTimelines.push(j)), 
                        x || ((j = t.BaseObject.borrowObject(t.SlotColorTimelineState)).slot = P, j.init(this._armature, this, null), 
                        this._slotTimelines.push(j), this._poseTimelines.push(j)), null !== P.rawDisplayDatas)) for (var w = 0, I = P.rawDisplayDatas; w < I.length; w++) {
                            var B = I[w];
                            if (null !== B && 2 === B.type) {
                                var F = B.vertices.offset;
                                v.indexOf(F) < 0 && ((j = t.BaseObject.borrowObject(t.DeformTimelineState)).vertexOffset = F, 
                                j.slot = P, j.init(this._armature, this, null), this._slotTimelines.push(j), this._poseTimelines.push(j));
                            }
                        }
                    }
                }
            }
            for (var m in g) for (var N = 0, R = g[m]; N < R.length; N++) {
                var j = R[N];
                this._slotTimelines.splice(this._slotTimelines.indexOf(j), 1), j.returnToPool();
            }
        }, n.prototype._advanceFadeTime = function(e) {
            var a = this._fadeState > 0;
            if (this._subFadeState < 0) {
                this._subFadeState = 0;
                i = a ? t.EventObject.FADE_OUT : t.EventObject.FADE_IN;
                this._armature.eventDispatcher.hasDBEventListener(i) && ((r = t.BaseObject.borrowObject(t.EventObject)).type = i, 
                r.armature = this._armature, r.animationState = this, this._armature._dragonBones.bufferEvent(r));
            }
            if (e < 0 && (e = -e), this._fadeTime += e, this._fadeTime >= this.fadeTotalTime ? (this._subFadeState = 1, 
            this._fadeProgress = a ? 0 : 1) : this._fadeTime > 0 ? this._fadeProgress = a ? 1 - this._fadeTime / this.fadeTotalTime : this._fadeTime / this.fadeTotalTime : this._fadeProgress = a ? 1 : 0, 
            this._subFadeState > 0) {
                a || (this._playheadState |= 1, this._fadeState = 0);
                var i = a ? t.EventObject.FADE_OUT_COMPLETE : t.EventObject.FADE_IN_COMPLETE;
                if (this._armature.eventDispatcher.hasDBEventListener(i)) {
                    var r = t.BaseObject.borrowObject(t.EventObject);
                    r.type = i, r.armature = this._armature, r.animationState = this, this._armature._dragonBones.bufferEvent(r);
                }
            }
        }, n.prototype.init = function(e, a, i) {
            if (null === this._armature) {
                if (this._armature = e, this._animationData = a, this.resetToPose = i.resetToPose, 
                this.additiveBlending = i.additiveBlending, this.displayControl = i.displayControl, 
                this.actionEnabled = i.actionEnabled, this.layer = i.layer, this.playTimes = i.playTimes, 
                this.timeScale = i.timeScale, this.fadeTotalTime = i.fadeInTime, this.autoFadeOutTime = i.autoFadeOutTime, 
                this.weight = i.weight, this.name = i.name.length > 0 ? i.name : i.animation, this.group = i.group, 
                i.pauseFadeIn ? this._playheadState = 2 : this._playheadState = 3, i.duration < 0 ? (this._position = 0, 
                this._duration = this._animationData.duration, 0 !== i.position ? this.timeScale >= 0 ? this._time = i.position : this._time = i.position - this._duration : this._time = 0) : (this._position = i.position, 
                this._duration = i.duration, this._time = 0), this.timeScale < 0 && 0 === this._time && (this._time = -1e-6), 
                this.fadeTotalTime <= 0 && (this._fadeProgress = .999999), i.boneMask.length > 0) {
                    this._boneMask.length = i.boneMask.length;
                    for (var r = 0, n = this._boneMask.length; r < n; ++r) this._boneMask[r] = i.boneMask[r];
                }
                this._actionTimeline = t.BaseObject.borrowObject(t.ActionTimelineState), this._actionTimeline.init(this._armature, this, this._animationData.actionTimeline), 
                this._actionTimeline.currentTime = this._time, this._actionTimeline.currentTime < 0 && (this._actionTimeline.currentTime = this._duration - this._actionTimeline.currentTime), 
                null !== this._animationData.zOrderTimeline && (this._zOrderTimeline = t.BaseObject.borrowObject(t.ZOrderTimelineState), 
                this._zOrderTimeline.init(this._armature, this, this._animationData.zOrderTimeline));
            }
        }, n.prototype.advanceTime = function(e, a) {
            if (this._blendState.dirty = !1, 0 === this._fadeState && 0 === this._subFadeState || this._advanceFadeTime(e), 
            3 === this._playheadState && (1 !== this.timeScale && (e *= this.timeScale), this._time += e), 
            0 !== this._timelineDirty && (2 === this._timelineDirty && this._updateTimelines(), 
            this._timelineDirty = 0, this._updateBoneAndSlotTimelines()), 0 !== this.weight) {
                var i = 0 === this._fadeState && a > 0, r = !0, n = !0, s = this._time;
                if (this._weightResult = this.weight * this._fadeProgress, null !== this._parent && (this._weightResult *= this._parent._weightResult / this._parent._fadeProgress), 
                this._actionTimeline.playState <= 0 && this._actionTimeline.update(s), i) {
                    var o = 2 * a;
                    this._actionTimeline.currentTime = Math.floor(this._actionTimeline.currentTime * o) / o;
                }
                if (null !== this._zOrderTimeline && this._zOrderTimeline.playState <= 0 && this._zOrderTimeline.update(s), 
                i) {
                    var l = Math.floor(this._actionTimeline.currentTime * a);
                    this._armature._cacheFrameIndex === l ? (r = !1, n = !1) : (this._armature._cacheFrameIndex = l, 
                    this._animationData.cachedFrames[l] ? n = !1 : this._animationData.cachedFrames[l] = !0);
                }
                if (r) {
                    if (n) for (var h = 0, u = this._boneTimelines.length; h < u; ++h) (m = this._boneTimelines[h]).playState <= 0 && m.update(s), 
                    h !== u - 1 && m.bone === this._boneTimelines[h + 1].bone || 0 !== (f = m.bone._blendState.update(this._weightResult, this.layer)) && m.blend(f);
                    for (var h = 0, u = this._surfaceTimelines.length; h < u; ++h) {
                        f = (m = this._surfaceTimelines[h]).surface._blendState.update(this._weightResult, this.layer);
                        m.playState <= 0 && m.update(s), 0 !== f && m.blend(f);
                    }
                    if (this.displayControl) for (var h = 0, u = this._slotTimelines.length; h < u; ++h) {
                        var _ = (m = this._slotTimelines[h]).slot.displayController;
                        null !== _ && _ !== this.name && _ !== this.group || m.playState <= 0 && m.update(s);
                    }
                    for (var h = 0, u = this._constraintTimelines.length; h < u; ++h) (m = this._constraintTimelines[h]).playState <= 0 && m.update(s);
                    for (var h = 0, u = this._animationTimelines.length; h < u; ++h) {
                        var f = (m = this._animationTimelines[h]).animationState._blendState.update(this._weightResult, this.layer);
                        m.playState <= 0 && m.update(s), 0 !== f && m.blend(f);
                    }
                }
                if (0 === this._fadeState) {
                    if (this._subFadeState > 0 && (this._subFadeState = 0, this._poseTimelines.length > 0)) {
                        for (var c = 0, p = this._poseTimelines; c < p.length; c++) {
                            var m = p[c];
                            m instanceof t.BoneTimelineState ? this._boneTimelines.splice(this._boneTimelines.indexOf(m), 1) : m instanceof t.SurfaceTimelineState ? this._surfaceTimelines.splice(this._surfaceTimelines.indexOf(m), 1) : m instanceof t.SlotTimelineState ? this._slotTimelines.splice(this._slotTimelines.indexOf(m), 1) : m instanceof t.ConstraintTimelineState && this._constraintTimelines.splice(this._constraintTimelines.indexOf(m), 1), 
                            m.returnToPool();
                        }
                        this._poseTimelines.length = 0;
                    }
                    this._actionTimeline.playState > 0 && this.autoFadeOutTime >= 0 && this.fadeOut(this.autoFadeOutTime);
                }
            }
        }, n.prototype.play = function() {
            this._playheadState = 3;
        }, n.prototype.stop = function() {
            this._playheadState &= 1;
        }, n.prototype.fadeOut = function(t, e) {
            if (void 0 === e && (e = !0), t < 0 && (t = 0), e && (this._playheadState &= 2), 
            this._fadeState > 0) {
                if (t > this.fadeTotalTime - this._fadeTime) return;
            } else {
                this._fadeState = 1, this._subFadeState = -1, (t <= 0 || this._fadeProgress <= 0) && (this._fadeProgress = 1e-6);
                for (var a = 0, i = this._boneTimelines; a < i.length; a++) (f = i[a]).fadeOut();
                for (var r = 0, n = this._surfaceTimelines; r < n.length; r++) (f = n[r]).fadeOut();
                for (var s = 0, o = this._slotTimelines; s < o.length; s++) (f = o[s]).fadeOut();
                for (var l = 0, h = this._constraintTimelines; l < h.length; l++) (f = h[l]).fadeOut();
                for (var u = 0, _ = this._animationTimelines; u < _.length; u++) {
                    var f = _[u];
                    f.animationState.fadeOut(t, e), f.fadeOut();
                }
            }
            this.displayControl = !1, this.fadeTotalTime = this._fadeProgress > 1e-6 ? t / this._fadeProgress : 0, 
            this._fadeTime = this.fadeTotalTime * (1 - this._fadeProgress);
        }, n.prototype.containsBoneMask = function(t) {
            return 0 === this._boneMask.length || this._boneMask.indexOf(t) >= 0;
        }, n.prototype.addBoneMask = function(t, e) {
            void 0 === e && (e = !0);
            var a = this._armature.getBone(t);
            if (null !== a) {
                if (this._boneMask.indexOf(t) < 0 && this._boneMask.push(t), e) for (var i = 0, r = this._armature.getBones(); i < r.length; i++) {
                    var n = r[i];
                    this._boneMask.indexOf(n.name) < 0 && a.contains(n) && this._boneMask.push(n.name);
                }
                this._timelineDirty = 1;
            }
        }, n.prototype.removeBoneMask = function(t, e) {
            void 0 === e && (e = !0);
            var a = this._boneMask.indexOf(t);
            if (a >= 0 && this._boneMask.splice(a, 1), e) {
                var i = this._armature.getBone(t);
                if (null !== i) {
                    var r = this._armature.getBones();
                    if (this._boneMask.length > 0) for (var n = 0, s = r; n < s.length; n++) {
                        var o = s[n], l = this._boneMask.indexOf(o.name);
                        l >= 0 && i.contains(o) && this._boneMask.splice(l, 1);
                    } else for (var h = 0, u = r; h < u.length; h++) (o = u[h]) !== i && (i.contains(o) || this._boneMask.push(o.name));
                }
            }
            this._timelineDirty = 1;
        }, n.prototype.removeAllBoneMask = function() {
            this._boneMask.length = 0, this._timelineDirty = 1;
        }, Object.defineProperty(n.prototype, "isFadeIn", {
            get: function() {
                return this._fadeState < 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "isFadeOut", {
            get: function() {
                return this._fadeState > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "isFadeComplete", {
            get: function() {
                return 0 === this._fadeState;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "isPlaying", {
            get: function() {
                return 0 != (2 & this._playheadState) && this._actionTimeline.playState <= 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "isCompleted", {
            get: function() {
                return this._actionTimeline.playState > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "currentPlayTimes", {
            get: function() {
                return this._actionTimeline.currentPlayTimes;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "totalTime", {
            get: function() {
                return this._duration;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "currentTime", {
            get: function() {
                return this._actionTimeline.currentTime;
            },
            set: function(t) {
                var e = this._actionTimeline.currentPlayTimes - (this._actionTimeline.playState > 0 ? 1 : 0);
                if ((t < 0 || this._duration < t) && (t = t % this._duration + e * this._duration) < 0 && (t += this._duration), 
                this.playTimes > 0 && e === this.playTimes - 1 && t === this._duration && (t = this._duration - 1e-6), 
                this._time !== t) {
                    this._time = t, this._actionTimeline.setCurrentTime(this._time), null !== this._zOrderTimeline && (this._zOrderTimeline.playState = -1);
                    for (var a = 0, i = this._boneTimelines; a < i.length; a++) (s = i[a]).playState = -1;
                    for (var r = 0, n = this._slotTimelines; r < n.length; r++) {
                        var s = n[r];
                        s.playState = -1;
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "animationData", {
            get: function() {
                return this._animationData;
            },
            enumerable: !0,
            configurable: !0
        }), n;
    }(t.BaseObject);
    t.AnimationState = e;
    var i = function(e) {
        function i() {
            var a = null !== e && e.apply(this, arguments) || this;
            return a.current = new t.Transform(), a.delta = new t.Transform(), a.result = new t.Transform(), 
            a;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.BonePose]";
        }, i.prototype._onClear = function() {
            this.current.identity(), this.delta.identity(), this.result.identity();
        }, i;
    }(t.BaseObject);
    t.BonePose = i;
    var r = function() {
        function t() {}
        return t.prototype.update = function(t, e) {
            if (this.dirty) {
                if (!(this.leftWeight > 0)) return 0;
                if (this.layer !== e) {
                    if (this.layerWeight >= this.leftWeight) return this.leftWeight = 0, 0;
                    this.layer = e, this.leftWeight -= this.layerWeight, this.layerWeight = 0;
                }
                return t *= this.leftWeight, this.layerWeight += t, this.blendWeight = t, 2;
            }
            return this.dirty = !0, this.layer = e, this.layerWeight = t, this.leftWeight = 1, 
            this.blendWeight = t, 1;
        }, t.prototype.clear = function() {
            this.dirty = !1, this.layer = 0, this.leftWeight = 0, this.layerWeight = 0, this.blendWeight = 0;
        }, t;
    }();
    t.BlendState = r;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            this.playState = -1, this.currentPlayTimes = -1, this.currentTime = -1, this._tweenState = 0, 
            this._frameRate = 0, this._frameValueOffset = 0, this._frameCount = 0, this._frameOffset = 0, 
            this._frameIndex = -1, this._frameRateR = 0, this._position = 0, this._duration = 0, 
            this._timeScale = 1, this._timeOffset = 0, this._dragonBonesData = null, this._animationData = null, 
            this._timelineData = null, this._armature = null, this._animationState = null, this._actionTimeline = null, 
            this._frameArray = null, this._frameIntArray = null, this._frameFloatArray = null, 
            this._timelineArray = null, this._frameIndices = null;
        }, e.prototype._setCurrentTime = function(t) {
            var e = this.playState, a = this.currentPlayTimes, i = this.currentTime;
            if (null !== this._actionTimeline && this._frameCount <= 1) this.playState = this._actionTimeline.playState >= 0 ? 1 : -1, 
            this.currentPlayTimes = 1, this.currentTime = this._actionTimeline.currentTime; else if (null === this._actionTimeline || 1 !== this._timeScale || 0 !== this._timeOffset) {
                var r = this._animationState.playTimes, n = r * this._duration;
                t *= this._timeScale, 0 !== this._timeOffset && (t += this._timeOffset * this._animationData.duration), 
                r > 0 && (t >= n || t <= -n) ? (this.playState <= 0 && 3 === this._animationState._playheadState && (this.playState = 1), 
                this.currentPlayTimes = r, this.currentTime = t < 0 ? 0 : this._duration + 1e-6) : (0 !== this.playState && 3 === this._animationState._playheadState && (this.playState = 0), 
                t < 0 ? (t = -t, this.currentPlayTimes = Math.floor(t / this._duration), this.currentTime = this._duration - t % this._duration) : (this.currentPlayTimes = Math.floor(t / this._duration), 
                this.currentTime = t % this._duration)), this.currentTime += this._position;
            } else this.playState = this._actionTimeline.playState, this.currentPlayTimes = this._actionTimeline.currentPlayTimes, 
            this.currentTime = this._actionTimeline.currentTime;
            return (this.currentPlayTimes !== a || this.currentTime !== i) && ((e < 0 && this.playState !== e || this.playState <= 0 && this.currentPlayTimes !== a) && (this._frameIndex = -1), 
            !0);
        }, e.prototype.init = function(t, e, a) {
            this._armature = t, this._animationState = e, this._timelineData = a, this._actionTimeline = this._animationState._actionTimeline, 
            this === this._actionTimeline && (this._actionTimeline = null), this._animationData = this._animationState._animationData, 
            this._frameRate = this._animationData.parent.frameRate, this._frameRateR = 1 / this._frameRate, 
            this._position = this._animationState._position, this._duration = this._animationState._duration, 
            this._dragonBonesData = this._animationData.parent.parent, null !== this._timelineData && (this._frameIntArray = this._dragonBonesData.frameIntArray, 
            this._frameFloatArray = this._dragonBonesData.frameFloatArray, this._frameArray = this._dragonBonesData.frameArray, 
            this._timelineArray = this._dragonBonesData.timelineArray, this._frameIndices = this._dragonBonesData.frameIndices, 
            this._frameCount = this._timelineArray[this._timelineData.offset + 2], this._frameValueOffset = this._timelineArray[this._timelineData.offset + 4], 
            this._timeScale = 100 / this._timelineArray[this._timelineData.offset + 0], this._timeOffset = .01 * this._timelineArray[this._timelineData.offset + 1]);
        }, e.prototype.fadeOut = function() {}, e.prototype.update = function(t) {
            if (this._setCurrentTime(t)) {
                if (this._frameCount > 1) {
                    var e = Math.floor(this.currentTime * this._frameRate), a = this._frameIndices[this._timelineData.frameIndicesOffset + e];
                    this._frameIndex !== a && (this._frameIndex = a, this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex], 
                    this._onArriveAtFrame());
                } else this._frameIndex < 0 && (this._frameIndex = 0, null !== this._timelineData && (this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5]), 
                this._onArriveAtFrame());
                0 !== this._tweenState && this._onUpdateFrame();
            }
        }, e;
    }(t.BaseObject);
    t.TimelineState = e;
    var i = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e._getEasingValue = function(t, e, a) {
            var i = e;
            switch (t) {
              case 3:
                i = Math.pow(e, 2);
                break;

              case 4:
                i = 1 - Math.pow(1 - e, 2);
                break;

              case 5:
                i = .5 * (1 - Math.cos(e * Math.PI));
            }
            return (i - e) * a + e;
        }, e._getEasingCurveValue = function(t, e, a, i) {
            if (t <= 0) return 0;
            if (t >= 1) return 1;
            var r = a + 1, n = Math.floor(t * r), s = 0 === n ? 0 : e[i + n - 1];
            return 1e-4 * (s + ((n === r - 1 ? 1e4 : e[i + n]) - s) * (t * r - n));
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this._tweenType = 0, this._curveCount = 0, this._framePosition = 0, 
            this._frameDurationR = 0, this._tweenProgress = 0, this._tweenEasing = 0;
        }, e.prototype._onArriveAtFrame = function() {
            if (this._frameCount > 1 && (this._frameIndex !== this._frameCount - 1 || 0 === this._animationState.playTimes || this._animationState.currentPlayTimes < this._animationState.playTimes - 1)) if (this._tweenType = this._frameArray[this._frameOffset + 1], 
            this._tweenState = 0 === this._tweenType ? 1 : 2, 2 === this._tweenType ? this._curveCount = this._frameArray[this._frameOffset + 2] : 0 !== this._tweenType && 1 !== this._tweenType && (this._tweenEasing = .01 * this._frameArray[this._frameOffset + 2]), 
            this._framePosition = this._frameArray[this._frameOffset] * this._frameRateR, this._frameIndex === this._frameCount - 1) this._frameDurationR = 1 / (this._animationData.duration - this._framePosition); else {
                var t = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex + 1], e = this._frameArray[t] * this._frameRateR - this._framePosition;
                this._frameDurationR = e > 0 ? 1 / e : 0;
            } else this._tweenState = 1;
        }, e.prototype._onUpdateFrame = function() {
            2 === this._tweenState ? (this._tweenProgress = (this.currentTime - this._framePosition) * this._frameDurationR, 
            2 === this._tweenType ? this._tweenProgress = e._getEasingCurveValue(this._tweenProgress, this._frameArray, this._curveCount, this._frameOffset + 3) : 1 !== this._tweenType && (this._tweenProgress = e._getEasingValue(this._tweenType, this._tweenProgress, this._tweenEasing))) : this._tweenProgress = 0;
        }, e;
    }(e);
    t.TweenTimelineState = i;
    var r = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.bone = null, this.bonePose = null;
        }, e.prototype.blend = function(t) {
            var e = this.bone._blendState.blendWeight, a = this.bone.animationPose, i = this.bonePose.result;
            2 === t ? (a.x += i.x * e, a.y += i.y * e, a.rotation += i.rotation * e, a.skew += i.skew * e, 
            a.scaleX += (i.scaleX - 1) * e, a.scaleY += (i.scaleY - 1) * e) : 1 !== e ? (a.x = i.x * e, 
            a.y = i.y * e, a.rotation = i.rotation * e, a.skew = i.skew * e, a.scaleX = (i.scaleX - 1) * e + 1, 
            a.scaleY = (i.scaleY - 1) * e + 1) : (a.x = i.x, a.y = i.y, a.rotation = i.rotation, 
            a.skew = i.skew, a.scaleX = i.scaleX, a.scaleY = i.scaleY), 0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.bone._transformDirty = !0);
        }, e;
    }(i);
    t.BoneTimelineState = r;
    var n = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.slot = null;
        }, e;
    }(i);
    t.SlotTimelineState = n;
    var s = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.constraint = null;
        }, e;
    }(i);
    t.ConstraintTimelineState = s;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.ActionTimelineState]";
        }, i.prototype._onCrossFrame = function(e) {
            var a = this._armature.eventDispatcher;
            if (this._animationState.actionEnabled) for (var i = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + e], r = this._frameArray[i + 1], n = this._animationData.parent.actions, s = 0; s < r; ++s) {
                var o = n[this._frameArray[i + 2 + s]];
                if (0 === o.type) (h = t.BaseObject.borrowObject(t.EventObject)).time = this._frameArray[i] / this._frameRate, 
                h.animationState = this._animationState, t.EventObject.actionDataToInstance(o, h, this._armature), 
                this._armature._bufferAction(h, !0); else {
                    var l = 10 === o.type ? t.EventObject.FRAME_EVENT : t.EventObject.SOUND_EVENT;
                    if (11 === o.type || a.hasDBEventListener(l)) {
                        var h = t.BaseObject.borrowObject(t.EventObject);
                        h.time = this._frameArray[i] / this._frameRate, h.animationState = this._animationState, 
                        t.EventObject.actionDataToInstance(o, h, this._armature), this._armature._dragonBones.bufferEvent(h);
                    }
                }
            }
        }, i.prototype._onArriveAtFrame = function() {}, i.prototype._onUpdateFrame = function() {}, 
        i.prototype.update = function(e) {
            var a = this.playState, i = this.currentPlayTimes, r = this.currentTime;
            if (this._setCurrentTime(e)) {
                var n = this._armature.eventDispatcher;
                if (a < 0) {
                    if (this.playState === a) return;
                    if (this._animationState.displayControl && this._animationState.resetToPose && this._armature._sortZOrder(null, 0), 
                    i = this.currentPlayTimes, n.hasDBEventListener(t.EventObject.START)) {
                        var s = t.BaseObject.borrowObject(t.EventObject);
                        s.type = t.EventObject.START, s.armature = this._armature, s.animationState = this._animationState, 
                        this._armature._dragonBones.bufferEvent(s);
                    }
                }
                var o = this._animationState.timeScale < 0, l = null, h = null;
                if (this.currentPlayTimes !== i && (n.hasDBEventListener(t.EventObject.LOOP_COMPLETE) && ((l = t.BaseObject.borrowObject(t.EventObject)).type = t.EventObject.LOOP_COMPLETE, 
                l.armature = this._armature, l.animationState = this._animationState), this.playState > 0 && n.hasDBEventListener(t.EventObject.COMPLETE) && ((h = t.BaseObject.borrowObject(t.EventObject)).type = t.EventObject.COMPLETE, 
                h.armature = this._armature, h.animationState = this._animationState)), this._frameCount > 1) {
                    var u = this._timelineData, _ = Math.floor(this.currentTime * this._frameRate), f = this._frameIndices[u.frameIndicesOffset + _];
                    if (this._frameIndex !== f) {
                        var c = this._frameIndex;
                        if (this._frameIndex = f, null !== this._timelineArray) if (this._frameOffset = this._animationData.frameOffset + this._timelineArray[u.offset + 5 + this._frameIndex], 
                        o) {
                            if (c < 0) {
                                d = Math.floor(r * this._frameRate);
                                c = this._frameIndices[u.frameIndicesOffset + d], this.currentPlayTimes === i && c === f && (c = -1);
                            }
                            for (;c >= 0; ) {
                                var p = this._animationData.frameOffset + this._timelineArray[u.offset + 5 + c], m = this._frameArray[p] / this._frameRate;
                                if (this._position <= m && m <= this._position + this._duration && this._onCrossFrame(c), 
                                null !== l && 0 === c && (this._armature._dragonBones.bufferEvent(l), l = null), 
                                c > 0 ? c-- : c = this._frameCount - 1, c === f) break;
                            }
                        } else {
                            if (c < 0) {
                                var d = Math.floor(r * this._frameRate);
                                c = this._frameIndices[u.frameIndicesOffset + d];
                                var p = this._animationData.frameOffset + this._timelineArray[u.offset + 5 + c], m = this._frameArray[p] / this._frameRate;
                                this.currentPlayTimes === i && (r <= m ? c > 0 ? c-- : c = this._frameCount - 1 : c === f && (c = -1));
                            }
                            for (;c >= 0; ) {
                                c < this._frameCount - 1 ? c++ : c = 0;
                                var p = this._animationData.frameOffset + this._timelineArray[u.offset + 5 + c], m = this._frameArray[p] / this._frameRate;
                                if (this._position <= m && m <= this._position + this._duration && this._onCrossFrame(c), 
                                null !== l && 0 === c && (this._armature._dragonBones.bufferEvent(l), l = null), 
                                c === f) break;
                            }
                        }
                    }
                } else if (this._frameIndex < 0 && (this._frameIndex = 0, null !== this._timelineData)) {
                    this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5];
                    m = this._frameArray[this._frameOffset] / this._frameRate;
                    this.currentPlayTimes === i ? r <= m && this._onCrossFrame(this._frameIndex) : this._position <= m && (o || null === l || (this._armature._dragonBones.bufferEvent(l), 
                    l = null), this._onCrossFrame(this._frameIndex));
                }
                null !== l && this._armature._dragonBones.bufferEvent(l), null !== h && this._armature._dragonBones.bufferEvent(h);
            }
        }, i.prototype.setCurrentTime = function(t) {
            this._setCurrentTime(t), this._frameIndex = -1;
        }, i;
    }(t.TimelineState);
    t.ActionTimelineState = e;
    var i = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.ZOrderTimelineState]";
        }, e.prototype._onArriveAtFrame = function() {
            this.playState >= 0 && (this._frameArray[this._frameOffset + 1] > 0 ? this._armature._sortZOrder(this._frameArray, this._frameOffset + 2) : this._armature._sortZOrder(null, 0));
        }, e.prototype._onUpdateFrame = function() {}, e;
    }(t.TimelineState);
    t.ZOrderTimelineState = i;
    var r = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.BoneAllTimelineState]";
        }, i.prototype._onArriveAtFrame = function() {
            if (e.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var t = this._animationData.frameFloatOffset + this._frameValueOffset + 6 * this._frameIndex, a = this._armature._armatureData.scale, i = this._frameFloatArray, r = this.bonePose.current, n = this.bonePose.delta;
                r.x = i[t++] * a, r.y = i[t++] * a, r.rotation = i[t++], r.skew = i[t++], r.scaleX = i[t++], 
                r.scaleY = i[t++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (t = this._animationData.frameFloatOffset + this._frameValueOffset), 
                n.x = i[t++] * a - r.x, n.y = i[t++] * a - r.y, n.rotation = i[t++] - r.rotation, 
                n.skew = i[t++] - r.skew, n.scaleX = i[t++] - r.scaleX, n.scaleY = i[t++] - r.scaleY) : (n.x = 0, 
                n.y = 0, n.rotation = 0, n.skew = 0, n.scaleX = 0, n.scaleY = 0);
            } else {
                var r = this.bonePose.current, n = this.bonePose.delta;
                r.x = 0, r.y = 0, r.rotation = 0, r.skew = 0, r.scaleX = 1, r.scaleY = 1, n.x = 0, 
                n.y = 0, n.rotation = 0, n.skew = 0, n.scaleX = 0, n.scaleY = 0;
            }
        }, i.prototype._onUpdateFrame = function() {
            e.prototype._onUpdateFrame.call(this);
            var t = this.bonePose.current, a = this.bonePose.delta, i = this.bonePose.result;
            this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), 
            i.x = t.x + a.x * this._tweenProgress, i.y = t.y + a.y * this._tweenProgress, i.rotation = t.rotation + a.rotation * this._tweenProgress, 
            i.skew = t.skew + a.skew * this._tweenProgress, i.scaleX = t.scaleX + a.scaleX * this._tweenProgress, 
            i.scaleY = t.scaleY + a.scaleY * this._tweenProgress;
        }, i.prototype.fadeOut = function() {
            var e = this.bonePose.result;
            e.rotation = t.Transform.normalizeRadian(e.rotation), e.skew = t.Transform.normalizeRadian(e.skew);
        }, i;
    }(t.BoneTimelineState);
    t.BoneAllTimelineState = r;
    var n = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.BoneTranslateTimelineState]";
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, a = this._armature._armatureData.scale, i = this._frameFloatArray, r = this.bonePose.current, n = this.bonePose.delta;
                r.x = i[e++] * a, r.y = i[e++] * a, 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameFloatOffset + this._frameValueOffset), 
                n.x = i[e++] * a - r.x, n.y = i[e++] * a - r.y) : (n.x = 0, n.y = 0);
            } else {
                var r = this.bonePose.current, n = this.bonePose.delta;
                r.x = 0, r.y = 0, n.x = 0, n.y = 0;
            }
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this);
            var e = this.bonePose.current, a = this.bonePose.delta, i = this.bonePose.result;
            this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), 
            i.x = e.x + a.x * this._tweenProgress, i.y = e.y + a.y * this._tweenProgress;
        }, e;
    }(t.BoneTimelineState);
    t.BoneTranslateTimelineState = n;
    var s = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.BoneRotateTimelineState]";
        }, i.prototype._onArriveAtFrame = function() {
            if (e.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var a = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, i = this._frameFloatArray, r = this.bonePose.current, n = this.bonePose.delta;
                r.rotation = i[a++], r.skew = i[a++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 ? (a = this._animationData.frameFloatOffset + this._frameValueOffset, 
                n.rotation = t.Transform.normalizeRadian(i[a++] - r.rotation)) : n.rotation = i[a++] - r.rotation, 
                n.skew = i[a++] - r.skew) : (n.rotation = 0, n.skew = 0);
            } else {
                var r = this.bonePose.current, n = this.bonePose.delta;
                r.rotation = 0, r.skew = 0, n.rotation = 0, n.skew = 0;
            }
        }, i.prototype._onUpdateFrame = function() {
            e.prototype._onUpdateFrame.call(this);
            var t = this.bonePose.current, a = this.bonePose.delta, i = this.bonePose.result;
            this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), 
            i.rotation = t.rotation + a.rotation * this._tweenProgress, i.skew = t.skew + a.skew * this._tweenProgress;
        }, i.prototype.fadeOut = function() {
            var e = this.bonePose.result;
            e.rotation = t.Transform.normalizeRadian(e.rotation), e.skew = t.Transform.normalizeRadian(e.skew);
        }, i;
    }(t.BoneTimelineState);
    t.BoneRotateTimelineState = s;
    var o = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.BoneScaleTimelineState]";
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, a = this._frameFloatArray, i = this.bonePose.current, r = this.bonePose.delta;
                i.scaleX = a[e++], i.scaleY = a[e++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameFloatOffset + this._frameValueOffset), 
                r.scaleX = a[e++] - i.scaleX, r.scaleY = a[e++] - i.scaleY) : (r.scaleX = 0, r.scaleY = 0);
            } else {
                var i = this.bonePose.current, r = this.bonePose.delta;
                i.scaleX = 1, i.scaleY = 1, r.scaleX = 0, r.scaleY = 0;
            }
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this);
            var e = this.bonePose.current, a = this.bonePose.delta, i = this.bonePose.result;
            this.bone._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0), 
            i.scaleX = e.scaleX + a.scaleX * this._tweenProgress, i.scaleY = e.scaleY + a.scaleY * this._tweenProgress;
        }, e;
    }(t.BoneTimelineState);
    t.BoneScaleTimelineState = o;
    var l = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e._current = [], e._delta = [], e._result = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.SurfaceTimelineState]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.surface = null, this._frameFloatOffset = 0, 
            this._valueCount = 0, this._deformCount = 0, this._valueOffset = 0, this._current.length = 0, 
            this._delta.length = 0, this._result.length = 0;
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, a = this._armature._armatureData.scale, i = this._frameFloatArray;
                if (2 === this._tweenState) {
                    var r = e + this._valueCount;
                    this._frameIndex === this._frameCount - 1 && (r = this._animationData.frameFloatOffset + this._frameValueOffset);
                    for (n = 0; n < this._valueCount; ++n) this._delta[n] = i[r + n] * a - (this._current[n] = i[e + n] * a);
                } else for (n = 0; n < this._valueCount; ++n) this._current[n] = i[e + n] * a;
            } else for (var n = 0; n < this._valueCount; ++n) this._current[n] = 0;
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this), this.surface._transformDirty = !0, 2 !== this._tweenState && (this._tweenState = 0);
            for (var e = 0; e < this._valueCount; ++e) this._result[e] = this._current[e] + this._delta[e] * this._tweenProgress;
        }, e.prototype.init = function(e, a, i) {
            if (t.prototype.init.call(this, e, a, i), null !== this._timelineData) {
                var r = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
                this._deformCount = this._frameIntArray[r + 1], this._valueCount = this._frameIntArray[r + 2], 
                this._valueOffset = this._frameIntArray[r + 3], this._frameFloatOffset = this._frameIntArray[r + 4] + this._animationData.frameFloatOffset;
            } else this._deformCount = this.surface._deformVertices.length, this._valueCount = this._deformCount, 
            this._valueOffset = 0, this._frameFloatOffset = 0;
            this._current.length = this._valueCount, this._delta.length = this._valueCount, 
            this._result.length = this._valueCount;
            for (var n = 0; n < this._valueCount; ++n) this._delta[n] = 0;
        }, e.prototype.blend = function(t) {
            for (var e = this.surface._blendState.blendWeight, a = this.surface._deformVertices, i = 0; i < this._deformCount; ++i) {
                var r = 0;
                r = i < this._valueOffset ? this._frameFloatArray[this._frameFloatOffset + i] : i < this._valueOffset + this._valueCount ? this._result[i - this._valueOffset] : this._frameFloatArray[this._frameFloatOffset + i - this._valueCount], 
                2 === t ? a[i] += r * e : a[i] = 1 !== e ? r * e : r;
            }
            0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.surface._transformDirty = !0);
        }, e;
    }(t.TweenTimelineState);
    t.SurfaceTimelineState = l;
    var h = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.SlotDislayTimelineState]";
        }, e.prototype._onArriveAtFrame = function() {
            if (this.playState >= 0) {
                var t = null !== this._timelineData ? this._frameArray[this._frameOffset + 1] : this.slot._slotData.displayIndex;
                this.slot.displayIndex !== t && this.slot._setDisplayIndex(t, !0);
            }
        }, e;
    }(t.SlotTimelineState);
    t.SlotDislayTimelineState = h;
    var u = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e._current = [ 0, 0, 0, 0, 0, 0, 0, 0 ], e._delta = [ 0, 0, 0, 0, 0, 0, 0, 0 ], 
            e._result = [ 0, 0, 0, 0, 0, 0, 0, 0 ], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.SlotColorTimelineState]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this._dirty = !1;
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._dragonBonesData.intArray, a = this._frameIntArray, i = this._animationData.frameIntOffset + this._frameValueOffset + 1 * this._frameIndex, r = a[i];
                r < 0 && (r += 65536), this._current[0] = e[r++], this._current[1] = e[r++], this._current[2] = e[r++], 
                this._current[3] = e[r++], this._current[4] = e[r++], this._current[5] = e[r++], 
                this._current[6] = e[r++], this._current[7] = e[r++], 2 === this._tweenState && ((r = this._frameIndex === this._frameCount - 1 ? a[this._animationData.frameIntOffset + this._frameValueOffset] : a[i + 1]) < 0 && (r += 65536), 
                this._delta[0] = e[r++] - this._current[0], this._delta[1] = e[r++] - this._current[1], 
                this._delta[2] = e[r++] - this._current[2], this._delta[3] = e[r++] - this._current[3], 
                this._delta[4] = e[r++] - this._current[4], this._delta[5] = e[r++] - this._current[5], 
                this._delta[6] = e[r++] - this._current[6], this._delta[7] = e[r++] - this._current[7]);
            } else {
                var n = this.slot._slotData.color;
                this._current[0] = 100 * n.alphaMultiplier, this._current[1] = 100 * n.redMultiplier, 
                this._current[2] = 100 * n.greenMultiplier, this._current[3] = 100 * n.blueMultiplier, 
                this._current[4] = n.alphaOffset, this._current[5] = n.redOffset, this._current[6] = n.greenOffset, 
                this._current[7] = n.blueOffset;
            }
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this), this._dirty = !0, 2 !== this._tweenState && (this._tweenState = 0), 
            this._result[0] = .01 * (this._current[0] + this._delta[0] * this._tweenProgress), 
            this._result[1] = .01 * (this._current[1] + this._delta[1] * this._tweenProgress), 
            this._result[2] = .01 * (this._current[2] + this._delta[2] * this._tweenProgress), 
            this._result[3] = .01 * (this._current[3] + this._delta[3] * this._tweenProgress), 
            this._result[4] = this._current[4] + this._delta[4] * this._tweenProgress, this._result[5] = this._current[5] + this._delta[5] * this._tweenProgress, 
            this._result[6] = this._current[6] + this._delta[6] * this._tweenProgress, this._result[7] = this._current[7] + this._delta[7] * this._tweenProgress;
        }, e.prototype.fadeOut = function() {
            this._tweenState = 0, this._dirty = !1;
        }, e.prototype.update = function(e) {
            if (t.prototype.update.call(this, e), 0 !== this._tweenState || this._dirty) {
                var a = this.slot._colorTransform;
                if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
                    if (a.alphaMultiplier !== this._result[0] || a.redMultiplier !== this._result[1] || a.greenMultiplier !== this._result[2] || a.blueMultiplier !== this._result[3] || a.alphaOffset !== this._result[4] || a.redOffset !== this._result[5] || a.greenOffset !== this._result[6] || a.blueOffset !== this._result[7]) {
                        var i = Math.pow(this._animationState._fadeProgress, 4);
                        a.alphaMultiplier += (this._result[0] - a.alphaMultiplier) * i, a.redMultiplier += (this._result[1] - a.redMultiplier) * i, 
                        a.greenMultiplier += (this._result[2] - a.greenMultiplier) * i, a.blueMultiplier += (this._result[3] - a.blueMultiplier) * i, 
                        a.alphaOffset += (this._result[4] - a.alphaOffset) * i, a.redOffset += (this._result[5] - a.redOffset) * i, 
                        a.greenOffset += (this._result[6] - a.greenOffset) * i, a.blueOffset += (this._result[7] - a.blueOffset) * i, 
                        this.slot._colorDirty = !0;
                    }
                } else this._dirty && (this._dirty = !1, a.alphaMultiplier === this._result[0] && a.redMultiplier === this._result[1] && a.greenMultiplier === this._result[2] && a.blueMultiplier === this._result[3] && a.alphaOffset === this._result[4] && a.redOffset === this._result[5] && a.greenOffset === this._result[6] && a.blueOffset === this._result[7] || (a.alphaMultiplier = this._result[0], 
                a.redMultiplier = this._result[1], a.greenMultiplier = this._result[2], a.blueMultiplier = this._result[3], 
                a.alphaOffset = this._result[4], a.redOffset = this._result[5], a.greenOffset = this._result[6], 
                a.blueOffset = this._result[7], this.slot._colorDirty = !0));
            }
        }, e;
    }(t.SlotTimelineState);
    t.SlotColorTimelineState = u;
    var _ = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e._current = [], e._delta = [], e._result = [], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.DeformTimelineState]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.vertexOffset = 0, this._dirty = !1, this._frameFloatOffset = 0, 
            this._valueCount = 0, this._deformCount = 0, this._valueOffset = 0, this._current.length = 0, 
            this._delta.length = 0, this._result.length = 0;
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, a = this._armature._armatureData.scale, i = this._frameFloatArray;
                if (2 === this._tweenState) {
                    var r = e + this._valueCount;
                    this._frameIndex === this._frameCount - 1 && (r = this._animationData.frameFloatOffset + this._frameValueOffset);
                    for (n = 0; n < this._valueCount; ++n) this._delta[n] = i[r + n] * a - (this._current[n] = i[e + n] * a);
                } else for (n = 0; n < this._valueCount; ++n) this._current[n] = i[e + n] * a;
            } else for (var n = 0; n < this._valueCount; ++n) this._current[n] = 0;
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this), this._dirty = !0, 2 !== this._tweenState && (this._tweenState = 0);
            for (var e = 0; e < this._valueCount; ++e) this._result[e] = this._current[e] + this._delta[e] * this._tweenProgress;
        }, e.prototype.init = function(e, a, i) {
            if (t.prototype.init.call(this, e, a, i), null !== this._timelineData) {
                var r = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
                this.vertexOffset = this._frameIntArray[r + 0], this.vertexOffset < 0 && (this.vertexOffset += 65536), 
                this._deformCount = this._frameIntArray[r + 1], this._valueCount = this._frameIntArray[r + 2], 
                this._valueOffset = this._frameIntArray[r + 3], this._frameFloatOffset = this._frameIntArray[r + 4] + this._animationData.frameFloatOffset;
            } else {
                var n = this.slot._deformVertices;
                this._deformCount = null !== n ? n.vertices.length : 0, this._valueCount = this._deformCount, 
                this._valueOffset = 0, this._frameFloatOffset = 0;
            }
            this._current.length = this._valueCount, this._delta.length = this._valueCount, 
            this._result.length = this._valueCount;
            for (var s = 0; s < this._valueCount; ++s) this._delta[s] = 0;
        }, e.prototype.fadeOut = function() {
            this._tweenState = 0, this._dirty = !1;
        }, e.prototype.update = function(e) {
            var a = this.slot._deformVertices;
            if (null !== a && null !== a.verticesData && a.verticesData.offset === this.vertexOffset && (t.prototype.update.call(this, e), 
            0 !== this._tweenState || this._dirty)) {
                var i = a.vertices;
                if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
                    for (var r = Math.pow(this._animationState._fadeProgress, 2), n = 0; n < this._deformCount; ++n) n < this._valueOffset ? i[n] += (this._frameFloatArray[this._frameFloatOffset + n] - i[n]) * r : n < this._valueOffset + this._valueCount ? i[n] += (this._result[n - this._valueOffset] - i[n]) * r : i[n] += (this._frameFloatArray[this._frameFloatOffset + n - this._valueCount] - i[n]) * r;
                    a.verticesDirty = !0;
                } else if (this._dirty) {
                    this._dirty = !1;
                    for (n = 0; n < this._deformCount; ++n) n < this._valueOffset ? i[n] = this._frameFloatArray[this._frameFloatOffset + n] : n < this._valueOffset + this._valueCount ? i[n] = this._result[n - this._valueOffset] : i[n] = this._frameFloatArray[this._frameFloatOffset + n - this._valueCount];
                    a.verticesDirty = !0;
                }
            }
        }, e;
    }(t.SlotTimelineState);
    t.DeformTimelineState = _;
    var f = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.IKConstraintTimelineState]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this._current = 0, this._delta = 0;
        }, e.prototype._onArriveAtFrame = function() {
            t.prototype._onArriveAtFrame.call(this);
            var e = this.constraint;
            if (null !== this._timelineData) {
                var a = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, i = this._frameIntArray, r = 0 !== i[a++];
                this._current = .01 * i[a++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (a = this._animationData.frameIntOffset + this._frameValueOffset), 
                this._delta = .01 * i[a + 1] - this._current) : this._delta = 0, e._bendPositive = r;
            } else {
                var n = e._constraintData;
                this._current = n.weight, this._delta = 0, e._bendPositive = n.bendPositive;
            }
            e.invalidUpdate();
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this), 2 !== this._tweenState && (this._tweenState = 0);
            var e = this.constraint;
            e._weight = this._current + this._delta * this._tweenProgress, e.invalidUpdate();
        }, e;
    }(t.ConstraintTimelineState);
    t.IKConstraintTimelineState = f;
    var c = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e._floats = [ 0, 0, 0, 0, 0, 0 ], e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.AnimationTimelineState]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.animationState = null;
        }, e.prototype._onArriveAtFrame = function() {
            if (t.prototype._onArriveAtFrame.call(this), null !== this._timelineData) {
                var e = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, a = 1 / this.animationState._animationData.parent.frameRate, i = this._frameIntArray;
                this._floats[0] = i[e++] * a, this._floats[3] = .01 * i[e++], 2 === this._tweenState ? (this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameIntOffset + this._frameValueOffset), 
                this._floats[1] = i[e++] * a - this._floats[0], this._floats[4] = .01 * i[e++] - this._floats[3]) : (this._floats[1] = 0, 
                this._floats[4] = 0);
            }
        }, e.prototype._onUpdateFrame = function() {
            t.prototype._onUpdateFrame.call(this), 2 !== this._tweenState && (this._tweenState = 0), 
            this._floats[0] >= 0 && (this._floats[2] = this._floats[0] + this._floats[1] * this._tweenProgress), 
            this._floats[5] = this._floats[3] + this._floats[4] * this._tweenProgress;
        }, e.prototype.blend = function(t) {
            var e = this.animationState, a = e._blendState.blendWeight;
            2 === t ? (e.weight += this._floats[5] * a, e.currentTime += this._floats[2] * a) : (e.weight = this._floats[5] * a, 
            e.currentTime = this._floats[2] * a);
        }, e;
    }(t.TweenTimelineState);
    t.AnimationTimelineState = c;
}(r || (r = {}));

!function(t) {
    var e = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e.actionDataToInstance = function(t, a, i) {
            0 === t.type ? a.type = e.FRAME_EVENT : a.type = 10 === t.type ? e.FRAME_EVENT : e.SOUND_EVENT, 
            a.name = t.name, a.armature = i, a.actionData = t, a.data = t.data, null !== t.bone && (a.bone = i.getBone(t.bone.name)), 
            null !== t.slot && (a.slot = i.getSlot(t.slot.name));
        }, e.toString = function() {
            return "[class dragonBones.EventObject]";
        }, e.prototype._onClear = function() {
            this.time = 0, this.type = "", this.name = "", this.armature = null, this.bone = null, 
            this.slot = null, this.animationState = null, this.actionData = null, this.data = null;
        }, e.START = "start", e.LOOP_COMPLETE = "loopComplete", e.COMPLETE = "complete", 
        e.FADE_IN = "fadeIn", e.FADE_IN_COMPLETE = "fadeInComplete", e.FADE_OUT = "fadeOut", 
        e.FADE_OUT_COMPLETE = "fadeOutComplete", e.FRAME_EVENT = "frameEvent", e.SOUND_EVENT = "soundEvent", 
        e;
    }(t.BaseObject);
    t.EventObject = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function e() {}
        return e._getArmatureType = function(t) {
            switch (t.toLowerCase()) {
              case "stage":
                return 2;

              case "armature":
                return 0;

              case "movieclip":
                return 1;

              default:
                return 0;
            }
        }, e._getBoneType = function(t) {
            switch (t.toLowerCase()) {
              case "bone":
                return 0;

              case "surface":
                return 1;

              default:
                return 0;
            }
        }, e._getDisplayType = function(t) {
            switch (t.toLowerCase()) {
              case "image":
                return 0;

              case "mesh":
                return 2;

              case "armature":
                return 1;

              case "boundingbox":
                return 3;

              case "path":
                return 4;

              default:
                return 0;
            }
        }, e._getBoundingBoxType = function(t) {
            switch (t.toLowerCase()) {
              case "rectangle":
                return 0;

              case "ellipse":
                return 1;

              case "polygon":
                return 2;

              default:
                return 0;
            }
        }, e._getActionType = function(t) {
            switch (t.toLowerCase()) {
              case "play":
                return 0;

              case "frame":
                return 10;

              case "sound":
                return 11;

              default:
                return 0;
            }
        }, e._getBlendMode = function(t) {
            switch (t.toLowerCase()) {
              case "normal":
                return 0;

              case "add":
                return 1;

              case "alpha":
                return 2;

              case "darken":
                return 3;

              case "difference":
                return 4;

              case "erase":
                return 5;

              case "hardlight":
                return 6;

              case "invert":
                return 7;

              case "layer":
                return 8;

              case "lighten":
                return 9;

              case "multiply":
                return 10;

              case "overlay":
                return 11;

              case "screen":
                return 12;

              case "subtract":
                return 13;

              default:
                return 0;
            }
        }, e._getPositionMode = function(t) {
            switch (t.toLocaleLowerCase()) {
              case "percent":
                return 1;

              case "fixed":
                return 0;

              default:
                return 1;
            }
        }, e._getSpacingMode = function(t) {
            switch (t.toLocaleLowerCase()) {
              case "length":
                return 0;

              case "percent":
                return 2;

              case "fixed":
                return 1;

              default:
                return 0;
            }
        }, e._getRotateMode = function(t) {
            switch (t.toLocaleLowerCase()) {
              case "tangent":
                return 0;

              case "chain":
                return 1;

              case "chainscale":
                return 2;

              default:
                return 0;
            }
        }, e.parseDragonBonesData = function(e) {
            return console.warn("Deprecated."), e instanceof ArrayBuffer ? t.BinaryDataParser.getInstance().parseDragonBonesData(e) : t.ObjectDataParser.getInstance().parseDragonBonesData(e);
        }, e.parseTextureAtlasData = function(a, i) {
            void 0 === i && (i = 1), console.warn("已废弃");
            for (var r = {}, n = a[e.SUB_TEXTURE], s = 0, o = n.length; s < o; s++) {
                var l = n[s], h = l[e.NAME], u = new t.Rectangle(), _ = null;
                u.x = l[e.X] / i, u.y = l[e.Y] / i, u.width = l[e.WIDTH] / i, u.height = l[e.HEIGHT] / i, 
                e.FRAME_WIDTH in l && ((_ = new t.Rectangle()).x = l[e.FRAME_X] / i, _.y = l[e.FRAME_Y] / i, 
                _.width = l[e.FRAME_WIDTH] / i, _.height = l[e.FRAME_HEIGHT] / i), r[h] = {
                    region: u,
                    frame: _,
                    rotated: !1
                };
            }
            return r;
        }, e.DATA_VERSION_2_3 = "2.3", e.DATA_VERSION_3_0 = "3.0", e.DATA_VERSION_4_0 = "4.0", 
        e.DATA_VERSION_4_5 = "4.5", e.DATA_VERSION_5_0 = "5.0", e.DATA_VERSION_5_5 = "5.5", 
        e.DATA_VERSION = e.DATA_VERSION_5_5, e.DATA_VERSIONS = [ e.DATA_VERSION_4_0, e.DATA_VERSION_4_5, e.DATA_VERSION_5_0, e.DATA_VERSION_5_5 ], 
        e.TEXTURE_ATLAS = "textureAtlas", e.SUB_TEXTURE = "SubTexture", e.FORMAT = "format", 
        e.IMAGE_PATH = "imagePath", e.WIDTH = "width", e.HEIGHT = "height", e.ROTATED = "rotated", 
        e.FRAME_X = "frameX", e.FRAME_Y = "frameY", e.FRAME_WIDTH = "frameWidth", e.FRAME_HEIGHT = "frameHeight", 
        e.DRADON_BONES = "dragonBones", e.USER_DATA = "userData", e.ARMATURE = "armature", 
        e.BONE = "bone", e.SURFACE = "surface", e.SLOT = "slot", e.CONSTRAINT = "constraint", 
        e.IK = "ik", e.PATH_CONSTRAINT = "path", e.SKIN = "skin", e.DISPLAY = "display", 
        e.ANIMATION = "animation", e.Z_ORDER = "zOrder", e.FFD = "ffd", e.FRAME = "frame", 
        e.TRANSLATE_FRAME = "translateFrame", e.ROTATE_FRAME = "rotateFrame", e.SCALE_FRAME = "scaleFrame", 
        e.DISPLAY_FRAME = "displayFrame", e.COLOR_FRAME = "colorFrame", e.DEFAULT_ACTIONS = "defaultActions", 
        e.ACTIONS = "actions", e.EVENTS = "events", e.INTS = "ints", e.FLOATS = "floats", 
        e.STRINGS = "strings", e.CANVAS = "canvas", e.TRANSFORM = "transform", e.PIVOT = "pivot", 
        e.AABB = "aabb", e.COLOR = "color", e.VERSION = "version", e.COMPATIBLE_VERSION = "compatibleVersion", 
        e.FRAME_RATE = "frameRate", e.TYPE = "type", e.SUB_TYPE = "subType", e.NAME = "name", 
        e.PARENT = "parent", e.TARGET = "target", e.STAGE = "stage", e.SHARE = "share", 
        e.PATH = "path", e.LENGTH = "length", e.DISPLAY_INDEX = "displayIndex", e.BLEND_MODE = "blendMode", 
        e.INHERIT_TRANSLATION = "inheritTranslation", e.INHERIT_ROTATION = "inheritRotation", 
        e.INHERIT_SCALE = "inheritScale", e.INHERIT_REFLECTION = "inheritReflection", e.INHERIT_ANIMATION = "inheritAnimation", 
        e.INHERIT_DEFORM = "inheritDeform", e.SEGMENT_X = "segmentX", e.SEGMENT_Y = "segmentY", 
        e.BEND_POSITIVE = "bendPositive", e.CHAIN = "chain", e.WEIGHT = "weight", e.FADE_IN_TIME = "fadeInTime", 
        e.PLAY_TIMES = "playTimes", e.SCALE = "scale", e.OFFSET = "offset", e.POSITION = "position", 
        e.DURATION = "duration", e.TWEEN_EASING = "tweenEasing", e.TWEEN_ROTATE = "tweenRotate", 
        e.TWEEN_SCALE = "tweenScale", e.CLOCK_WISE = "clockwise", e.CURVE = "curve", e.SOUND = "sound", 
        e.EVENT = "event", e.ACTION = "action", e.X = "x", e.Y = "y", e.SKEW_X = "skX", 
        e.SKEW_Y = "skY", e.SCALE_X = "scX", e.SCALE_Y = "scY", e.VALUE = "value", e.ROTATE = "rotate", 
        e.SKEW = "skew", e.ALPHA_OFFSET = "aO", e.RED_OFFSET = "rO", e.GREEN_OFFSET = "gO", 
        e.BLUE_OFFSET = "bO", e.ALPHA_MULTIPLIER = "aM", e.RED_MULTIPLIER = "rM", e.GREEN_MULTIPLIER = "gM", 
        e.BLUE_MULTIPLIER = "bM", e.UVS = "uvs", e.VERTICES = "vertices", e.TRIANGLES = "triangles", 
        e.WEIGHTS = "weights", e.SLOT_POSE = "slotPose", e.BONE_POSE = "bonePose", e.GLUE_WEIGHTS = "glueWeights", 
        e.GLUE_MESHES = "glueMeshes", e.BONES = "bones", e.POSITION_MODE = "positionMode", 
        e.SPACING_MODE = "spacingMode", e.ROTATE_MODE = "rotateMode", e.SPACING = "spacing", 
        e.ROTATE_OFFSET = "rotateOffset", e.ROTATE_MIX = "rotateMix", e.TRANSLATE_MIX = "translateMix", 
        e.TARGET_DISPLAY = "targetDisplay", e.CLOSED = "closed", e.CONSTANT_SPEED = "constantSpeed", 
        e.VERTEX_COUNT = "vertexCount", e.LENGTHS = "lengths", e.GOTO_AND_PLAY = "gotoAndPlay", 
        e.DEFAULT_NAME = "default", e;
    }();
    t.DataParser = e;
}(r || (r = {}));

!function(e) {
    var i = function(i) {
        function n() {
            var t = null !== i && i.apply(this, arguments) || this;
            return t._rawTextureAtlasIndex = 0, t._rawBones = [], t._data = null, t._armature = null, 
            t._bone = null, t._surface = null, t._slot = null, t._skin = null, t._mesh = null, 
            t._animation = null, t._timeline = null, t._rawTextureAtlases = null, t._defaultColorOffset = -1, 
            t._prevClockwise = 0, t._prevRotation = 0, t._helpMatrixA = new e.Matrix(), t._helpMatrixB = new e.Matrix(), 
            t._helpTransform = new e.Transform(), t._helpColorTransform = new e.ColorTransform(), 
            t._helpPoint = new e.Point(), t._helpArray = [], t._intArray = [], t._floatArray = [], 
            t._frameIntArray = [], t._frameFloatArray = [], t._frameArray = [], t._timelineArray = [], 
            t._cacheRawMeshes = [], t._cacheMeshes = [], t._actionFrames = [], t._weightSlotPose = {}, 
            t._weightBonePoses = {}, t._cacheBones = {}, t._slotChildActions = {}, t;
        }
        return a(n, i), n._getBoolean = function(e, a, i) {
            if (a in e) {
                var r = e[a], n = void 0 === r ? "undefined" : t(r);
                if ("boolean" === n) return r;
                if ("string" !== n) return !!r;
                switch (r) {
                  case "0":
                  case "NaN":
                  case "":
                  case "false":
                  case "null":
                  case "undefined":
                    return !1;

                  default:
                    return !0;
                }
            }
            return i;
        }, n._getNumber = function(t, e, a) {
            if (e in t) {
                var i = t[e];
                return null === i || "NaN" === i ? a : +i || 0;
            }
            return a;
        }, n._getString = function(a, i, r) {
            if (i in a) {
                var n = a[i];
                if ("string" === (void 0 === n ? "undefined" : t(n))) {
                    if (e.DragonBones.webAssembly) for (var s = 0, o = n.length; s < o; ++s) if (n.charCodeAt(s) > 255) return encodeURI(n);
                    return n;
                }
                return String(n);
            }
            return r;
        }, n.prototype._getCurvePoint = function(t, e, a, i, r, n, s, o, l, h) {
            var u = 1 - l, _ = u * u, f = l * l, c = u * _, p = 3 * l * _, m = 3 * u * f, d = l * f;
            h.x = c * t + p * a + m * r + d * s, h.y = c * e + p * i + m * n + d * o;
        }, n.prototype._samplingEasingCurve = function(t, e) {
            for (var a = t.length, i = -2, r = 0, n = e.length; r < n; ++r) {
                for (var s = (r + 1) / (n + 1); (i + 6 < a ? t[i + 6] : 1) < s; ) i += 6;
                for (var o = i >= 0 && i + 6 < a, l = o ? t[i] : 0, h = o ? t[i + 1] : 0, u = t[i + 2], _ = t[i + 3], f = t[i + 4], c = t[i + 5], p = o ? t[i + 6] : 1, m = o ? t[i + 7] : 1, d = 0, y = 1; y - d > 1e-4; ) {
                    var g = .5 * (y + d);
                    this._getCurvePoint(l, h, u, _, f, c, p, m, g, this._helpPoint), s - this._helpPoint.x > 0 ? d = g : y = g;
                }
                e[r] = this._helpPoint.y;
            }
        }, n.prototype._parseActionDataInFrame = function(t, a, i, r) {
            e.DataParser.EVENT in t && this._mergeActionFrame(t[e.DataParser.EVENT], a, 10, i, r), 
            e.DataParser.SOUND in t && this._mergeActionFrame(t[e.DataParser.SOUND], a, 11, i, r), 
            e.DataParser.ACTION in t && this._mergeActionFrame(t[e.DataParser.ACTION], a, 0, i, r), 
            e.DataParser.EVENTS in t && this._mergeActionFrame(t[e.DataParser.EVENTS], a, 10, i, r), 
            e.DataParser.ACTIONS in t && this._mergeActionFrame(t[e.DataParser.ACTIONS], a, 0, i, r);
        }, n.prototype._mergeActionFrame = function(t, a, i, n, s) {
            for (var o = e.DragonBones.webAssembly ? this._armature.actions.size() : this._armature.actions.length, l = this._parseActionData(t, i, n, s), h = 0, u = null, _ = 0, f = l; _ < f.length; _++) {
                var c = f[_];
                this._armature.addAction(c, !1);
            }
            0 === this._actionFrames.length && ((u = new r()).frameStart = 0, this._actionFrames.push(u), 
            u = null);
            for (var p = 0, m = this._actionFrames; p < m.length; p++) {
                var d = m[p];
                if (d.frameStart === a) {
                    u = d;
                    break;
                }
                if (d.frameStart > a) break;
                h++;
            }
            null === u && ((u = new r()).frameStart = a, this._actionFrames.splice(h + 1, 0, u));
            for (var y = 0; y < l.length; ++y) u.actions.push(o + y);
        }, n.prototype._parseArmature = function(t, a) {
            var i = e.BaseObject.borrowObject(e.ArmatureData);
            if (i.name = n._getString(t, e.DataParser.NAME, ""), i.frameRate = n._getNumber(t, e.DataParser.FRAME_RATE, this._data.frameRate), 
            i.scale = a, e.DataParser.TYPE in t && "string" == typeof t[e.DataParser.TYPE] ? i.type = e.DataParser._getArmatureType(t[e.DataParser.TYPE]) : i.type = n._getNumber(t, e.DataParser.TYPE, 0), 
            0 === i.frameRate && (i.frameRate = 24), this._armature = i, e.DataParser.CANVAS in t) {
                var r = t[e.DataParser.CANVAS], s = e.BaseObject.borrowObject(e.CanvasData);
                e.DataParser.COLOR in r ? s.hasBackground = !0 : s.hasBackground = !1, s.color = n._getNumber(r, e.DataParser.COLOR, 0), 
                s.x = n._getNumber(r, e.DataParser.X, 0) * i.scale, s.y = n._getNumber(r, e.DataParser.Y, 0) * i.scale, 
                s.width = n._getNumber(r, e.DataParser.WIDTH, 0) * i.scale, s.height = n._getNumber(r, e.DataParser.HEIGHT, 0) * i.scale, 
                i.canvas = s;
            }
            if (e.DataParser.AABB in t) {
                var o = t[e.DataParser.AABB];
                i.aabb.x = n._getNumber(o, e.DataParser.X, 0) * i.scale, i.aabb.y = n._getNumber(o, e.DataParser.Y, 0) * i.scale, 
                i.aabb.width = n._getNumber(o, e.DataParser.WIDTH, 0) * i.scale, i.aabb.height = n._getNumber(o, e.DataParser.HEIGHT, 0) * i.scale;
            }
            if (e.DataParser.BONE in t) for (var l = 0, h = t[e.DataParser.BONE]; l < h.length; l++) {
                var u = h[l], _ = n._getString(u, e.DataParser.PARENT, ""), f = this._parseBone(u);
                if (_.length > 0) {
                    var c = i.getBone(_);
                    null !== c ? f.parent = c : (_ in this._cacheBones || (this._cacheBones[_] = []), 
                    this._cacheBones[_].push(f));
                }
                if (f.name in this._cacheBones) {
                    for (var p = 0, m = this._cacheBones[f.name]; p < m.length; p++) m[p].parent = f;
                    delete this._cacheBones[f.name];
                }
                i.addBone(f), this._rawBones.push(f);
            }
            if (e.DataParser.IK in t) for (var d = 0, y = t[e.DataParser.IK]; d < y.length; d++) {
                var g = y[d];
                (M = this._parseIKConstraint(g)) && i.addConstraint(M);
            }
            if (i.sortBones(), e.DataParser.SLOT in t) for (var v = 0, b = 0, D = t[e.DataParser.SLOT]; b < D.length; b++) {
                var T = D[b];
                i.addSlot(this._parseSlot(T, v++));
            }
            if (e.DataParser.SKIN in t) for (var A = 0, P = t[e.DataParser.SKIN]; A < P.length; A++) {
                var O = P[A];
                i.addSkin(this._parseSkin(O));
            }
            if (e.DataParser.PATH_CONSTRAINT in t) for (var S = 0, x = t[e.DataParser.PATH_CONSTRAINT]; S < x.length; S++) {
                var E = x[S], M = this._parsePathConstraint(E);
                M && i.addConstraint(M);
            }
            for (var C = 0, w = this._cacheRawMeshes.length; C < w; ++C) {
                var I = this._cacheRawMeshes[C];
                e.DataParser.GLUE_WEIGHTS in I && e.DataParser.GLUE_MESHES in I && this._parseMeshGlue(I, this._cacheMeshes[C]);
            }
            for (var C = 0, w = this._cacheRawMeshes.length; C < w; ++C) {
                var B = this._cacheRawMeshes[C], F = n._getString(B, e.DataParser.SHARE, "");
                if (0 !== F.length) {
                    var N = n._getString(B, e.DataParser.SKIN, e.DataParser.DEFAULT_NAME);
                    0 === N.length && (N = e.DataParser.DEFAULT_NAME);
                    var R = i.getMesh(N, "", F);
                    null !== R && this._cacheMeshes[C].vertices.shareFrom(R.vertices);
                }
            }
            if (e.DataParser.ANIMATION in t) for (var j = 0, k = t[e.DataParser.ANIMATION]; j < k.length; j++) {
                var L = k[j], V = this._parseAnimation(L);
                i.addAnimation(V);
            }
            if (e.DataParser.DEFAULT_ACTIONS in t) for (var U = 0, Y = X = this._parseActionData(t[e.DataParser.DEFAULT_ACTIONS], 0, null, null); U < Y.length; U++) {
                G = Y[U];
                i.addAction(G, !0), 0 === G.type && null !== (V = i.getAnimation(G.name)) && (i.defaultAnimation = V);
            }
            if (e.DataParser.ACTIONS in t) for (var X = this._parseActionData(t[e.DataParser.ACTIONS], 0, null, null), H = 0, $ = X; H < $.length; H++) {
                var G = $[H];
                i.addAction(G, !1);
            }
            this._rawBones.length = 0, this._cacheRawMeshes.length = 0, this._cacheMeshes.length = 0, 
            this._armature = null;
            for (var W in this._weightSlotPose) delete this._weightSlotPose[W];
            for (var W in this._weightBonePoses) delete this._weightBonePoses[W];
            for (var W in this._cacheBones) delete this._cacheBones[W];
            for (var W in this._slotChildActions) delete this._slotChildActions[W];
            return i;
        }, n.prototype._parseBone = function(t) {
            var a = this._armature.scale;
            if (0 === (e.DataParser.TYPE in t && "string" == typeof t[e.DataParser.TYPE] ? e.DataParser._getBoneType(t[e.DataParser.TYPE]) : n._getNumber(t, e.DataParser.TYPE, 0))) {
                var i = e.BaseObject.borrowObject(e.BoneData);
                return i.inheritTranslation = n._getBoolean(t, e.DataParser.INHERIT_TRANSLATION, !0), 
                i.inheritRotation = n._getBoolean(t, e.DataParser.INHERIT_ROTATION, !0), i.inheritScale = n._getBoolean(t, e.DataParser.INHERIT_SCALE, !0), 
                i.inheritReflection = n._getBoolean(t, e.DataParser.INHERIT_REFLECTION, !0), i.length = n._getNumber(t, e.DataParser.LENGTH, 0) * a, 
                i.name = n._getString(t, e.DataParser.NAME, ""), e.DataParser.TRANSFORM in t && this._parseTransform(t[e.DataParser.TRANSFORM], i.transform, a), 
                i;
            }
            var r = e.BaseObject.borrowObject(e.SurfaceData);
            if (r.name = n._getString(t, e.DataParser.NAME, ""), r.segmentX = n._getNumber(t, e.DataParser.SEGMENT_X, 0), 
            r.segmentY = n._getNumber(t, e.DataParser.SEGMENT_Y, 0), r.vertices.length = (r.segmentX + 1) * (r.segmentY + 1) * 2, 
            e.DataParser.VERTICES in t) for (var s = t[e.DataParser.VERTICES], o = 0, l = r.vertices.length; o < l; ++o) o < s.length ? r.vertices[o] = s[o] * a : r.vertices[o] = 0;
            return r;
        }, n.prototype._parseIKConstraint = function(t) {
            var a = this._armature.getBone(n._getString(t, e.DataParser.BONE, ""));
            if (null === a) return null;
            var i = this._armature.getBone(n._getString(t, e.DataParser.TARGET, ""));
            if (null === i) return null;
            var r = e.BaseObject.borrowObject(e.IKConstraintData);
            return r.scaleEnabled = n._getBoolean(t, e.DataParser.SCALE, !1), r.bendPositive = n._getBoolean(t, e.DataParser.BEND_POSITIVE, !0), 
            r.weight = n._getNumber(t, e.DataParser.WEIGHT, 1), r.name = n._getString(t, e.DataParser.NAME, ""), 
            r.type = 0, r.target = i, n._getNumber(t, e.DataParser.CHAIN, 0) > 0 && null !== a.parent ? (r.root = a.parent, 
            r.bone = a) : (r.root = a, r.bone = null), r;
        }, n.prototype._parsePathConstraint = function(t) {
            var a = this._armature.getSlot(n._getString(t, e.DataParser.TARGET, ""));
            if (null === a) return null;
            var i = this._armature.defaultSkin;
            if (null === i) return null;
            var r = i.getDisplay(a.name, n._getString(t, e.DataParser.TARGET_DISPLAY, a.name));
            if (null === r || !(r instanceof e.PathDisplayData)) return null;
            var s = t[e.DataParser.BONES];
            if (null === s || 0 === s.length) return null;
            var o = e.BaseObject.borrowObject(e.PathConstraintData);
            o.name = n._getString(t, e.DataParser.NAME, ""), o.type = 1, o.pathSlot = a, o.pathDisplayData = r, 
            o.target = a.parent, o.positionMode = e.DataParser._getPositionMode(n._getString(t, e.DataParser.POSITION_MODE, "")), 
            o.spacingMode = e.DataParser._getSpacingMode(n._getString(t, e.DataParser.SPACING_MODE, "")), 
            o.rotateMode = e.DataParser._getRotateMode(n._getString(t, e.DataParser.ROTATE_MODE, "")), 
            o.position = n._getNumber(t, e.DataParser.POSITION, 0), o.spacing = n._getNumber(t, e.DataParser.SPACING, 0), 
            o.rotateOffset = n._getNumber(t, e.DataParser.ROTATE_OFFSET, 0), o.rotateMix = n._getNumber(t, e.DataParser.ROTATE_MIX, 1), 
            o.translateMix = n._getNumber(t, e.DataParser.TRANSLATE_MIX, 1);
            for (var l = 0, h = s; l < h.length; l++) {
                var u = h[l], _ = this._armature.getBone(u);
                null !== _ && (o.AddBone(_), null === o.root && (o.root = _));
            }
            return o;
        }, n.prototype._parseSlot = function(t, a) {
            var i = e.BaseObject.borrowObject(e.SlotData);
            return i.displayIndex = n._getNumber(t, e.DataParser.DISPLAY_INDEX, 0), i.zOrder = a, 
            i.name = n._getString(t, e.DataParser.NAME, ""), i.parent = this._armature.getBone(n._getString(t, e.DataParser.PARENT, "")), 
            e.DataParser.BLEND_MODE in t && "string" == typeof t[e.DataParser.BLEND_MODE] ? i.blendMode = e.DataParser._getBlendMode(t[e.DataParser.BLEND_MODE]) : i.blendMode = n._getNumber(t, e.DataParser.BLEND_MODE, 0), 
            e.DataParser.COLOR in t ? (i.color = e.SlotData.createColor(), this._parseColorTransform(t[e.DataParser.COLOR], i.color)) : i.color = e.SlotData.DEFAULT_COLOR, 
            e.DataParser.ACTIONS in t && (this._slotChildActions[i.name] = this._parseActionData(t[e.DataParser.ACTIONS], 0, null, null)), 
            i;
        }, n.prototype._parseSkin = function(t) {
            var a = e.BaseObject.borrowObject(e.SkinData);
            if (a.name = n._getString(t, e.DataParser.NAME, e.DataParser.DEFAULT_NAME), 0 === a.name.length && (a.name = e.DataParser.DEFAULT_NAME), 
            e.DataParser.SLOT in t) {
                var i = t[e.DataParser.SLOT];
                this._skin = a;
                for (var r = 0, s = i; r < s.length; r++) {
                    var o = s[r], l = n._getString(o, e.DataParser.NAME, ""), h = this._armature.getSlot(l);
                    if (null !== h) {
                        if (this._slot = h, e.DataParser.DISPLAY in o) for (var u = 0, _ = o[e.DataParser.DISPLAY]; u < _.length; u++) {
                            var f = _[u];
                            f ? a.addDisplay(l, this._parseDisplay(f)) : a.addDisplay(l, null);
                        }
                        this._slot = null;
                    }
                }
                this._skin = null;
            }
            return a;
        }, n.prototype._parseDisplay = function(t) {
            var a = n._getString(t, e.DataParser.NAME, ""), i = n._getString(t, e.DataParser.PATH, ""), r = 0, s = null;
            switch (r = e.DataParser.TYPE in t && "string" == typeof t[e.DataParser.TYPE] ? e.DataParser._getDisplayType(t[e.DataParser.TYPE]) : n._getNumber(t, e.DataParser.TYPE, r)) {
              case 0:
                var o = s = e.BaseObject.borrowObject(e.ImageDisplayData);
                o.name = a, o.path = i.length > 0 ? i : a, this._parsePivot(t, o);
                break;

              case 1:
                var l = s = e.BaseObject.borrowObject(e.ArmatureDisplayData);
                if (l.name = a, l.path = i.length > 0 ? i : a, l.inheritAnimation = !0, e.DataParser.ACTIONS in t) for (var h = 0, u = this._parseActionData(t[e.DataParser.ACTIONS], 0, null, null); h < u.length; h++) {
                    p = u[h];
                    l.addAction(p);
                } else if (this._slot.name in this._slotChildActions) {
                    var _ = this._skin.getDisplays(this._slot.name);
                    if (null === _ ? 0 === this._slot.displayIndex : this._slot.displayIndex === _.length) {
                        for (var f = 0, c = this._slotChildActions[this._slot.name]; f < c.length; f++) {
                            var p = c[f];
                            l.addAction(p);
                        }
                        delete this._slotChildActions[this._slot.name];
                    }
                }
                break;

              case 2:
                var m = s = e.BaseObject.borrowObject(e.MeshDisplayData);
                m.vertices.inheritDeform = n._getBoolean(t, e.DataParser.INHERIT_DEFORM, !0), m.name = a, 
                m.path = i.length > 0 ? i : a, m.vertices.data = this._data, e.DataParser.SHARE in t ? (this._cacheRawMeshes.push(t), 
                this._cacheMeshes.push(m)) : this._parseMesh(t, m), e.DataParser.GLUE_WEIGHTS in t && e.DataParser.GLUE_MESHES in t && (this._cacheRawMeshes.push(t), 
                this._cacheMeshes.push(m));
                break;

              case 3:
                var d = this._parseBoundingBox(t);
                if (null !== d) {
                    var y = s = e.BaseObject.borrowObject(e.BoundingBoxDisplayData);
                    y.name = a, y.path = i.length > 0 ? i : a, y.boundingBox = d;
                }
                break;

              case 4:
                var g = t[e.DataParser.LENGTHS], v = s = e.BaseObject.borrowObject(e.PathDisplayData);
                v.closed = n._getBoolean(t, e.DataParser.CLOSED, !1), v.constantSpeed = n._getBoolean(t, e.DataParser.CONSTANT_SPEED, !1), 
                v.name = a, v.path = i.length > 0 ? i : a, v.vertices.data = this._data, v.curveLengths.length = g.length;
                for (var b = 0, D = g.length; b < D; ++b) v.curveLengths[b] = g[b];
                this._parsePath(t, v);
            }
            return null !== s && e.DataParser.TRANSFORM in t && this._parseTransform(t[e.DataParser.TRANSFORM], s.transform, this._armature.scale), 
            s;
        }, n.prototype._parsePath = function(t, a) {
            var i = t[e.DataParser.VERTICES], r = n._getNumber(t, e.DataParser.VERTEX_COUNT, 0), s = this._floatArray.length, o = this._intArray.length;
            if (a.vertices.offset = o, this._intArray.length += 2, this._intArray[o + 0] = r, 
            this._intArray[o + 2] = s, e.DataParser.WEIGHTS in t) {
                var l = t[e.DataParser.WEIGHTS], h = t[e.DataParser.BONES], u = h.length, _ = Math.floor(l.length - r) / 2, f = this._intArray.length, c = this._floatArray.length, p = this._armature.sortedBones, m = e.BaseObject.borrowObject(e.WeightData);
                m.count = _, m.offset = f, this._intArray.length += 2 + u + r + _, this._intArray[f + 0] = u, 
                this._intArray[f + 1] = c;
                for (g = 0; g < u; g++) {
                    var d = h[g], y = this._rawBones[d];
                    m.addBone(y), this._intArray[f + 2 + g] = p.indexOf(y);
                }
                this._floatArray.length += 3 * _;
                for (var g = 0, v = 0, b = 0, D = f + 2 + u, T = c; g < _; g++) {
                    var A = l[v++];
                    this._intArray[D++] = A;
                    for (var P = 0; P < A; P++) {
                        var O = l[v++], S = l[v++], x = i[b++], E = i[b++];
                        this._intArray[D++] = h.indexOf(O), this._floatArray[T++] = S, this._floatArray[T++] = x, 
                        this._floatArray[T++] = E;
                    }
                }
                a.vertices.weight = m;
            } else {
                this._floatArray.length += i.length;
                for (var g = 0, M = i.length; g < M; ++g) this._floatArray[s + g] = i[g];
            }
        }, n.prototype._parsePivot = function(t, a) {
            if (e.DataParser.PIVOT in t) {
                var i = t[e.DataParser.PIVOT];
                a.pivot.x = n._getNumber(i, e.DataParser.X, 0), a.pivot.y = n._getNumber(i, e.DataParser.Y, 0);
            } else a.pivot.x = .5, a.pivot.y = .5;
        }, n.prototype._parseMesh = function(t, a) {
            var i = t[e.DataParser.VERTICES], r = t[e.DataParser.UVS], n = t[e.DataParser.TRIANGLES], s = Math.floor(i.length / 2), o = Math.floor(n.length / 3), l = this._floatArray.length, h = l + 2 * s, u = this._intArray.length, _ = this._skin.name + "_" + this._slot.name + "_" + a.name;
            a.vertices.offset = u, this._intArray.length += 4 + 3 * o, this._intArray[u + 0] = s, 
            this._intArray[u + 1] = o, this._intArray[u + 2] = l;
            for (var f = 0, c = 3 * o; f < c; ++f) this._intArray[u + 4 + f] = n[f];
            this._floatArray.length += 2 * s + 2 * s;
            for (var f = 0, c = 2 * s; f < c; ++f) this._floatArray[l + f] = i[f], this._floatArray[h + f] = r[f];
            if (e.DataParser.WEIGHTS in t) {
                var p = t[e.DataParser.WEIGHTS], m = t[e.DataParser.SLOT_POSE], d = t[e.DataParser.BONE_POSE], y = this._armature.sortedBones, g = new Array(), v = Math.floor(d.length / 7), b = this._floatArray.length, D = Math.floor(p.length - s) / 2, T = this._intArray.length, A = e.BaseObject.borrowObject(e.WeightData);
                A.count = D, A.offset = T, g.length = v, this._intArray.length += 2 + v + s + D, 
                this._intArray[T + 1] = b;
                for (f = 0; f < v; ++f) {
                    var P = d[7 * f], O = this._rawBones[P];
                    A.addBone(O), g[f] = P, this._intArray[T + 2 + f] = y.indexOf(O);
                }
                this._floatArray.length += 3 * D, this._helpMatrixA.copyFromArray(m, 0);
                for (var f = 0, S = 0, x = T + 2 + v, E = b; f < s; ++f) {
                    var M = 2 * f, C = this._intArray[x++] = p[S++], w = this._floatArray[l + M], I = this._floatArray[l + M + 1];
                    this._helpMatrixA.transformPoint(w, I, this._helpPoint), w = this._helpPoint.x, 
                    I = this._helpPoint.y;
                    for (var B = 0; B < C; ++B) {
                        var P = p[S++], F = g.indexOf(P);
                        this._helpMatrixB.copyFromArray(d, 7 * F + 1), this._helpMatrixB.invert(), this._helpMatrixB.transformPoint(w, I, this._helpPoint), 
                        this._intArray[x++] = F, this._floatArray[E++] = p[S++], this._floatArray[E++] = this._helpPoint.x, 
                        this._floatArray[E++] = this._helpPoint.y;
                    }
                }
                a.vertices.weight = A, this._weightSlotPose[_] = m, this._weightBonePoses[_] = d;
            }
        }, n.prototype._parseMeshGlue = function(t, e) {}, n.prototype._parseBoundingBox = function(t) {
            var a = null, i = 0;
            switch (i = e.DataParser.SUB_TYPE in t && "string" == typeof t[e.DataParser.SUB_TYPE] ? e.DataParser._getBoundingBoxType(t[e.DataParser.SUB_TYPE]) : n._getNumber(t, e.DataParser.SUB_TYPE, i)) {
              case 0:
                a = e.BaseObject.borrowObject(e.RectangleBoundingBoxData);
                break;

              case 1:
                a = e.BaseObject.borrowObject(e.EllipseBoundingBoxData);
                break;

              case 2:
                a = this._parsePolygonBoundingBox(t);
            }
            return null !== a && (a.color = n._getNumber(t, e.DataParser.COLOR, 0), 0 !== a.type && 1 !== a.type || (a.width = n._getNumber(t, e.DataParser.WIDTH, 0), 
            a.height = n._getNumber(t, e.DataParser.HEIGHT, 0))), a;
        }, n.prototype._parsePolygonBoundingBox = function(t) {
            var a = e.BaseObject.borrowObject(e.PolygonBoundingBoxData);
            if (e.DataParser.VERTICES in t) {
                var i = this._armature.scale, r = t[e.DataParser.VERTICES], n = a.vertices;
                e.DragonBones.webAssembly ? n.resize(r.length, 0) : n.length = r.length;
                for (var s = 0, o = r.length; s < o; s += 2) {
                    var l = r[s] * i, h = r[s + 1] * i;
                    e.DragonBones.webAssembly ? (n.set(s, l), n.set(s + 1, h)) : (n[s] = l, n[s + 1] = h), 
                    0 === s ? (a.x = l, a.y = h, a.width = l, a.height = h) : (l < a.x ? a.x = l : l > a.width && (a.width = l), 
                    h < a.y ? a.y = h : h > a.height && (a.height = h));
                }
                a.width -= a.x, a.height -= a.y;
            } else console.warn("Data error.\n Please reexport DragonBones Data to fixed the bug.");
            return a;
        }, n.prototype._parseAnimation = function(t) {
            var a = e.BaseObject.borrowObject(e.AnimationData);
            if (a.frameCount = Math.max(n._getNumber(t, e.DataParser.DURATION, 1), 1), a.playTimes = n._getNumber(t, e.DataParser.PLAY_TIMES, 1), 
            a.duration = a.frameCount / this._armature.frameRate, a.fadeInTime = n._getNumber(t, e.DataParser.FADE_IN_TIME, 0), 
            a.scale = n._getNumber(t, e.DataParser.SCALE, 1), a.name = n._getString(t, e.DataParser.NAME, e.DataParser.DEFAULT_NAME), 
            0 === a.name.length && (a.name = e.DataParser.DEFAULT_NAME), a.frameIntOffset = this._frameIntArray.length, 
            a.frameFloatOffset = this._frameFloatArray.length, a.frameOffset = this._frameArray.length, 
            this._animation = a, e.DataParser.FRAME in t) {
                var i = t[e.DataParser.FRAME], r = i.length;
                if (r > 0) for (var s = 0, o = 0; s < r; ++s) {
                    var l = i[s];
                    this._parseActionDataInFrame(l, o, null, null), o += n._getNumber(l, e.DataParser.DURATION, 1);
                }
            }
            if (e.DataParser.Z_ORDER in t && (this._animation.zOrderTimeline = this._parseTimeline(t[e.DataParser.Z_ORDER], null, e.DataParser.FRAME, 1, !1, !1, 0, this._parseZOrderFrame)), 
            e.DataParser.BONE in t) for (var h = 0, u = S = t[e.DataParser.BONE]; h < u.length; h++) {
                c = u[h];
                this._parseBoneTimeline(c);
            }
            if (e.DataParser.SURFACE in t) for (var _ = 0, f = S = t[e.DataParser.SURFACE]; _ < f.length; _++) {
                var c = f[_], p = n._getString(c, e.DataParser.NAME, "");
                this._surface = this._armature.getBone(p), null !== this._surface && (null !== (C = this._parseTimeline(c, null, e.DataParser.FRAME, 50, !1, !0, 0, this._parseSurfaceFrame)) && this._animation.addSurfaceTimeline(this._surface, C), 
                this._surface = null);
            }
            if (e.DataParser.SLOT in t) for (var m = 0, d = S = t[e.DataParser.SLOT]; m < d.length; m++) {
                c = d[m];
                this._parseSlotTimeline(c);
            }
            if (e.DataParser.FFD in t) for (var y = 0, g = S = t[e.DataParser.FFD]; y < g.length; y++) {
                var c = g[y], v = n._getString(c, e.DataParser.SKIN, e.DataParser.DEFAULT_NAME), b = n._getString(c, e.DataParser.SLOT, ""), D = n._getString(c, e.DataParser.NAME, "");
                0 === v.length && (v = e.DataParser.DEFAULT_NAME), this._slot = this._armature.getSlot(b), 
                this._mesh = this._armature.getMesh(v, b, D), null !== this._slot && null !== this._mesh && (null !== (C = this._parseTimeline(c, null, e.DataParser.FRAME, 22, !1, !0, 0, this._parseSlotFFDFrame)) && this._animation.addSlotTimeline(this._slot, C), 
                this._slot = null, this._mesh = null);
            }
            if (e.DataParser.IK in t) for (var T = 0, A = S = t[e.DataParser.IK]; T < A.length; T++) {
                var c = A[T], P = n._getString(c, e.DataParser.NAME, ""), O = this._armature.getConstraint(P);
                null !== O && (null !== (C = this._parseTimeline(c, null, e.DataParser.FRAME, 30, !0, !1, 2, this._parseIKConstraintFrame)) && this._animation.addConstraintTimeline(O, C));
            }
            if (e.DataParser.ANIMATION in t) for (var S = t[e.DataParser.ANIMATION], x = 0, E = S; x < E.length; x++) {
                var c = E[x], M = n._getString(c, e.DataParser.NAME, ""), C = this._parseTimeline(c, null, e.DataParser.FRAME, 40, !0, !1, 2, this._parseAnimationFrame);
                null !== C && this._animation.addAnimationTimeline(M, C);
            }
            return this._actionFrames.length > 0 && (this._animation.actionTimeline = this._parseTimeline(null, this._actionFrames, "", 0, !1, !1, 0, this._parseActionFrame), 
            this._actionFrames.length = 0), this._animation = null, a;
        }, n.prototype._parseTimeline = function(t, a, i, s, o, l, h, u) {
            if (null !== t && i.length > 0 && i in t && (a = t[i]), null === a) return null;
            var _ = a.length;
            if (0 === _) return null;
            var f = this._frameIntArray.length, c = this._frameFloatArray.length, p = e.BaseObject.borrowObject(e.TimelineData), m = this._timelineArray.length;
            if (this._timelineArray.length += 5 + _, null !== t ? (this._timelineArray[m + 0] = Math.round(100 * n._getNumber(t, e.DataParser.SCALE, 1)), 
            this._timelineArray[m + 1] = Math.round(100 * n._getNumber(t, e.DataParser.OFFSET, 0))) : (this._timelineArray[m + 0] = 100, 
            this._timelineArray[m + 1] = 0), this._timelineArray[m + 2] = _, this._timelineArray[m + 3] = h, 
            this._timelineArray[m + 4] = o ? f - this._animation.frameIntOffset : l ? c - this._animation.frameFloatOffset : 0, 
            this._timeline = p, p.type = s, p.offset = m, 1 === _) p.frameIndicesOffset = -1, 
            this._timelineArray[m + 5 + 0] = u.call(this, a[0], 0, 0) - this._animation.frameOffset; else {
                var d = this._animation.frameCount + 1, y = this._data.frameIndices, g = 0;
                e.DragonBones.webAssembly ? (g = y.size(), y.resize(g + d, 0)) : (g = y.length, 
                y.length += d), p.frameIndicesOffset = g;
                for (var v = 0, b = 0, D = 0, T = 0; v < d; ++v) {
                    if (D + T <= v && b < _) {
                        var A = a[b];
                        D = v, T = b === _ - 1 ? this._animation.frameCount - D : A instanceof r ? this._actionFrames[b + 1].frameStart - D : n._getNumber(A, e.DataParser.DURATION, 1), 
                        this._timelineArray[m + 5 + b] = u.call(this, A, D, T) - this._animation.frameOffset, 
                        b++;
                    }
                    e.DragonBones.webAssembly ? y.set(g + v, b - 1) : y[g + v] = b - 1;
                }
            }
            return this._timeline = null, p;
        }, n.prototype._parseBoneTimeline = function(t) {
            var a = this._armature.getBone(n._getString(t, e.DataParser.NAME, ""));
            if (null !== a) {
                if (this._bone = a, this._slot = this._armature.getSlot(this._bone.name), e.DataParser.TRANSLATE_FRAME in t && null !== (i = this._parseTimeline(t, null, e.DataParser.TRANSLATE_FRAME, 11, !1, !0, 2, this._parseBoneTranslateFrame)) && this._animation.addBoneTimeline(a, i), 
                e.DataParser.ROTATE_FRAME in t && null !== (i = this._parseTimeline(t, null, e.DataParser.ROTATE_FRAME, 12, !1, !0, 2, this._parseBoneRotateFrame)) && this._animation.addBoneTimeline(a, i), 
                e.DataParser.SCALE_FRAME in t && null !== (i = this._parseTimeline(t, null, e.DataParser.SCALE_FRAME, 13, !1, !0, 2, this._parseBoneScaleFrame)) && this._animation.addBoneTimeline(a, i), 
                e.DataParser.FRAME in t) {
                    var i = this._parseTimeline(t, null, e.DataParser.FRAME, 10, !1, !0, 6, this._parseBoneAllFrame);
                    null !== i && this._animation.addBoneTimeline(a, i);
                }
                this._bone = null, this._slot = null;
            }
        }, n.prototype._parseSlotTimeline = function(t) {
            var a = this._armature.getSlot(n._getString(t, e.DataParser.NAME, ""));
            if (null !== a) {
                this._slot = a;
                var i = null;
                null !== (i = e.DataParser.DISPLAY_FRAME in t ? this._parseTimeline(t, null, e.DataParser.DISPLAY_FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame) : this._parseTimeline(t, null, e.DataParser.FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame)) && this._animation.addSlotTimeline(a, i);
                var r = null;
                null !== (r = e.DataParser.COLOR_FRAME in t ? this._parseTimeline(t, null, e.DataParser.COLOR_FRAME, 21, !0, !1, 1, this._parseSlotColorFrame) : this._parseTimeline(t, null, e.DataParser.FRAME, 21, !0, !1, 1, this._parseSlotColorFrame)) && this._animation.addSlotTimeline(a, r), 
                this._slot = null;
            }
        }, n.prototype._parseFrame = function(t, e, a) {
            var i = this._frameArray.length;
            return this._frameArray.length += 1, this._frameArray[i + 0] = e, i;
        }, n.prototype._parseTweenFrame = function(t, a, i) {
            var r = this._parseFrame(t, a, i);
            if (i > 0) if (e.DataParser.CURVE in t) {
                var s = i + 1;
                this._helpArray.length = s, this._samplingEasingCurve(t[e.DataParser.CURVE], this._helpArray), 
                this._frameArray.length += 2 + this._helpArray.length, this._frameArray[r + 1] = 2, 
                this._frameArray[r + 2] = s;
                for (var o = 0; o < s; ++o) this._frameArray[r + 3 + o] = Math.round(1e4 * this._helpArray[o]);
            } else {
                var l = -2;
                e.DataParser.TWEEN_EASING in t && (l = n._getNumber(t, e.DataParser.TWEEN_EASING, -2)), 
                -2 === l ? (this._frameArray.length += 1, this._frameArray[r + 1] = 0) : 0 === l ? (this._frameArray.length += 1, 
                this._frameArray[r + 1] = 1) : l < 0 ? (this._frameArray.length += 2, this._frameArray[r + 1] = 3, 
                this._frameArray[r + 2] = Math.round(100 * -l)) : l <= 1 ? (this._frameArray.length += 2, 
                this._frameArray[r + 1] = 4, this._frameArray[r + 2] = Math.round(100 * l)) : (this._frameArray.length += 2, 
                this._frameArray[r + 1] = 5, this._frameArray[r + 2] = Math.round(100 * l - 100));
            } else this._frameArray.length += 1, this._frameArray[r + 1] = 0;
            return r;
        }, n.prototype._parseActionFrame = function(t, e, a) {
            var i = this._frameArray.length, r = t.actions.length;
            this._frameArray.length += 2 + r, this._frameArray[i + 0] = e, this._frameArray[i + 0 + 1] = r;
            for (var n = 0; n < r; ++n) this._frameArray[i + 0 + 2 + n] = t.actions[n];
            return i;
        }, n.prototype._parseZOrderFrame = function(t, a, i) {
            var r = this._parseFrame(t, a, i);
            if (e.DataParser.Z_ORDER in t) {
                var n = t[e.DataParser.Z_ORDER];
                if (n.length > 0) {
                    for (var s = this._armature.sortedSlots.length, o = new Array(s - n.length / 2), l = new Array(s), h = 0; h < o.length; ++h) o[h] = 0;
                    for (var u = 0; u < s; ++u) l[u] = -1;
                    for (var _ = 0, f = 0, c = 0, p = n.length; c < p; c += 2) {
                        for (var m = n[c], d = n[c + 1]; _ !== m; ) o[f++] = _++;
                        l[_ + d] = _++;
                    }
                    for (;_ < s; ) o[f++] = _++;
                    this._frameArray.length += 1 + s, this._frameArray[r + 1] = s;
                    for (var y = s; y--; ) -1 === l[y] ? this._frameArray[r + 2 + y] = o[--f] || 0 : this._frameArray[r + 2 + y] = l[y] || 0;
                    return r;
                }
            }
            return this._frameArray.length += 1, this._frameArray[r + 1] = 0, r;
        }, n.prototype._parseBoneAllFrame = function(t, a, i) {
            this._helpTransform.identity(), e.DataParser.TRANSFORM in t && this._parseTransform(t[e.DataParser.TRANSFORM], this._helpTransform, 1);
            var r = this._helpTransform.rotation;
            0 !== a && (0 === this._prevClockwise ? r = this._prevRotation + e.Transform.normalizeRadian(r - this._prevRotation) : ((this._prevClockwise > 0 ? r >= this._prevRotation : r <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1), 
            r = this._prevRotation + r - this._prevRotation + e.Transform.PI_D * this._prevClockwise)), 
            this._prevClockwise = n._getNumber(t, e.DataParser.TWEEN_ROTATE, 0), this._prevRotation = r;
            var s = this._parseTweenFrame(t, a, i), o = this._frameFloatArray.length;
            return this._frameFloatArray.length += 6, this._frameFloatArray[o++] = this._helpTransform.x, 
            this._frameFloatArray[o++] = this._helpTransform.y, this._frameFloatArray[o++] = r, 
            this._frameFloatArray[o++] = this._helpTransform.skew, this._frameFloatArray[o++] = this._helpTransform.scaleX, 
            this._frameFloatArray[o++] = this._helpTransform.scaleY, this._parseActionDataInFrame(t, a, this._bone, this._slot), 
            s;
        }, n.prototype._parseBoneTranslateFrame = function(t, a, i) {
            var r = this._parseTweenFrame(t, a, i), s = this._frameFloatArray.length;
            return this._frameFloatArray.length += 2, this._frameFloatArray[s++] = n._getNumber(t, e.DataParser.X, 0), 
            this._frameFloatArray[s++] = n._getNumber(t, e.DataParser.Y, 0), r;
        }, n.prototype._parseBoneRotateFrame = function(t, a, i) {
            var r = n._getNumber(t, e.DataParser.ROTATE, 0) * e.Transform.DEG_RAD;
            0 !== a && (0 === this._prevClockwise ? r = this._prevRotation + e.Transform.normalizeRadian(r - this._prevRotation) : ((this._prevClockwise > 0 ? r >= this._prevRotation : r <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1), 
            r = this._prevRotation + r - this._prevRotation + e.Transform.PI_D * this._prevClockwise)), 
            this._prevClockwise = n._getNumber(t, e.DataParser.CLOCK_WISE, 0), this._prevRotation = r;
            var s = this._parseTweenFrame(t, a, i), o = this._frameFloatArray.length;
            return this._frameFloatArray.length += 2, this._frameFloatArray[o++] = r, this._frameFloatArray[o++] = n._getNumber(t, e.DataParser.SKEW, 0) * e.Transform.DEG_RAD, 
            s;
        }, n.prototype._parseBoneScaleFrame = function(t, a, i) {
            var r = this._parseTweenFrame(t, a, i), s = this._frameFloatArray.length;
            return this._frameFloatArray.length += 2, this._frameFloatArray[s++] = n._getNumber(t, e.DataParser.X, 1), 
            this._frameFloatArray[s++] = n._getNumber(t, e.DataParser.Y, 1), r;
        }, n.prototype._parseSurfaceFrame = function(t, a, i) {
            var r = this._frameFloatArray.length, s = this._parseTweenFrame(t, a, i), o = t[e.DataParser.VERTICES], l = n._getNumber(t, e.DataParser.OFFSET, 0), h = this._surface.vertices.length / 2, u = 0, _ = 0;
            this._frameFloatArray.length += 2 * h;
            for (var f = 0; f < 2 * h; f += 2) u = f < l || f - l >= o.length ? 0 : o[f - l], 
            _ = f + 1 < l || f + 1 - l >= o.length ? 0 : o[f + 1 - l], this._frameFloatArray[r + f] = u, 
            this._frameFloatArray[r + f + 1] = _;
            if (0 === a) {
                var c = this._frameIntArray.length;
                this._frameIntArray.length += 5, this._frameIntArray[c + 0] = 0, this._frameIntArray[c + 1] = this._frameFloatArray.length - r, 
                this._frameIntArray[c + 2] = this._frameFloatArray.length - r, this._frameIntArray[c + 3] = 0, 
                this._frameIntArray[c + 4] = r - this._animation.frameFloatOffset, this._timelineArray[this._timeline.offset + 3] = c - this._animation.frameIntOffset;
            }
            return s;
        }, n.prototype._parseSlotDisplayFrame = function(t, a, i) {
            var r = this._parseFrame(t, a, i);
            return this._frameArray.length += 1, e.DataParser.VALUE in t ? this._frameArray[r + 1] = n._getNumber(t, e.DataParser.VALUE, 0) : this._frameArray[r + 1] = n._getNumber(t, e.DataParser.DISPLAY_INDEX, 0), 
            this._parseActionDataInFrame(t, a, this._slot.parent, this._slot), r;
        }, n.prototype._parseSlotColorFrame = function(t, a, i) {
            var r = this._parseTweenFrame(t, a, i), n = -1;
            if (e.DataParser.VALUE in t || e.DataParser.COLOR in t) {
                var s = e.DataParser.VALUE in t ? t[e.DataParser.VALUE] : t[e.DataParser.COLOR];
                for (var o in s) {
                    this._parseColorTransform(s, this._helpColorTransform), n = this._intArray.length, 
                    this._intArray.length += 8, this._intArray[n++] = Math.round(100 * this._helpColorTransform.alphaMultiplier), 
                    this._intArray[n++] = Math.round(100 * this._helpColorTransform.redMultiplier), 
                    this._intArray[n++] = Math.round(100 * this._helpColorTransform.greenMultiplier), 
                    this._intArray[n++] = Math.round(100 * this._helpColorTransform.blueMultiplier), 
                    this._intArray[n++] = Math.round(this._helpColorTransform.alphaOffset), this._intArray[n++] = Math.round(this._helpColorTransform.redOffset), 
                    this._intArray[n++] = Math.round(this._helpColorTransform.greenOffset), this._intArray[n++] = Math.round(this._helpColorTransform.blueOffset), 
                    n -= 8;
                    break;
                }
            }
            n < 0 && (this._defaultColorOffset < 0 && (this._defaultColorOffset = n = this._intArray.length, 
            this._intArray.length += 8, this._intArray[n++] = 100, this._intArray[n++] = 100, 
            this._intArray[n++] = 100, this._intArray[n++] = 100, this._intArray[n++] = 0, this._intArray[n++] = 0, 
            this._intArray[n++] = 0, this._intArray[n++] = 0), n = this._defaultColorOffset);
            var l = this._frameIntArray.length;
            return this._frameIntArray.length += 1, this._frameIntArray[l] = n, r;
        }, n.prototype._parseSlotFFDFrame = function(t, a, i) {
            var r = this._frameFloatArray.length, s = this._parseTweenFrame(t, a, i), o = e.DataParser.VERTICES in t ? t[e.DataParser.VERTICES] : null, l = n._getNumber(t, e.DataParser.OFFSET, 0), h = this._intArray[this._mesh.vertices.offset + 0], u = this._mesh.parent.name + "_" + this._slot.name + "_" + this._mesh.name, _ = this._mesh.vertices.weight, f = 0, c = 0, p = 0, m = 0;
            if (null !== _) {
                var d = this._weightSlotPose[u];
                this._helpMatrixA.copyFromArray(d, 0), this._frameFloatArray.length += 2 * _.count, 
                p = _.offset + 2 + _.bones.length;
            } else this._frameFloatArray.length += 2 * h;
            for (var y = 0; y < 2 * h; y += 2) if (null === o ? (f = 0, c = 0) : (f = y < l || y - l >= o.length ? 0 : o[y - l], 
            c = y + 1 < l || y + 1 - l >= o.length ? 0 : o[y + 1 - l]), null !== _) {
                var g = this._weightBonePoses[u], v = this._intArray[p++];
                this._helpMatrixA.transformPoint(f, c, this._helpPoint, !0), f = this._helpPoint.x, 
                c = this._helpPoint.y;
                for (var b = 0; b < v; ++b) {
                    var D = this._intArray[p++];
                    this._helpMatrixB.copyFromArray(g, 7 * D + 1), this._helpMatrixB.invert(), this._helpMatrixB.transformPoint(f, c, this._helpPoint, !0), 
                    this._frameFloatArray[r + m++] = this._helpPoint.x, this._frameFloatArray[r + m++] = this._helpPoint.y;
                }
            } else this._frameFloatArray[r + y] = f, this._frameFloatArray[r + y + 1] = c;
            if (0 === a) {
                var T = this._frameIntArray.length;
                this._frameIntArray.length += 5, this._frameIntArray[T + 0] = this._mesh.vertices.offset, 
                this._frameIntArray[T + 1] = this._frameFloatArray.length - r, this._frameIntArray[T + 2] = this._frameFloatArray.length - r, 
                this._frameIntArray[T + 3] = 0, this._frameIntArray[T + 4] = r - this._animation.frameFloatOffset, 
                this._timelineArray[this._timeline.offset + 3] = T - this._animation.frameIntOffset;
            }
            return s;
        }, n.prototype._parseIKConstraintFrame = function(t, a, i) {
            var r = this._parseTweenFrame(t, a, i), s = this._frameIntArray.length;
            return this._frameIntArray.length += 2, this._frameIntArray[s++] = n._getBoolean(t, e.DataParser.BEND_POSITIVE, !0) ? 1 : 0, 
            this._frameIntArray[s++] = Math.round(100 * n._getNumber(t, e.DataParser.WEIGHT, 1)), 
            r;
        }, n.prototype._parseAnimationFrame = function(t, a, i) {
            var r = this._parseTweenFrame(t, a, i), s = this._frameIntArray.length;
            return this._frameIntArray.length += 2, this._frameIntArray[s++] = n._getNumber(t, e.DataParser.VALUE, 0), 
            this._frameIntArray[s++] = Math.round(100 * n._getNumber(t, e.DataParser.WEIGHT, 1)), 
            r;
        }, n.prototype._parseActionData = function(t, a, i, r) {
            var s = new Array();
            if ("string" == typeof t) (u = e.BaseObject.borrowObject(e.ActionData)).type = a, 
            u.name = t, u.bone = i, u.slot = r, s.push(u); else if (t instanceof Array) for (var o = 0, l = t; o < l.length; o++) {
                var h = l[o], u = e.BaseObject.borrowObject(e.ActionData);
                if (e.DataParser.GOTO_AND_PLAY in h ? (u.type = 0, u.name = n._getString(h, e.DataParser.GOTO_AND_PLAY, "")) : (e.DataParser.TYPE in h && "string" == typeof h[e.DataParser.TYPE] ? u.type = e.DataParser._getActionType(h[e.DataParser.TYPE]) : u.type = n._getNumber(h, e.DataParser.TYPE, a), 
                u.name = n._getString(h, e.DataParser.NAME, "")), e.DataParser.BONE in h) {
                    var _ = n._getString(h, e.DataParser.BONE, "");
                    u.bone = this._armature.getBone(_);
                } else u.bone = i;
                if (e.DataParser.SLOT in h) {
                    var f = n._getString(h, e.DataParser.SLOT, "");
                    u.slot = this._armature.getSlot(f);
                } else u.slot = r;
                var c = null;
                if (e.DataParser.INTS in h) {
                    null === c && (c = e.BaseObject.borrowObject(e.UserData));
                    for (var p = 0, m = h[e.DataParser.INTS]; p < m.length; p++) {
                        b = m[p];
                        c.addInt(b);
                    }
                }
                if (e.DataParser.FLOATS in h) {
                    null === c && (c = e.BaseObject.borrowObject(e.UserData));
                    for (var d = 0, y = h[e.DataParser.FLOATS]; d < y.length; d++) {
                        b = y[d];
                        c.addFloat(b);
                    }
                }
                if (e.DataParser.STRINGS in h) {
                    null === c && (c = e.BaseObject.borrowObject(e.UserData));
                    for (var g = 0, v = h[e.DataParser.STRINGS]; g < v.length; g++) {
                        var b = v[g];
                        c.addString(b);
                    }
                }
                u.data = c, s.push(u);
            }
            return s;
        }, n.prototype._parseTransform = function(t, a, i) {
            a.x = n._getNumber(t, e.DataParser.X, 0) * i, a.y = n._getNumber(t, e.DataParser.Y, 0) * i, 
            e.DataParser.ROTATE in t || e.DataParser.SKEW in t ? (a.rotation = e.Transform.normalizeRadian(n._getNumber(t, e.DataParser.ROTATE, 0) * e.Transform.DEG_RAD), 
            a.skew = e.Transform.normalizeRadian(n._getNumber(t, e.DataParser.SKEW, 0) * e.Transform.DEG_RAD)) : (e.DataParser.SKEW_X in t || e.DataParser.SKEW_Y in t) && (a.rotation = e.Transform.normalizeRadian(n._getNumber(t, e.DataParser.SKEW_Y, 0) * e.Transform.DEG_RAD), 
            a.skew = e.Transform.normalizeRadian(n._getNumber(t, e.DataParser.SKEW_X, 0) * e.Transform.DEG_RAD) - a.rotation), 
            a.scaleX = n._getNumber(t, e.DataParser.SCALE_X, 1), a.scaleY = n._getNumber(t, e.DataParser.SCALE_Y, 1);
        }, n.prototype._parseColorTransform = function(t, a) {
            a.alphaMultiplier = .01 * n._getNumber(t, e.DataParser.ALPHA_MULTIPLIER, 100), a.redMultiplier = .01 * n._getNumber(t, e.DataParser.RED_MULTIPLIER, 100), 
            a.greenMultiplier = .01 * n._getNumber(t, e.DataParser.GREEN_MULTIPLIER, 100), a.blueMultiplier = .01 * n._getNumber(t, e.DataParser.BLUE_MULTIPLIER, 100), 
            a.alphaOffset = n._getNumber(t, e.DataParser.ALPHA_OFFSET, 0), a.redOffset = n._getNumber(t, e.DataParser.RED_OFFSET, 0), 
            a.greenOffset = n._getNumber(t, e.DataParser.GREEN_OFFSET, 0), a.blueOffset = n._getNumber(t, e.DataParser.BLUE_OFFSET, 0);
        }, n.prototype._parseArray = function(t) {
            this._intArray.length = 0, this._floatArray.length = 0, this._frameIntArray.length = 0, 
            this._frameFloatArray.length = 0, this._frameArray.length = 0, this._timelineArray.length = 0;
        }, n.prototype._modifyArray = function() {
            this._intArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._intArray.push(0), 
            this._frameIntArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameIntArray.push(0), 
            this._frameArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameArray.push(0), 
            this._timelineArray.length % Uint16Array.BYTES_PER_ELEMENT != 0 && this._timelineArray.push(0);
            var t = this._intArray.length * Int16Array.BYTES_PER_ELEMENT, a = this._floatArray.length * Float32Array.BYTES_PER_ELEMENT, i = this._frameIntArray.length * Int16Array.BYTES_PER_ELEMENT, r = this._frameFloatArray.length * Float32Array.BYTES_PER_ELEMENT, n = this._frameArray.length * Int16Array.BYTES_PER_ELEMENT, s = this._timelineArray.length * Uint16Array.BYTES_PER_ELEMENT, o = t + a + i + r + n + s;
            if (e.DragonBones.webAssembly) {
                for (var l = e.webAssemblyModule.HEAP16.buffer, h = e.webAssemblyModule._malloc(o), u = new Int16Array(l, h, this._intArray.length), _ = new Float32Array(l, h + t, this._floatArray.length), f = new Int16Array(l, h + t + a, this._frameIntArray.length), c = new Float32Array(l, h + t + a + i, this._frameFloatArray.length), p = new Int16Array(l, h + t + a + i + r, this._frameArray.length), m = new Uint16Array(l, h + t + a + i + r + n, this._timelineArray.length), d = 0, y = this._intArray.length; d < y; ++d) u[d] = this._intArray[d];
                for (var d = 0, y = this._floatArray.length; d < y; ++d) _[d] = this._floatArray[d];
                for (var d = 0, y = this._frameIntArray.length; d < y; ++d) f[d] = this._frameIntArray[d];
                for (var d = 0, y = this._frameFloatArray.length; d < y; ++d) c[d] = this._frameFloatArray[d];
                for (var d = 0, y = this._frameArray.length; d < y; ++d) p[d] = this._frameArray[d];
                for (var d = 0, y = this._timelineArray.length; d < y; ++d) m[d] = this._timelineArray[d];
                e.webAssemblyModule.setDataBinary(this._data, h, t, a, i, r, n, s);
            } else {
                for (var g = new ArrayBuffer(o), u = new Int16Array(g, 0, this._intArray.length), _ = new Float32Array(g, t, this._floatArray.length), f = new Int16Array(g, t + a, this._frameIntArray.length), c = new Float32Array(g, t + a + i, this._frameFloatArray.length), p = new Int16Array(g, t + a + i + r, this._frameArray.length), m = new Uint16Array(g, t + a + i + r + n, this._timelineArray.length), d = 0, y = this._intArray.length; d < y; ++d) u[d] = this._intArray[d];
                for (var d = 0, y = this._floatArray.length; d < y; ++d) _[d] = this._floatArray[d];
                for (var d = 0, y = this._frameIntArray.length; d < y; ++d) f[d] = this._frameIntArray[d];
                for (var d = 0, y = this._frameFloatArray.length; d < y; ++d) c[d] = this._frameFloatArray[d];
                for (var d = 0, y = this._frameArray.length; d < y; ++d) p[d] = this._frameArray[d];
                for (var d = 0, y = this._timelineArray.length; d < y; ++d) m[d] = this._timelineArray[d];
                this._data.binary = g, this._data.intArray = u, this._data.floatArray = _, this._data.frameIntArray = f, 
                this._data.frameFloatArray = c, this._data.frameArray = p, this._data.timelineArray = m;
            }
            this._defaultColorOffset = -1;
        }, n.prototype.parseDragonBonesData = function(t, a) {
            void 0 === a && (a = 1), console.assert(null !== t && void 0 !== t, "Data error.");
            var i = n._getString(t, e.DataParser.VERSION, ""), r = n._getString(t, e.DataParser.COMPATIBLE_VERSION, "");
            if (e.DataParser.DATA_VERSIONS.indexOf(i) >= 0 || e.DataParser.DATA_VERSIONS.indexOf(r) >= 0) {
                var s = e.BaseObject.borrowObject(e.DragonBonesData);
                if (s.version = i, s.name = n._getString(t, e.DataParser.NAME, ""), s.frameRate = n._getNumber(t, e.DataParser.FRAME_RATE, 24), 
                0 === s.frameRate && (s.frameRate = 24), e.DataParser.ARMATURE in t) {
                    this._data = s, this._parseArray(t);
                    for (var o = 0, l = t[e.DataParser.ARMATURE]; o < l.length; o++) {
                        var h = l[o];
                        s.addArmature(this._parseArmature(h, a));
                    }
                    this._data.binary || this._modifyArray(), e.DataParser.STAGE in t ? s.stage = s.getArmature(n._getString(t, e.DataParser.STAGE, "")) : s.armatureNames.length > 0 && (s.stage = s.getArmature(s.armatureNames[0])), 
                    this._data = null;
                }
                return e.DataParser.TEXTURE_ATLAS in t && (this._rawTextureAtlases = t[e.DataParser.TEXTURE_ATLAS]), 
                s;
            }
            return console.assert(!1, "Nonsupport data version: " + i + "\nPlease convert DragonBones data to support version.\nRead more: https://github.com/DragonBones/Tools/"), 
            null;
        }, n.prototype.parseTextureAtlasData = function(t, a, i) {
            if (void 0 === i && (i = 1), console.assert(void 0 !== t), null === t) {
                if (null === this._rawTextureAtlases || 0 === this._rawTextureAtlases.length) return !1;
                var r = this._rawTextureAtlases[this._rawTextureAtlasIndex++];
                return this.parseTextureAtlasData(r, a, i), this._rawTextureAtlasIndex >= this._rawTextureAtlases.length && (this._rawTextureAtlasIndex = 0, 
                this._rawTextureAtlases = null), !0;
            }
            if (a.width = n._getNumber(t, e.DataParser.WIDTH, 0), a.height = n._getNumber(t, e.DataParser.HEIGHT, 0), 
            a.scale = 1 === i ? 1 / n._getNumber(t, e.DataParser.SCALE, 1) : i, a.name = n._getString(t, e.DataParser.NAME, ""), 
            a.imagePath = n._getString(t, e.DataParser.IMAGE_PATH, ""), e.DataParser.SUB_TEXTURE in t) for (var s = t[e.DataParser.SUB_TEXTURE], o = 0, l = s.length; o < l; ++o) {
                var h = s[o], u = a.createTexture();
                u.rotated = n._getBoolean(h, e.DataParser.ROTATED, !1), u.name = n._getString(h, e.DataParser.NAME, ""), 
                u.region.x = n._getNumber(h, e.DataParser.X, 0), u.region.y = n._getNumber(h, e.DataParser.Y, 0), 
                u.region.width = n._getNumber(h, e.DataParser.WIDTH, 0), u.region.height = n._getNumber(h, e.DataParser.HEIGHT, 0);
                var _ = n._getNumber(h, e.DataParser.FRAME_WIDTH, -1), f = n._getNumber(h, e.DataParser.FRAME_HEIGHT, -1);
                _ > 0 && f > 0 && (u.frame = e.TextureData.createRectangle(), u.frame.x = n._getNumber(h, e.DataParser.FRAME_X, 0), 
                u.frame.y = n._getNumber(h, e.DataParser.FRAME_Y, 0), u.frame.width = _, u.frame.height = f), 
                a.addTexture(u);
            }
            return !0;
        }, n.getInstance = function() {
            return null === n._objectDataParserInstance && (n._objectDataParserInstance = new n()), 
            n._objectDataParserInstance;
        }, n._objectDataParserInstance = null, n;
    }(e.DataParser);
    e.ObjectDataParser = i;
    var r = function() {
        return function() {
            this.frameStart = 0, this.actions = [];
        };
    }();
    e.ActionFrame = r;
}(r || (r = {}));

!function(t) {
    var e = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), i.prototype._inRange = function(t, e, a) {
            return e <= t && t <= a;
        }, i.prototype._decodeUTF8 = function(t) {
            for (var e, a = 0, i = "", r = 0, n = 0, s = 0, o = 0; t.length > a; ) {
                var l = t[a++];
                if (-1 === l) e = 0 !== n ? 65533 : -1; else if (0 === n) this._inRange(l, 0, 127) ? e = l : (this._inRange(l, 194, 223) ? (n = 1, 
                o = 128, r = l - 192) : this._inRange(l, 224, 239) ? (n = 2, o = 2048, r = l - 224) : this._inRange(l, 240, 244) && (n = 3, 
                o = 65536, r = l - 240), r *= Math.pow(64, n), e = null); else if (this._inRange(l, 128, 191)) if (s += 1, 
                r += (l - 128) * Math.pow(64, n - s), s !== n) e = null; else {
                    var h = r, u = o;
                    r = 0, n = 0, s = 0, o = 0, e = this._inRange(h, u, 1114111) && !this._inRange(h, 55296, 57343) ? h : l;
                } else r = 0, n = 0, s = 0, o = 0, a--, e = l;
                null !== e && -1 !== e && (e <= 65535 ? e > 0 && (i += String.fromCharCode(e)) : (e -= 65536, 
                i += String.fromCharCode(55296 + (e >> 10 & 1023)), i += String.fromCharCode(56320 + (1023 & e))));
            }
            return i;
        }, i.prototype._getUTF16Key = function(t) {
            for (var e = 0, a = t.length; e < a; ++e) if (t.charCodeAt(e) > 255) return encodeURI(t);
            return t;
        }, i.prototype._parseBinaryTimeline = function(e, a, i) {
            void 0 === i && (i = null);
            var r = null !== i ? i : t.BaseObject.borrowObject(t.TimelineData);
            r.type = e, r.offset = a, this._timeline = r;
            var n = this._timelineArrayBuffer[r.offset + 2];
            if (1 === n) r.frameIndicesOffset = -1; else {
                var s = 0, o = this._animation.frameCount + 1, l = this._data.frameIndices;
                t.DragonBones.webAssembly ? (s = l.size(), l.resize(s + o, 0)) : (s = l.length, 
                l.length += o), r.frameIndicesOffset = s;
                for (var h = 0, u = 0, _ = 0, f = 0; h < o; ++h) _ + f <= h && u < n && (_ = this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[r.offset + 5 + u]], 
                f = u === n - 1 ? this._animation.frameCount - _ : this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[r.offset + 5 + u + 1]] - _, 
                u++), t.DragonBones.webAssembly ? l.set(s + h, u - 1) : l[s + h] = u - 1;
            }
            return this._timeline = null, r;
        }, i.prototype._parseVertices = function(e, a) {
            a.offset = e[t.DataParser.OFFSET];
            var i = this._intArrayBuffer[a.offset + 3];
            if (i >= 0) {
                var r = t.BaseObject.borrowObject(t.WeightData), n = this._intArrayBuffer[a.offset + 0], s = this._intArrayBuffer[i + 0];
                r.offset = i;
                for (u = 0; u < s; ++u) {
                    var o = this._intArrayBuffer[i + 2 + u];
                    r.addBone(this._rawBones[o]);
                }
                for (var l = i + 2 + s, h = 0, u = 0, _ = n; u < _; ++u) {
                    var f = this._intArrayBuffer[l++];
                    h += f, l += f;
                }
                r.count = h, a.weight = r;
            }
        }, i.prototype._parseMesh = function(t, e) {
            this._parseVertices(t, e.vertices);
        }, i.prototype._parsePath = function(t, e) {
            this._parseVertices(t, e.vertices);
        }, i.prototype._parseAnimation = function(e) {
            var a = t.BaseObject.borrowObject(t.AnimationData);
            a.frameCount = Math.max(t.ObjectDataParser._getNumber(e, t.DataParser.DURATION, 1), 1), 
            a.playTimes = t.ObjectDataParser._getNumber(e, t.DataParser.PLAY_TIMES, 1), a.duration = a.frameCount / this._armature.frameRate, 
            a.fadeInTime = t.ObjectDataParser._getNumber(e, t.DataParser.FADE_IN_TIME, 0), a.scale = t.ObjectDataParser._getNumber(e, t.DataParser.SCALE, 1), 
            a.name = t.ObjectDataParser._getString(e, t.DataParser.NAME, t.DataParser.DEFAULT_NAME), 
            0 === a.name.length && (a.name = t.DataParser.DEFAULT_NAME);
            var i = e[t.DataParser.OFFSET];
            if (a.frameIntOffset = i[0], a.frameFloatOffset = i[1], a.frameOffset = i[2], this._animation = a, 
            t.DataParser.ACTION in e && (a.actionTimeline = this._parseBinaryTimeline(0, e[t.DataParser.ACTION])), 
            t.DataParser.Z_ORDER in e && (a.zOrderTimeline = this._parseBinaryTimeline(1, e[t.DataParser.Z_ORDER])), 
            t.DataParser.BONE in e) {
                p = e[t.DataParser.BONE];
                for (var r in p) {
                    m = p[r];
                    t.DragonBones.webAssembly && (r = this._getUTF16Key(r));
                    var n = this._armature.getBone(r);
                    if (null !== n) for (var s = 0, o = m.length; s < o; s += 2) {
                        var l = m[s], h = m[s + 1], u = this._parseBinaryTimeline(l, h);
                        this._animation.addBoneTimeline(n, u);
                    }
                }
            }
            if (t.DataParser.SURFACE in e) {
                p = e[t.DataParser.SURFACE];
                for (var r in p) {
                    m = p[r];
                    t.DragonBones.webAssembly && (r = this._getUTF16Key(r));
                    var _ = this._armature.getBone(r);
                    if (null !== _) for (var s = 0, o = m.length; s < o; s += 2) {
                        var l = m[s], h = m[s + 1], u = this._parseBinaryTimeline(l, h);
                        this._animation.addSurfaceTimeline(_, u);
                    }
                }
            }
            if (t.DataParser.SLOT in e) {
                p = e[t.DataParser.SLOT];
                for (var r in p) {
                    m = p[r];
                    t.DragonBones.webAssembly && (r = this._getUTF16Key(r));
                    var f = this._armature.getSlot(r);
                    if (null !== f) for (var s = 0, o = m.length; s < o; s += 2) {
                        var l = m[s], h = m[s + 1], u = this._parseBinaryTimeline(l, h);
                        this._animation.addSlotTimeline(f, u);
                    }
                }
            }
            if (t.DataParser.CONSTRAINT in e) {
                p = e[t.DataParser.CONSTRAINT];
                for (var r in p) {
                    m = p[r];
                    t.DragonBones.webAssembly && (r = this._getUTF16Key(r));
                    var c = this._armature.getConstraint(r);
                    if (null !== c) for (var s = 0, o = m.length; s < o; s += 2) {
                        var l = m[s], h = m[s + 1], u = this._parseBinaryTimeline(l, h);
                        this._animation.addConstraintTimeline(c, u);
                    }
                }
            }
            if (t.DataParser.ANIMATION in e) {
                var p = e[t.DataParser.ANIMATION];
                for (var r in p) {
                    var m = p[r];
                    t.DragonBones.webAssembly && (r = this._getUTF16Key(r));
                    for (var s = 0, o = m.length; s < o; s += 2) {
                        var l = m[s], h = m[s + 1], u = this._parseBinaryTimeline(l, h);
                        this._animation.addAnimationTimeline(r, u);
                    }
                }
            }
            return this._animation = null, a;
        }, i.prototype._parseArray = function(e) {
            var a = e[t.DataParser.OFFSET], i = a[1], r = a[3], n = a[5], s = a[7], o = a[9], l = a[11], h = new Int16Array(this._binary, this._binaryOffset + a[0], i / Int16Array.BYTES_PER_ELEMENT), u = new Float32Array(this._binary, this._binaryOffset + a[2], r / Float32Array.BYTES_PER_ELEMENT), _ = new Int16Array(this._binary, this._binaryOffset + a[4], n / Int16Array.BYTES_PER_ELEMENT), f = new Float32Array(this._binary, this._binaryOffset + a[6], s / Float32Array.BYTES_PER_ELEMENT), c = new Int16Array(this._binary, this._binaryOffset + a[8], o / Int16Array.BYTES_PER_ELEMENT), p = new Uint16Array(this._binary, this._binaryOffset + a[10], l / Uint16Array.BYTES_PER_ELEMENT);
            if (t.DragonBones.webAssembly) {
                for (var m = i + r + n + s + o + l, d = t.webAssemblyModule._malloc(m), y = new Uint8Array(this._binary, this._binaryOffset, m / Uint8Array.BYTES_PER_ELEMENT), g = new Uint8Array(t.webAssemblyModule.HEAP16.buffer, d, y.length), v = 0, b = y.length; v < b; ++v) g[v] = y[v];
                t.webAssemblyModule.setDataBinary(this._data, d, i, r, n, s, o, l), this._intArrayBuffer = h, 
                this._floatArrayBuffer = u, this._frameIntArrayBuffer = _, this._frameFloatArrayBuffer = f, 
                this._frameArrayBuffer = c, this._timelineArrayBuffer = p;
            } else this._data.binary = this._binary, this._data.intArray = this._intArrayBuffer = h, 
            this._data.floatArray = this._floatArrayBuffer = u, this._data.frameIntArray = this._frameIntArrayBuffer = _, 
            this._data.frameFloatArray = this._frameFloatArrayBuffer = f, this._data.frameArray = this._frameArrayBuffer = c, 
            this._data.timelineArray = this._timelineArrayBuffer = p;
        }, i.prototype.parseDragonBonesData = function(t, a) {
            void 0 === a && (a = 1), console.assert(null !== t && void 0 !== t && t instanceof ArrayBuffer, "Data error.");
            var i = new Uint8Array(t, 0, 8);
            if (i[0] !== "D".charCodeAt(0) || i[1] !== "B".charCodeAt(0) || i[2] !== "D".charCodeAt(0) || i[3] !== "T".charCodeAt(0)) return console.assert(!1, "Nonsupport data."), 
            null;
            var r = new Uint32Array(t, 8, 1)[0], n = new Uint8Array(t, 12, r), s = this._decodeUTF8(n), o = JSON.parse(s);
            return this._binaryOffset = 12 + r, this._binary = t, e.prototype.parseDragonBonesData.call(this, o, a);
        }, i.getInstance = function() {
            return null === i._binaryDataParserInstance && (i._binaryDataParserInstance = new i()), 
            i._binaryDataParserInstance;
        }, i._binaryDataParserInstance = null, i;
    }(t.ObjectDataParser);
    t.BinaryDataParser = e;
}(r || (r = {}));

!function(t) {
    var e = function() {
        function e(a) {
            void 0 === a && (a = null), this.autoSearch = !1, this._dragonBonesDataMap = {}, 
            this._textureAtlasDataMap = {}, this._dragonBones = null, this._dataParser = null, 
            null === e._objectParser && (e._objectParser = new t.ObjectDataParser()), null === e._binaryParser && (e._binaryParser = new t.BinaryDataParser()), 
            this._dataParser = null !== a ? a : e._objectParser;
        }
        return e.prototype._isSupportMesh = function() {
            return !0;
        }, e.prototype._getTextureData = function(t, e) {
            if (t in this._textureAtlasDataMap) for (var a = 0, i = this._textureAtlasDataMap[t]; a < i.length; a++) if (null !== (l = (o = i[a]).getTexture(e))) return l;
            if (this.autoSearch) for (var r in this._textureAtlasDataMap) for (var n = 0, s = this._textureAtlasDataMap[r]; n < s.length; n++) {
                var o = s[n];
                if (o.autoSearch) {
                    var l = o.getTexture(e);
                    if (null !== l) return l;
                }
            }
            return null;
        }, e.prototype._fillBuildArmaturePackage = function(t, e, a, i, r) {
            var n = null, s = null;
            if (e.length > 0 && e in this._dragonBonesDataMap && (s = (n = this._dragonBonesDataMap[e]).getArmature(a)), 
            null === s && (0 === e.length || this.autoSearch)) for (var o in this._dragonBonesDataMap) if (n = this._dragonBonesDataMap[o], 
            (0 === e.length || n.autoSearch) && null !== (s = n.getArmature(a))) {
                e = o;
                break;
            }
            if (null !== s) {
                if (t.dataName = e, t.textureAtlasName = r, t.data = n, t.armature = s, t.skin = null, 
                i.length > 0 && (t.skin = s.getSkin(i), null === t.skin && this.autoSearch)) for (var o in this._dragonBonesDataMap) {
                    var l = this._dragonBonesDataMap[o].getArmature(i);
                    if (null !== l) {
                        t.skin = l.defaultSkin;
                        break;
                    }
                }
                return null === t.skin && (t.skin = s.defaultSkin), !0;
            }
            return !1;
        }, e.prototype._buildBones = function(e, a) {
            for (var i = 0, r = e.armature.sortedBones; i < r.length; i++) {
                var n = r[i];
                t.BaseObject.borrowObject(0 === n.type ? t.Bone : t.Surface).init(n, a);
            }
        }, e.prototype._buildSlots = function(e, a) {
            var i = e.skin, r = e.armature.defaultSkin;
            if (null !== i && null !== r) {
                var n = {};
                for (var s in r.displays) {
                    o = r.getDisplays(s);
                    n[s] = o;
                }
                if (i !== r) for (var s in i.displays) {
                    var o = i.getDisplays(s);
                    n[s] = o;
                }
                for (var l = 0, h = e.armature.sortedSlots; l < h.length; l++) {
                    var u = h[l], _ = u.name in n ? n[u.name] : null, f = this._buildSlot(e, u, a);
                    if (f.rawDisplayDatas = _, null !== _) {
                        for (var c = new Array(), p = 0, m = t.DragonBones.webAssembly ? _.size() : _.length; p < m; ++p) {
                            var d = t.DragonBones.webAssembly ? _.get(p) : _[p];
                            null !== d ? c.push(this._getSlotDisplay(e, d, null, f)) : c.push(null);
                        }
                        f._setDisplayList(c);
                    }
                    f._setDisplayIndex(u.displayIndex, !0);
                }
            }
        }, e.prototype._buildConstraints = function(e, a) {
            var i = e.armature.constraints;
            for (var r in i) {
                var n = i[r];
                switch (n.type) {
                  case 0:
                    var s = t.BaseObject.borrowObject(t.IKConstraint);
                    s.init(n, a), a._addConstraint(s);
                    break;

                  case 1:
                    var o = t.BaseObject.borrowObject(t.PathConstraint);
                    o.init(n, a), a._addConstraint(o);
                    break;

                  default:
                    var l = t.BaseObject.borrowObject(t.IKConstraint);
                    l.init(n, a), a._addConstraint(l);
                }
            }
        }, e.prototype._buildChildArmature = function(t, e, a) {
            return this.buildArmature(a.path, null !== t ? t.dataName : "", "", null !== t ? t.textureAtlasName : "");
        }, e.prototype._getSlotDisplay = function(e, a, i, r) {
            var n = null !== e ? e.dataName : a.parent.parent.parent.name, s = null;
            switch (a.type) {
              case 0:
                var o = a;
                null === o.texture ? o.texture = this._getTextureData(n, a.path) : null !== e && e.textureAtlasName.length > 0 && (o.texture = this._getTextureData(e.textureAtlasName, a.path)), 
                s = null !== i && 2 === i.type && this._isSupportMesh() ? r.meshDisplay : r.rawDisplay;
                break;

              case 2:
                var l = a;
                null === l.texture ? l.texture = this._getTextureData(n, l.path) : null !== e && e.textureAtlasName.length > 0 && (l.texture = this._getTextureData(e.textureAtlasName, l.path)), 
                s = this._isSupportMesh() ? r.meshDisplay : r.rawDisplay;
                break;

              case 1:
                var h = a, u = this._buildChildArmature(e, r, a);
                if (null !== u) {
                    if (u.inheritAnimation = h.inheritAnimation, !u.inheritAnimation) {
                        var _ = h.actions.length > 0 ? h.actions : u.armatureData.defaultActions;
                        if (_.length > 0) for (var f = 0, c = _; f < c.length; f++) {
                            var p = c[f], m = t.BaseObject.borrowObject(t.EventObject);
                            t.EventObject.actionDataToInstance(p, m, r.armature), m.slot = r, r.armature._bufferAction(m, !1);
                        } else u.animation.play();
                    }
                    h.armature = u.armatureData;
                }
                s = u;
            }
            return s;
        }, e.prototype.parseDragonBonesData = function(t, a, i) {
            void 0 === a && (a = null), void 0 === i && (i = 1);
            for (var r = t instanceof ArrayBuffer ? e._binaryParser : this._dataParser, n = r.parseDragonBonesData(t, i); ;) {
                var s = this._buildTextureAtlasData(null, null);
                if (!r.parseTextureAtlasData(null, s, i)) {
                    s.returnToPool();
                    break;
                }
                this.addTextureAtlasData(s, a);
            }
            return null !== n && this.addDragonBonesData(n, a), n;
        }, e.prototype.parseTextureAtlasData = function(t, e, a, i) {
            void 0 === a && (a = null), void 0 === i && (i = 1);
            var r = this._buildTextureAtlasData(null, null);
            return this._dataParser.parseTextureAtlasData(t, r, i), this._buildTextureAtlasData(r, e || null), 
            this.addTextureAtlasData(r, a), r;
        }, e.prototype.updateTextureAtlasData = function(t, e) {
            var a = this.getTextureAtlasData(t);
            if (null !== a) for (var i = 0, r = a.length; i < r; ++i) i < e.length && this._buildTextureAtlasData(a[i], e[i]);
        }, e.prototype.getDragonBonesData = function(t) {
            return t in this._dragonBonesDataMap ? this._dragonBonesDataMap[t] : null;
        }, e.prototype.addDragonBonesData = function(t, e) {
            if (void 0 === e && (e = null), (e = null !== e ? e : t.name) in this._dragonBonesDataMap) {
                if (this._dragonBonesDataMap[e] === t) return;
                console.warn("Can not add same name data: " + e);
            } else this._dragonBonesDataMap[e] = t;
        }, e.prototype.removeDragonBonesData = function(t, e) {
            void 0 === e && (e = !0), t in this._dragonBonesDataMap && (e && this._dragonBones.bufferObject(this._dragonBonesDataMap[t]), 
            delete this._dragonBonesDataMap[t]);
        }, e.prototype.getTextureAtlasData = function(t) {
            return t in this._textureAtlasDataMap ? this._textureAtlasDataMap[t] : null;
        }, e.prototype.addTextureAtlasData = function(t, e) {
            void 0 === e && (e = null);
            var a = (e = null !== e ? e : t.name) in this._textureAtlasDataMap ? this._textureAtlasDataMap[e] : this._textureAtlasDataMap[e] = [];
            a.indexOf(t) < 0 && a.push(t);
        }, e.prototype.removeTextureAtlasData = function(t, e) {
            if (void 0 === e && (e = !0), t in this._textureAtlasDataMap) {
                var a = this._textureAtlasDataMap[t];
                if (e) for (var i = 0, r = a; i < r.length; i++) {
                    var n = r[i];
                    this._dragonBones.bufferObject(n);
                }
                delete this._textureAtlasDataMap[t];
            }
        }, e.prototype.getArmatureData = function(t, e) {
            void 0 === e && (e = "");
            var i = new a();
            return this._fillBuildArmaturePackage(i, e, t, "", "") ? i.armature : null;
        }, e.prototype.clear = function(t) {
            void 0 === t && (t = !0);
            for (var e in this._dragonBonesDataMap) t && this._dragonBones.bufferObject(this._dragonBonesDataMap[e]), 
            delete this._dragonBonesDataMap[e];
            for (var e in this._textureAtlasDataMap) {
                if (t) for (var a = 0, i = this._textureAtlasDataMap[e]; a < i.length; a++) {
                    var r = i[a];
                    this._dragonBones.bufferObject(r);
                }
                delete this._textureAtlasDataMap[e];
            }
        }, e.prototype.buildArmature = function(t, e, i, r) {
            void 0 === e && (e = ""), void 0 === i && (i = ""), void 0 === r && (r = "");
            var n = new a();
            if (!this._fillBuildArmaturePackage(n, e || "", t, i || "", r || "")) return console.warn("No armature data: " + t + ", " + (null !== e ? e : "")), 
            null;
            var s = this._buildArmature(n);
            return this._buildBones(n, s), this._buildSlots(n, s), this._buildConstraints(n, s), 
            s.invalidUpdate(null, !0), s.advanceTime(0), s;
        }, e.prototype.replaceDisplay = function(e, a, i) {
            void 0 === i && (i = -1), i < 0 && (i = e.displayIndex), i < 0 && (i = 0), e.replaceDisplayData(a, i);
            var r = e.displayList;
            if (r.length <= i) {
                r.length = i + 1;
                for (var n = 0, s = r.length; n < s; ++n) r[n] || (r[n] = null);
            }
            if (null !== a) {
                var o = e.rawDisplayDatas, l = null;
                o && (t.DragonBones.webAssembly ? i < o.size() && (l = o.get(i)) : i < o.length && (l = o[i])), 
                r[i] = this._getSlotDisplay(null, a, l, e);
            } else r[i] = null;
            e.displayList = r;
        }, e.prototype.replaceSlotDisplay = function(t, e, a, i, r, n) {
            void 0 === n && (n = -1);
            var s = this.getArmatureData(e, t || "");
            if (!s || !s.defaultSkin) return !1;
            var o = s.defaultSkin.getDisplay(a, i);
            return !!o && (this.replaceDisplay(r, o, n), !0);
        }, e.prototype.replaceSlotDisplayList = function(e, a, i, r) {
            var n = this.getArmatureData(a, e || "");
            if (!n || !n.defaultSkin) return !1;
            var s = n.defaultSkin.getDisplays(i);
            if (!s) return !1;
            for (var o = 0, l = 0, h = t.DragonBones.webAssembly ? s.size() : s.length; l < h; ++l) {
                var u = t.DragonBones.webAssembly ? s.get(l) : s[l];
                this.replaceDisplay(r, u, o++);
            }
            return !0;
        }, e.prototype.replaceSkin = function(e, a, i, r) {
            void 0 === i && (i = !1), void 0 === r && (r = null);
            for (var n = !1, s = a.parent.defaultSkin, o = 0, l = e.getSlots(); o < l.length; o++) {
                var h = l[o];
                if (!(null !== r && r.indexOf(h.name) >= 0)) {
                    var u = a.getDisplays(h.name);
                    if (u || (null !== s && a !== s && (u = s.getDisplays(h.name)), u)) {
                        var _ = t.DragonBones.webAssembly ? u.size() : u.length, f = h.displayList;
                        f.length = _;
                        for (var c = 0, p = _; c < p; ++c) {
                            var m = t.DragonBones.webAssembly ? u.get(c) : u[c];
                            f[c] = null !== m ? this._getSlotDisplay(null, m, null, h) : null;
                        }
                        n = !0, h.rawDisplayDatas = u, h.displayList = f;
                    } else i && (h.rawDisplayDatas = null, h.displayList = []);
                }
            }
            return n;
        }, e.prototype.replaceAnimation = function(e, a, i) {
            void 0 === i && (i = !0);
            var r = a.defaultSkin;
            if (null === r) return !1;
            if (i) e.animation.animations = a.animations; else {
                var n = e.animation.animations, s = {};
                for (var o in n) s[o] = n[o];
                for (var o in a.animations) s[o] = a.animations[o];
                e.animation.animations = s;
            }
            for (var l = 0, h = e.getSlots(); l < h.length; l++) for (var u = h[l], _ = 0, f = 0, c = u.displayList; f < c.length; f++) {
                var p = c[f];
                if (p instanceof t.Armature) {
                    var m = r.getDisplays(u.name);
                    if (null !== m && _ < (t.DragonBones.webAssembly ? m.size() : m.length)) {
                        var d = t.DragonBones.webAssembly ? m.get(_) : m[_];
                        if (null !== d && 1 === d.type) {
                            var y = this.getArmatureData(d.path, d.parent.parent.parent.name);
                            y && this.replaceAnimation(p, y, i);
                        }
                    }
                }
                _++;
            }
            return !0;
        }, e.prototype.getAllDragonBonesData = function() {
            return this._dragonBonesDataMap;
        }, e.prototype.getAllTextureAtlasData = function() {
            return this._textureAtlasDataMap;
        }, Object.defineProperty(e.prototype, "clock", {
            get: function() {
                return this._dragonBones.clock;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "dragonBones", {
            get: function() {
                return this._dragonBones;
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.changeSkin = function(t, e, a) {
            return void 0 === a && (a = null), this.replaceSkin(t, e, !1, a);
        }, e.prototype.copyAnimationsToArmature = function(t, e, a, i, r) {
            void 0 === a && (a = ""), void 0 === i && (i = ""), void 0 === r && (r = !0);
            var n = this.getArmatureData(e, i);
            return !!n && this.replaceAnimation(t, n, r);
        }, e._objectParser = null, e._binaryParser = null, e;
    }();
    t.BaseFactory = e;
    var a = function() {
        return function() {
            this.dataName = "", this.textureAtlasName = "", this.skin = null;
        };
    }();
    t.BuildArmaturePackage = a;
}(r || (r = {}));

!function(t) {
    var i = function(i) {
        function n() {
            var t = null !== i && i.apply(this, arguments) || this;
            return t._renderTexture = null, t;
        }
        return a(n, i), n.toString = function() {
            return "[class dragonBones.EgretTextureAtlasData]";
        }, n.prototype._onClear = function() {
            i.prototype._onClear.call(this), this.disposeEnabled && null !== this._renderTexture && this._renderTexture.dispose(), 
            this.disposeEnabled = !1, this._renderTexture = null;
        }, n.prototype.createTexture = function() {
            return t.BaseObject.borrowObject(r);
        }, Object.defineProperty(n.prototype, "renderTexture", {
            get: function() {
                return this._renderTexture;
            },
            set: function(t) {
                if (this._renderTexture !== t) if (this._renderTexture = t, null !== this._renderTexture) {
                    var a = this._renderTexture.bitmapData, i = this.width > 0 ? this.width : a.width, r = this.height > 0 ? this.height : a.height;
                    for (var n in this.textures) {
                        var s = e.$TextureScaleFactor, o = (h = this.textures[n]).region.width, l = h.region.height;
                        null === h.renderTexture && (h.renderTexture = new e.Texture()), h.renderTexture.bitmapData = a, 
                        h.rotated ? h.renderTexture.$initData(h.region.x * s, h.region.y * s, l * s, o * s, 0, 0, l * s, o * s, i, r, h.rotated) : h.renderTexture.$initData(h.region.x * s, h.region.y * s, o * s, l * s, 0, 0, o * s, l * s, i, r);
                    }
                } else for (var n in this.textures) {
                    var h = this.textures[n];
                    h.renderTexture = null;
                }
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.dispose = function() {
            console.warn("已废弃。"), this.returnToPool();
        }, Object.defineProperty(n.prototype, "texture", {
            get: function() {
                return console.warn("已废弃。"), this.renderTexture;
            },
            enumerable: !0,
            configurable: !0
        }), n;
    }(t.TextureAtlasData);
    t.EgretTextureAtlasData = i;
    var r = function(t) {
        function e() {
            var e = null !== t && t.apply(this, arguments) || this;
            return e.renderTexture = null, e;
        }
        return a(e, t), e.toString = function() {
            return "[class dragonBones.EgretTextureData]";
        }, e.prototype._onClear = function() {
            t.prototype._onClear.call(this), this.renderTexture, this.renderTexture = null;
        }, e;
    }(t.TextureData);
    t.EgretTextureData = r;
}(r || (r = {}));

!function(t) {
    var r = function(e) {
        function i() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return a(i, e), Object.defineProperty(i.prototype, "eventObject", {
            get: function() {
                return this.data;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animationName", {
            get: function() {
                var t = this.eventObject.animationState;
                return null !== t ? t.name : "";
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "armature", {
            get: function() {
                return this.eventObject.armature;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "bone", {
            get: function() {
                return this.eventObject.bone;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "slot", {
            get: function() {
                return this.eventObject.slot;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "animationState", {
            get: function() {
                return this.eventObject.animationState;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "frameLabel", {
            get: function() {
                return this.eventObject.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "sound", {
            get: function() {
                return this.eventObject.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "movementID", {
            get: function() {
                return this.animationName;
            },
            enumerable: !0,
            configurable: !0
        }), i.START = t.EventObject.START, i.LOOP_COMPLETE = t.EventObject.LOOP_COMPLETE, 
        i.COMPLETE = t.EventObject.COMPLETE, i.FADE_IN = t.EventObject.FADE_IN, i.FADE_IN_COMPLETE = t.EventObject.FADE_IN_COMPLETE, 
        i.FADE_OUT = t.EventObject.FADE_OUT, i.FADE_OUT_COMPLETE = t.EventObject.FADE_OUT_COMPLETE, 
        i.FRAME_EVENT = t.EventObject.FRAME_EVENT, i.SOUND_EVENT = t.EventObject.SOUND_EVENT, 
        i.ANIMATION_FRAME_EVENT = t.EventObject.FRAME_EVENT, i.BONE_FRAME_EVENT = t.EventObject.FRAME_EVENT, 
        i.MOVEMENT_FRAME_EVENT = t.EventObject.FRAME_EVENT, i.SOUND = t.EventObject.SOUND_EVENT, 
        i;
    }(e.Event);
    t.EgretEvent = r;
    var n = function(n) {
        function s() {
            var t = null !== n && n.apply(this, arguments) || this;
            return t.debugDraw = !1, t._batchEnabled = !(i.nativeRender || i.bricks), t._childDirty = !0, 
            t._debugDraw = !1, t._armature = null, t._bounds = null, t._debugDrawer = null, 
            t;
        }
        return a(s, n), s._cleanBeforeRender = function() {}, s.prototype.dbInit = function(t) {
            this._armature = t, this._batchEnabled && (this.$renderNode = new e.sys.GroupNode(), 
            this.$renderNode.cleanBeforeRender = s._cleanBeforeRender);
        }, s.prototype.dbClear = function() {
            this._armature = null, this._bounds = null, this._debugDrawer = null;
        }, s.prototype.dbUpdate = function() {
            var a = t.DragonBones.debugDraw || this.debugDraw;
            if (a || this._debugDraw) if (this._debugDraw = a, this._debugDraw) {
                null === this._debugDrawer && (this._debugDrawer = new e.Sprite()), this._debugDrawer.parent !== this && this.addChild(this._debugDrawer);
                var i = this._debugDrawer.graphics;
                i.clear();
                for (var r = 0, n = this._armature.getBones(); r < n.length; r++) {
                    var s = n[r];
                    if (0 === s.boneData.type) {
                        var o = Math.max(s.boneData.length, 2), l = s.globalTransformMatrix.tx, h = s.globalTransformMatrix.ty, u = l - 2 * s.globalTransformMatrix.a, _ = h - 2 * s.globalTransformMatrix.b, f = l + s.globalTransformMatrix.a * o, c = h + s.globalTransformMatrix.b * o, p = l + _ - h, m = h + u - l, d = l - _ + h, y = h - u + l;
                        i.lineStyle(2, 65535, .7), i.moveTo(u, _), i.lineTo(f, c), i.moveTo(p, m), i.lineTo(d, y);
                    } else {
                        var g = s, v = g._boneData, b = v.segmentX, D = v.segmentY, T = g._vertices;
                        i.lineStyle(2, 16776960, .7);
                        for (var A = 0; A < D; ++A) for (var P = 0; P < b; ++P) {
                            var O = 2 * (P + A * (b + 1)), S = T[O], x = T[O + 1];
                            i.moveTo(S, x), i.lineTo(T[O + 2], T[O + 3]), i.moveTo(S, x), i.lineTo(T[O + 2 * (b + 1)], T[O + 2 * (b + 1) + 1]), 
                            P === b - 1 && (i.moveTo(T[O + 2], T[O + 3]), i.lineTo(T[O + 2 * (b + 2)], T[O + 2 * (b + 2) + 1])), 
                            A === D - 1 && (i.moveTo(T[O + 2 * (b + 1)], T[O + 2 * (b + 1) + 1]), i.lineTo(T[O + 2 * (b + 2)], T[O + 2 * (b + 2) + 1]));
                        }
                    }
                }
                for (var E = 0, M = this._armature.getSlots(); E < M.length; E++) {
                    var C = M[E], w = C.boundingBoxData;
                    if (null !== w) {
                        switch (null === (B = this._debugDrawer.getChildByName(C.name)) && ((B = new e.Shape()).name = C.name, 
                        this._debugDrawer.addChild(B)), B.graphics.clear(), B.graphics.lineStyle(2, 16711935, .7), 
                        w.type) {
                          case 0:
                            B.graphics.drawRect(.5 * -w.width, .5 * -w.height, w.width, w.height);
                            break;

                          case 1:
                            B.graphics.drawEllipse(.5 * -w.width, .5 * -w.height, w.width, w.height);
                            break;

                          case 2:
                            for (var T = w.vertices, I = 0; I < T.length; I += 2) {
                                var S = T[I], x = T[I + 1];
                                0 === I ? B.graphics.moveTo(S, x) : B.graphics.lineTo(S, x);
                            }
                            B.graphics.lineTo(T[0], T[1]);
                        }
                        C.updateTransformAndMatrix(), C.updateGlobalTransform(), B.$setMatrix(C.globalTransformMatrix, !1);
                    } else {
                        var B = this._debugDrawer.getChildByName(C.name);
                        null !== B && this._debugDrawer.removeChild(B);
                    }
                }
            } else null !== this._debugDrawer && this._debugDrawer.parent === this && this.removeChild(this._debugDrawer);
            !t.isV5 && this._batchEnabled && this._childDirty && this.$invalidateContentBounds();
        }, s.prototype.dispose = function(t) {
            void 0 === t && (t = !0), null !== this._armature && (this._armature.dispose(), 
            this._armature = null);
        }, s.prototype.dispatchDBEvent = function(t, a) {
            var i = e.Event.create(r, t);
            i.data = a, n.prototype.dispatchEvent.call(this, i), e.Event.release(i);
        }, s.prototype.hasDBEventListener = function(t) {
            return this.hasEventListener(t);
        }, s.prototype.addDBEventListener = function(t, e, a) {
            this.addEventListener(t, e, a);
        }, s.prototype.removeDBEventListener = function(t, e, a) {
            this.removeEventListener(t, e, a);
        }, s.prototype.disableBatch = function() {
            if (this._batchEnabled && this._armature) {
                for (var t = 0, e = this._armature.getSlots(); t < e.length; t++) {
                    var a = e[t], i = a._deformVertices && a._deformVertices.verticesData ? a.meshDisplay : a.rawDisplay;
                    a.display || i !== a.meshDisplay || (i = a.rawDisplay), i.$renderNode.matrix && i.$setMatrix(a.globalTransformMatrix, !1), 
                    this.addChild(i);
                }
                this._batchEnabled = !1, this.$renderNode.cleanBeforeRender = null, this.$renderNode = null, 
                this.armature.invalidUpdate(null, !0);
            }
        }, Object.defineProperty(s.prototype, "armature", {
            get: function() {
                return this._armature;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(s.prototype, "animation", {
            get: function() {
                return this._armature.animation;
            },
            enumerable: !0,
            configurable: !0
        }), s.prototype.$measureContentBounds = function(a) {
            if (this._batchEnabled && this._armature) {
                if (this._childDirty) {
                    this._childDirty = !1;
                    for (var i = !0, r = new e.Rectangle(), s = 0, o = this._armature.getSlots(); s < o.length; s++) {
                        var l = o[s], h = l.display;
                        if (h && h.$renderNode && h.$renderNode.image) {
                            var u = h.$renderNode.matrix;
                            if (h === l.meshDisplay) {
                                var _ = h.$renderNode.vertices;
                                if (!(_ && _.length > 0)) continue;
                                r.setTo(999999, 999999, -999999, -999999);
                                for (var f = 0, c = _.length; f < c; f += 2) {
                                    var p = _[f], m = _[f + 1];
                                    r.x > p && (r.x = p), r.width < p && (r.width = p), r.y > m && (r.y = m), r.height < m && (r.height = m);
                                }
                                r.width -= r.x, r.height -= r.y;
                            } else {
                                var d = l.displayData;
                                if (!(d && d instanceof t.ImageDisplayData && d.texture)) continue;
                                var y = d.texture.parent.scale;
                                r.x = 0, r.y = 0, r.width = d.texture.region.width * y, r.height = d.texture.region.height * y;
                            }
                            u.$transformBounds(r);
                            var g = r.x, v = r.y, b = r.x + r.width, D = r.y + r.height;
                            i ? (i = !1, a.x = g, a.y = v, a.width = b, a.height = D) : (g < a.x && (a.x = g), 
                            v < a.y && (a.y = v), b > a.width && (a.width = b), D > a.height && (a.height = D));
                        }
                    }
                    a.width -= a.x, a.height -= a.y, t.isV5 && (null === this._bounds && (this._bounds = new e.Rectangle()), 
                    this._bounds.copyFrom(a));
                } else t.isV5 && (null === this._bounds && (this._bounds = new e.Rectangle()), a.copyFrom(this._bounds));
                return a;
            }
            return n.prototype.$measureContentBounds.call(this, a);
        }, s.prototype.hasEvent = function(t) {
            return this.hasDBEventListener(t);
        }, s.prototype.addEvent = function(t, e, a) {
            this.addDBEventListener(t, e, a);
        }, s.prototype.removeEvent = function(t, e, a) {
            this.removeDBEventListener(t, e, a);
        }, s.prototype.advanceTimeBySelf = function(e) {
            this._armature.clock = e ? t.EgretFactory.factory.clock : null;
        }, s;
    }(e.DisplayObjectContainer);
    t.EgretArmatureDisplay = n;
    var s = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(r);
    t.Event = s;
    var o = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(r);
    t.ArmatureEvent = o;
    var l = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(r);
    t.AnimationEvent = l;
    var h = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(r);
    t.FrameEvent = h;
    var u = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(r);
    t.SoundEvent = u;
    var _ = function(e) {
        function i(a, i, r) {
            void 0 === r && (r = 1);
            var n = e.call(this) || this;
            return console.warn("已废弃"), n._onClear(), t.ObjectDataParser.getInstance().parseTextureAtlasData(i, n, r), 
            n.renderTexture = a, n;
        }
        return a(i, e), i.toString = function() {
            return "[class dragonBones.EgretTextureAtlas]";
        }, i;
    }(t.EgretTextureAtlasData);
    t.EgretTextureAtlas = _;
    var f = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return a(e, t), e;
    }(_);
    t.EgretSheetAtlas = f;
    var c = function() {
        function e() {}
        return e.getInstance = function() {
            return console.warn("已废弃"), t.EgretFactory.factory.soundEventManager;
        }, e;
    }();
    t.SoundEventManager = c;
    var p = function() {
        return function() {
            console.warn("已废弃");
        };
    }();
    t.AnimationCacheManager = p;
}(r || (r = {}));

!function(t) {
    var i = function(i) {
        function r() {
            var t = null !== i && i.apply(this, arguments) || this;
            return t.transformUpdateEnabled = !1, t._armatureDisplay = null, t._renderDisplay = null, 
            t._colorFilter = null, t;
        }
        return a(r, i), r.toString = function() {
            return "[class dragonBones.EgretSlot]";
        }, r.prototype.init = function(e, a, r, n) {
            i.prototype.init.call(this, e, a, r, n), t.isV5 ? this._updateTransform = this._updateTransformV5 : this._updateTransform = this._updateTransformV4;
        }, r.prototype._onClear = function() {
            i.prototype._onClear.call(this), this._armatureDisplay = null, this._renderDisplay = null, 
            this._colorFilter = null;
        }, r.prototype._initDisplay = function(t, e) {}, r.prototype._disposeDisplay = function(t, e) {}, 
        r.prototype._onUpdateDisplay = function() {
            if (this._armatureDisplay = this._armature.display, this._renderDisplay = null !== this._display ? this._display : this._rawDisplay, 
            t.isV5 && this._armatureDisplay._batchEnabled && (this._renderDisplay !== this._rawDisplay || this._renderDisplay.$renderNode instanceof e.sys.BitmapNode || (this._renderDisplay.$renderNode = new e.sys.BitmapNode())), 
            this._armatureDisplay._batchEnabled) if (this._renderDisplay !== this._rawDisplay && this._renderDisplay !== this._meshDisplay) this._armatureDisplay.disableBatch(); else {
                var a = this._renderDisplay.$renderNode;
                a.matrix || (a.matrix = new e.Matrix());
            }
        }, r.prototype._addDisplay = function() {
            this._armatureDisplay._batchEnabled ? this._armatureDisplay.$renderNode.addNode(this._renderDisplay.$renderNode) : this._armatureDisplay.addChild(this._renderDisplay);
        }, r.prototype._replaceDisplay = function(t) {
            var e = t;
            if (this._armatureDisplay._batchEnabled) {
                var a = this._armatureDisplay.$renderNode.drawData;
                a[a.indexOf(e.$renderNode)] = this._renderDisplay.$renderNode;
            } else this._armatureDisplay.addChild(this._renderDisplay), this._armatureDisplay.swapChildren(this._renderDisplay, e), 
            this._armatureDisplay.removeChild(e);
        }, r.prototype._removeDisplay = function() {
            if (this._armatureDisplay._batchEnabled) {
                var t = this._armatureDisplay.$renderNode.drawData;
                t.splice(t.indexOf(this._renderDisplay.$renderNode), 1);
            } else this._renderDisplay.parent.removeChild(this._renderDisplay);
        }, r.prototype._updateZOrder = function() {
            if (this._armatureDisplay._batchEnabled) this._armatureDisplay.$renderNode.drawData[this._zOrder] = this._renderDisplay.$renderNode; else {
                if (this._armatureDisplay.getChildIndex(this._renderDisplay) === this._zOrder) return;
                this._armatureDisplay.addChildAt(this._renderDisplay, this._zOrder);
            }
        }, r.prototype._updateVisible = function() {
            var t = this._parent.visible && this._visible;
            this._armatureDisplay._batchEnabled ? this._renderDisplay.$renderNode.alpha = t ? 1 : 0 : this._renderDisplay.visible = t;
        }, r.prototype._updateBlendMode = function() {
            switch (this._blendMode) {
              case 0:
                this._renderDisplay.blendMode = e.BlendMode.NORMAL;
                break;

              case 1:
                this._renderDisplay.blendMode = e.BlendMode.ADD;
                break;

              case 5:
                this._renderDisplay.blendMode = e.BlendMode.ERASE;
            }
            this._armatureDisplay._batchEnabled && (this._renderDisplay.$renderNode.blendMode = e.sys.blendModeToNumber(this._renderDisplay.blendMode));
        }, r.prototype._updateColor = function() {
            if (1 !== this._colorTransform.redMultiplier || 1 !== this._colorTransform.greenMultiplier || 1 !== this._colorTransform.blueMultiplier || 0 !== this._colorTransform.redOffset || 0 !== this._colorTransform.greenOffset || 0 !== this._colorTransform.blueOffset || 0 !== this._colorTransform.alphaOffset) {
                null === this._colorFilter && (this._colorFilter = new e.ColorMatrixFilter());
                var t = this._colorFilter.matrix;
                t[0] = this._colorTransform.redMultiplier, t[6] = this._colorTransform.greenMultiplier, 
                t[12] = this._colorTransform.blueMultiplier, t[18] = this._colorTransform.alphaMultiplier, 
                t[4] = this._colorTransform.redOffset, t[9] = this._colorTransform.greenOffset, 
                t[14] = this._colorTransform.blueOffset, t[19] = this._colorTransform.alphaOffset, 
                this._colorFilter.matrix = t, this._armatureDisplay._batchEnabled && ((i = this._renderDisplay.$renderNode).filter = this._colorFilter, 
                i.alpha = 1);
                var a = this._renderDisplay.filters;
                a || (a = []), a.indexOf(this._colorFilter) < 0 && a.push(this._colorFilter), this._renderDisplay.filters = a, 
                this._renderDisplay.alpha = 1;
            } else {
                if (this._armatureDisplay._batchEnabled) {
                    var i = this._renderDisplay.$renderNode;
                    i.filter = null, i.alpha = this._colorTransform.alphaMultiplier;
                }
                this._renderDisplay.filters = null, this._renderDisplay.alpha = this._colorTransform.alphaMultiplier;
            }
        }, r.prototype._updateFrame = function() {
            var a = null !== this._deformVertices && this._display === this._meshDisplay ? this._deformVertices.verticesData : null, i = this._textureData;
            if (this._displayIndex >= 0 && null !== this._display && null !== i) {
                if (null !== this._armature.replacedTexture && null !== this._rawDisplayDatas && this._rawDisplayDatas.indexOf(this._displayData) >= 0) {
                    var r = i.parent;
                    null === this._armature._replaceTextureAtlasData ? ((r = t.BaseObject.borrowObject(t.EgretTextureAtlasData)).copyFrom(i.parent), 
                    r.renderTexture = this._armature.replacedTexture, this._armature._replaceTextureAtlasData = r) : r = this._armature._replaceTextureAtlasData, 
                    i = r.getTexture(i.name);
                }
                if (null !== i.renderTexture) {
                    if (null !== a) {
                        var n = a.data, s = n.intArray, o = n.floatArray, l = s[a.offset + 0], h = s[a.offset + 1], u = s[a.offset + 2];
                        u < 0 && (u += 65536);
                        var _ = u + 2 * l, f = this._armature._armatureData.scale, c = this._renderDisplay, p = c.$renderNode;
                        p.uvs.length = 2 * l, p.vertices.length = 2 * l, p.indices.length = 3 * h;
                        for (var m = 0, d = 2 * l; m < d; ++m) p.vertices[m] = o[u + m] * f, p.uvs[m] = o[_ + m];
                        for (m = 0; m < 3 * h; ++m) p.indices[m] = s[a.offset + 4 + m];
                        if (this._armatureDisplay._batchEnabled) {
                            var y = i.renderTexture, g = this._renderDisplay.$renderNode;
                            if (e.sys.RenderNode.prototype.cleanBeforeRender.call(g), g.image = y.bitmapData, 
                            t.isV5) g.drawMesh(y.$bitmapX, y.$bitmapY, y.$bitmapWidth, y.$bitmapHeight, y.$offsetX, y.$offsetY, y.textureWidth, y.textureHeight), 
                            g.imageWidth = y.$sourceWidth, g.imageHeight = y.$sourceHeight; else {
                                P = y;
                                g.drawMesh(P._bitmapX, P._bitmapY, P._bitmapWidth, P._bitmapHeight, P._offsetX, P._offsetY, P.textureWidth, P.textureHeight), 
                                g.imageWidth = P._sourceWidth, g.imageHeight = P._sourceHeight;
                            }
                            this._blendModeDirty = !0, this._colorDirty = !0;
                        }
                        c.texture = i.renderTexture, c.anchorOffsetX = this._pivotX, c.anchorOffsetY = this._pivotY, 
                        c.$updateVertices(), t.isV5 || c.$invalidateTransform();
                        var v = null !== a.weight, b = 0 !== this._parent._boneData.type;
                        (v || b) && this._identityTransform();
                    } else {
                        var f = i.parent.scale * this._armature._armatureData.scale, D = (i.rotated ? i.region.height : i.region.width) * f, T = (i.rotated ? i.region.width : i.region.height) * f, A = this._renderDisplay, y = i.renderTexture;
                        if (A.texture = y, this._armatureDisplay._batchEnabled) {
                            g = this._renderDisplay.$renderNode;
                            if (e.sys.RenderNode.prototype.cleanBeforeRender.call(g), g.image = y.bitmapData, 
                            t.isV5) g.drawImage(y.$bitmapX, y.$bitmapY, y.$bitmapWidth, y.$bitmapHeight, y.$offsetX, y.$offsetY, D, T), 
                            g.imageWidth = y.$sourceWidth, g.imageHeight = y.$sourceHeight; else {
                                var P = y;
                                g.drawImage(P._bitmapX, P._bitmapY, P._bitmapWidth, P._bitmapHeight, P._offsetX, P._offsetY, D, T), 
                                g.imageWidth = P._sourceWidth, g.imageHeight = P._sourceHeight;
                            }
                            this._blendModeDirty = !0, this._colorDirty = !0;
                        } else A.width = D, A.height = T;
                        A.anchorOffsetX = this._pivotX, A.anchorOffsetY = this._pivotY;
                    }
                    return void (this._visibleDirty = !0);
                }
            }
            this._armatureDisplay._batchEnabled && (this._renderDisplay.$renderNode.image = null);
            var O = this._renderDisplay;
            O.texture = null, O.x = 0, O.y = 0, O.visible = !1;
        }, r.prototype._updateMesh = function() {
            var e = this._armature._armatureData.scale, a = this._deformVertices.vertices, i = this._deformVertices.bones, r = this._deformVertices.verticesData, n = r.weight, s = a.length > 0 && r.inheritDeform, o = this._renderDisplay, l = o.$renderNode;
            if (null !== n) {
                var h = (E = r.data).intArray, u = E.floatArray, _ = h[r.offset + 0], f = h[n.offset + 1];
                f < 0 && (f += 65536);
                for (var c = 0, p = 0, m = n.offset + 2 + i.length, d = f, y = 0; c < _; ++c) {
                    for (var g = h[m++], v = 0, b = 0, D = 0; D < g; ++D) {
                        var T = i[h[m++]];
                        if (null !== T) {
                            var A = T.globalTransformMatrix, P = u[d++], O = u[d++] * e, S = u[d++] * e;
                            s && (O += a[y++], S += a[y++]), v += (A.a * O + A.c * S + A.tx) * P, b += (A.b * O + A.d * S + A.ty) * P;
                        }
                    }
                    l.vertices[p++] = v, l.vertices[p++] = b;
                }
                o.$updateVertices(), t.isV5 || o.$invalidateTransform();
            } else if (s) {
                var x = 0 !== this._parent._boneData.type, E = r.data, h = E.intArray, u = E.floatArray, _ = h[r.offset + 0], M = h[r.offset + 2];
                M < 0 && (M += 65536);
                for (var c = 0, C = 2 * _; c < C; c += 2) {
                    var w = u[M + c] * e + a[c], I = u[M + c + 1] * e + a[c + 1];
                    if (x) {
                        A = this._parent._getGlobalTransformMatrix(w, I);
                        l.vertices[c] = A.a * w + A.c * I + A.tx, l.vertices[c + 1] = A.b * w + A.d * I + A.ty;
                    } else l.vertices[c] = w, l.vertices[c + 1] = I;
                }
                o.$updateVertices(), t.isV5 || o.$invalidateTransform();
            }
            this._armatureDisplay._batchEnabled && (this._armatureDisplay._childDirty = !0);
        }, r.prototype._updateGlueMesh = function() {}, r.prototype._updateTransform = function() {
            throw new Error();
        }, r.prototype._identityTransform = function() {
            if (this._armatureDisplay._batchEnabled) {
                this._armatureDisplay._childDirty = !0;
                var t = this._renderDisplay.$renderNode.matrix;
                t.a = 1, t.b = 0, t.c = 0, t.d = 1, t.tx = 0, t.ty = 0;
            } else e.$TempMatrix.identity(), this._renderDisplay.$setMatrix(e.$TempMatrix, this.transformUpdateEnabled);
        }, r.prototype._updateTransformV4 = function() {
            var t = this.globalTransformMatrix;
            if (this._armatureDisplay._batchEnabled) this._armatureDisplay._childDirty = !0, 
            (e = this._renderDisplay.$renderNode.matrix).a = t.a, e.b = t.b, e.c = t.c, e.d = t.d, 
            e.tx = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX + this.globalTransformMatrix.c * this._pivotY), 
            e.ty = this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX + this.globalTransformMatrix.d * this._pivotY); else if (this.transformUpdateEnabled) this._renderDisplay.$setMatrix(t, !0); else {
                var e = this._renderDisplay.$DisplayObject[6];
                e.a = this.globalTransformMatrix.a, e.b = this.globalTransformMatrix.b, e.c = this.globalTransformMatrix.c, 
                e.d = this.globalTransformMatrix.d, e.tx = this.globalTransformMatrix.tx, e.ty = this.globalTransformMatrix.ty, 
                this._renderDisplay.$removeFlags(8), this._renderDisplay.$invalidatePosition();
            }
        }, r.prototype._updateTransformV5 = function() {
            var t = this.globalTransformMatrix;
            if (this._armatureDisplay._batchEnabled) {
                this._armatureDisplay._childDirty = !0;
                var e = this._renderDisplay.$renderNode.matrix;
                e.a = t.a, e.b = t.b, e.c = t.c, e.d = t.d, e.tx = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX + this.globalTransformMatrix.c * this._pivotY), 
                e.ty = this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX + this.globalTransformMatrix.d * this._pivotY);
            } else this._renderDisplay.$setMatrix(t, this.transformUpdateEnabled);
        }, r;
    }(t.Slot);
    t.EgretSlot = i;
}(r || (r = {}));

!function(t) {
    t.isV5 = Number(e.Capabilities.engineVersion.substr(0, 3)) >= 5.1;
    var i = function(i) {
        function r(a) {
            void 0 === a && (a = null);
            var n = i.call(this, a) || this;
            if (null === r._dragonBonesInstance) {
                var s = new t.EgretArmatureDisplay();
                r._dragonBonesInstance = new t.DragonBones(s), r._time = .001 * e.getTimer(), e.startTick(r._clockHandler, r);
            }
            return n._dragonBones = r._dragonBonesInstance, n;
        }
        return a(r, i), r._clockHandler = function(t) {
            var e = (t *= .001) - this._time;
            return r._dragonBonesInstance.advanceTime(e), this._time = t, !1;
        }, Object.defineProperty(r, "factory", {
            get: function() {
                return null === r._factory && (r._factory = new r()), r._factory;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype._isSupportMesh = function() {
            return "webgl" === e.Capabilities.renderMode || e.Capabilities.runtimeType === e.RuntimeType.NATIVE || (console.warn("Canvas can not support mesh, please change renderMode to webgl."), 
            !1);
        }, r.prototype._buildTextureAtlasData = function(a, i) {
            if (null !== a) if (i instanceof e.Texture) a.renderTexture = i; else {
                var r = new e.Texture();
                r.bitmapData = new e.BitmapData(i), a.disposeEnabled = !0, a.renderTexture = r;
            } else a = t.BaseObject.borrowObject(t.EgretTextureAtlasData);
            return a;
        }, r.prototype._buildArmature = function(e) {
            var a = t.BaseObject.borrowObject(t.Armature), i = new t.EgretArmatureDisplay();
            return a.init(e.armature, i, i, this._dragonBones), a;
        }, r.prototype._buildSlot = function(a, i, r) {
            var n = t.BaseObject.borrowObject(t.EgretSlot);
            return n.init(i, r, new e.Bitmap(), new e.Mesh()), n;
        }, r.prototype.buildArmatureDisplay = function(t, e, a, i) {
            void 0 === e && (e = ""), void 0 === a && (a = ""), void 0 === i && (i = "");
            var r = this.buildArmature(t, e || "", a || "", i || "");
            return null !== r ? (this._dragonBones.clock.add(r), r.display) : null;
        }, r.prototype.getTextureDisplay = function(t, a) {
            void 0 === a && (a = null);
            var i = this._getTextureData(null !== a ? a : "", t);
            if (null !== i && null !== i.renderTexture) {
                var r = i.renderTexture, n = new e.Bitmap(r);
                return n.width = r.textureWidth * i.parent.scale, n.height = r.textureHeight * i.parent.scale, 
                n;
            }
            return null;
        }, Object.defineProperty(r.prototype, "soundEventManager", {
            get: function() {
                return this._dragonBones.eventManager;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r, "clock", {
            get: function() {
                return r.factory.clock;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.addSkeletonData = function(t, e) {
            void 0 === e && (e = null), console.warn("已废弃"), this.addDragonBonesData(t, e);
        }, r.prototype.getSkeletonData = function(t) {
            return console.warn("已废弃"), this.getDragonBonesData(t);
        }, r.prototype.removeSkeletonData = function(t) {
            console.warn("已废弃"), this.removeDragonBonesData(t);
        }, r.prototype.addTextureAtlas = function(t, e) {
            void 0 === e && (e = null), console.warn("已废弃"), this.addTextureAtlasData(t, e);
        }, r.prototype.getTextureAtlas = function(t) {
            return console.warn("已废弃"), this.getTextureAtlasData(t);
        }, r.prototype.removeTextureAtlas = function(t) {
            console.warn("已废弃"), this.removeTextureAtlasData(t);
        }, r.prototype.buildFastArmature = function(t, e, a) {
            return void 0 === e && (e = ""), void 0 === a && (a = ""), console.warn("已废弃"), 
            this.buildArmature(t, e || "", a || "");
        }, r.prototype.dispose = function() {
            console.warn("已废弃"), this.clear();
        }, r._time = 0, r._dragonBonesInstance = null, r._factory = null, r;
    }(t.BaseFactory);
    t.EgretFactory = i;
}(r || (r = {}));

var r;

!function(t) {
    function i(t, e) {
        for (var a = 0, i = t.length; a < i; ++a) {
            var r = t[a];
            if (r.name === e) return r;
        }
        return null;
    }
    function r(t) {
        if (t.groupName && (a = l[t.groupName]) && (r = i(a.movie || a.animation, t.movieName))) return t.groupConfig = a, 
        t.movieConfig = r, !0;
        if (!t.groupName) for (var e in l) {
            var a = l[e];
            if (!t.groupName) {
                var r = i(a.movie || a.animation, t.movieName);
                if (r) return t.groupName = e, t.groupConfig = a, t.movieConfig = r, !0;
            }
        }
        return !1;
    }
    function n(e, a) {
        void 0 === a && (a = null);
        var i = {
            movieName: e,
            groupName: a
        };
        if (r(i)) {
            var n = new _(i);
            return n.clock = t.EgretFactory.factory.clock, n;
        }
        return console.warn("No movie named: " + e), null;
    }
    var s = new e.Rectangle(), o = new e.Matrix(), l = {};
    t.hasMovieGroup = function(t) {
        return t in l;
    }, t.addMovieGroup = function(t, a, i) {
        if (void 0 === i && (i = null), !t) throw new Error();
        var r = new e.ByteArray(t);
        r.endian = e.Endian.LITTLE_ENDIAN, r.position = 8;
        var n = JSON.parse(r.readUTF());
        n.offset = r.position, n.arrayBuffer = t, n.textures = [];
        var s = n.offset % 4;
        s && (n.offset += 4 - s);
        for (var o = 0, h = n.position.length; o < h; o += 3) switch (o / 3) {
          case 1:
            n.displayFrameArray = new Int16Array(n.arrayBuffer, n.offset + n.position[o], n.position[o + 1] / n.position[o + 2]);
            break;

          case 2:
            n.rectangleArray = new Float32Array(n.arrayBuffer, n.offset + n.position[o], n.position[o + 1] / n.position[o + 2]);
            break;

          case 3:
            n.transformArray = new Float32Array(n.arrayBuffer, n.offset + n.position[o], n.position[o + 1] / n.position[o + 2]);
            break;

          case 4:
            n.colorArray = new Int16Array(n.arrayBuffer, n.offset + n.position[o], n.position[o + 1] / n.position[o + 2]);
        }
        if (i = i || n.name, l[i] && console.warn("Replace group: " + i), l[i] = n, a instanceof Array) for (var o = 0, h = a.length; o < h; ++o) {
            var u = a[o];
            n.textures.push(u);
        } else n.textures.push(a);
    }, t.removeMovieGroup = function(t) {
        l[t] && delete l[t];
    }, t.removeAllMovieGroup = function() {
        for (var t in l) delete l[t];
    }, t.buildMovie = n, t.getMovieNames = function(t) {
        var e = l[t];
        if (e) {
            for (var a = [], i = e.movie || e.animation, r = 0, n = i.length; r < n; ++r) a.push(i[r].name);
            return a;
        }
        return console.warn("No group named: " + t), null;
    };
    var h = function(t) {
        function e(e) {
            var a = t.call(this, e) || this;
            return a.name = "", a.slotName = "", a.clipName = "", a;
        }
        return a(e, t), Object.defineProperty(e.prototype, "armature", {
            get: function() {
                return this.movie;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "bone", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "animationState", {
            get: function() {
                return {
                    name: this.clipName
                };
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "frameLabel", {
            get: function() {
                return this.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "movementID", {
            get: function() {
                return this.clipName;
            },
            enumerable: !0,
            configurable: !0
        }), e.START = "start", e.LOOP_COMPLETE = "loopComplete", e.COMPLETE = "complete", 
        e.FRAME_EVENT = "frameEvent", e.SOUND_EVENT = "soundEvent", e;
    }(e.Event);
    t.MovieEvent = h;
    var u = function(t) {
        function i(a) {
            var i = t.call(this) || this;
            return i.displayIndex = -1, i.colorIndex = -1, i.transformIndex = -1, i.rawDisplay = new e.Bitmap(), 
            i.childMovies = {}, i.displayConfig = null, i.childMovie = null, i.colorFilter = null, 
            i.display = i.rawDisplay, i.config = a, i.rawDisplay.name = i.config.name, i.config.blendMode || (i.config.blendMode = 0), 
            i;
        }
        return a(i, t), i.prototype.dispose = function() {
            this.rawDisplay = null, this.childMovies = null, this.config = null, this.displayConfig = null, 
            this.display = null, this.childMovie = null, this.colorFilter = null;
        }, i;
    }(e.HashObject), _ = function(i) {
        function r(t) {
            var a = i.call(this) || this;
            a.timeScale = 1, a.clipTimeScale = 1, a._batchEnabled = !0, a._isLockDispose = !1, 
            a._isDelayDispose = !1, a._isStarted = !1, a._isPlaying = !1, a._isReversing = !1, 
            a._isCompleted = !1, a._playTimes = 0, a._time = 0, a._currentTime = 0, a._currentPlayTimes = 0, 
            a._cacheFrameIndex = 0, a._frameSize = 0, a._cacheRectangle = null, a._clock = null, 
            a._currentFrameConfig = null, a._clipNames = [], a._slots = [], a._childMovies = [], 
            a._groupConfig = t.groupConfig, a._config = t.movieConfig, a._batchEnabled = !(a._config.isNested || a._config.hasChildAnimation), 
            a._batchEnabled && (a.$renderNode = new e.sys.GroupNode(), a.$renderNode.cleanBeforeRender = r._cleanBeforeRender), 
            a._clipNames.length = 0;
            for (var n = 0, s = a._config.clip.length; n < s; ++n) a._clipNames.push(a._config.clip[n].name);
            for (var n = 0, s = a._config.slot.length; n < s; ++n) {
                var o = new u(a._config.slot[n]);
                a._updateSlotBlendMode(o), a._slots.push(o), a._batchEnabled ? a.$renderNode.addNode(o.rawDisplay.$renderNode) : a.addChild(o.rawDisplay);
            }
            return a._frameSize = 2 * a._slots.length, a.name = a._config.name, a.play(), a.advanceTime(1e-6), 
            a.stop(), a;
        }
        return a(r, i), r._cleanBeforeRender = function() {}, r.prototype._configToEvent = function(t, e) {
            e.movie = this, e.clipName = this._clipConfig.name, e.name = t.name, e.slotName = t.slot || "";
        }, r.prototype._onCrossFrame = function(a) {
            for (var i = 0, r = a.actionAndEvent.length; i < r; ++i) {
                var n = a.actionAndEvent[i];
                if (n) switch (n.type) {
                  case 11:
                    if (t.EgretFactory.factory.soundEventManager.hasEventListener(h.SOUND_EVENT)) {
                        var s = e.Event.create(h, h.SOUND_EVENT);
                        this._configToEvent(n, s), t.EgretFactory.factory.soundEventManager.dispatchEvent(s), 
                        e.Event.release(s);
                    }
                    break;

                  case 10:
                    if (this.hasEventListener(h.FRAME_EVENT)) {
                        var o = e.Event.create(h, h.FRAME_EVENT);
                        this._configToEvent(n, o), this.dispatchEvent(o), e.Event.release(o);
                    }
                    break;

                  case 0:
                    if (n.slot) {
                        var l = this._getSlot(n.slot);
                        l && l.childMovie && l.childMovie.play(n.name);
                    } else this.play(n.name);
                }
            }
        }, r.prototype._updateSlotBlendMode = function(t) {
            var a = "";
            switch (t.config.blendMode) {
              case 0:
                a = e.BlendMode.NORMAL;
                break;

              case 1:
                a = e.BlendMode.ADD;
                break;

              case 5:
                a = e.BlendMode.ERASE;
            }
            a && (this._batchEnabled ? t.display.$renderNode.blendMode = e.sys.blendModeToNumber(a) : t.display.blendMode = a);
        }, r.prototype._updateSlotColor = function(t, a, i, r, n, s, o, l, h) {
            if (1 !== i || 1 !== r || 1 !== n || 0 !== o || 0 !== l || 0 !== h || 0 !== s) {
                t.colorFilter || (t.colorFilter = new e.ColorMatrixFilter());
                var u = t.colorFilter.matrix;
                if (u[0] = i, u[6] = r, u[12] = n, u[18] = a, u[4] = o, u[9] = l, u[14] = h, u[19] = s, 
                t.colorFilter.matrix = u, this._batchEnabled) t.display.$renderNode.filter = t.colorFilter, 
                t.display.$renderNode.alpha = 1; else {
                    var _ = t.display.filters;
                    _ || (_ = []), _.indexOf(t.colorFilter) < 0 && _.push(t.colorFilter), t.display.filters = _, 
                    t.display.$setAlpha(1);
                }
            } else t.colorFilter && (t.colorFilter = null), this._batchEnabled ? (t.display.$renderNode.filter = null, 
            t.display.$renderNode.alpha = a) : (t.display.filters = null, t.display.$setAlpha(a));
        }, r.prototype._updateSlotDisplay = function(a) {
            var i = a.display || a.rawDisplay, r = a.childMovie;
            if (a.displayIndex >= 0) if (a.displayConfig = this._groupConfig.display[a.displayIndex], 
            1 === a.displayConfig.type) {
                var s = a.displayConfig.name in a.childMovies ? a.childMovies[a.displayConfig.name] : null;
                s || (s = n(a.displayConfig.name, this._groupConfig.name)) && (a.childMovies[a.displayConfig.name] = s), 
                s ? (a.display = s, a.childMovie = s) : (a.display = a.rawDisplay, a.childMovie = null);
            } else a.display = a.rawDisplay, a.childMovie = null; else a.displayConfig = null, 
            a.display = a.rawDisplay, a.childMovie = null;
            if (a.display !== i && (i && (this.addChild(a.display), this.swapChildren(a.display, i), 
            this.removeChild(i)), this._updateSlotBlendMode(a)), a.display === a.rawDisplay) if (a.displayConfig && null !== a.displayConfig.regionIndex && void 0 !== a.displayConfig.regionIndex) {
                if (!a.displayConfig.texture) {
                    var o = this._groupConfig.textures[a.displayConfig.textureIndex || 0], l = 4 * a.displayConfig.regionIndex, h = this._groupConfig.rectangleArray[l], u = this._groupConfig.rectangleArray[l + 1], _ = this._groupConfig.rectangleArray[l + 2], f = this._groupConfig.rectangleArray[l + 3];
                    a.displayConfig.texture = new e.Texture(), a.displayConfig.texture.bitmapData = o.bitmapData, 
                    a.displayConfig.texture.$initData(h, u, Math.min(_, o.textureWidth - h), Math.min(f, o.textureHeight - u), 0, 0, Math.min(_, o.textureWidth - h), Math.min(f, o.textureHeight - u), o.textureWidth, o.textureHeight);
                }
                if (this._batchEnabled) {
                    var c = a.displayConfig.texture, p = a.rawDisplay.$renderNode;
                    if (e.sys.RenderNode.prototype.cleanBeforeRender.call(a.rawDisplay.$renderNode), 
                    p.image = c.bitmapData, t.isV5) p.drawImage(c.$bitmapX, c.$bitmapY, c.$bitmapWidth, c.$bitmapHeight, c.$offsetX, c.$offsetY, c.textureWidth, c.textureHeight), 
                    p.imageWidth = c._sourceWidth, p.imageHeight = c._sourceHeight; else {
                        var m = c;
                        p.drawImage(m._bitmapX, m._bitmapY, m._bitmapWidth, m._bitmapHeight, m._offsetX, m._offsetY, c.textureWidth, c.textureHeight), 
                        p.imageWidth = m._sourceWidth, p.imageHeight = m._sourceHeight;
                    }
                } else a.rawDisplay.visible = !0, a.rawDisplay.$setBitmapData(a.displayConfig.texture);
            } else this._batchEnabled ? a.rawDisplay.$renderNode.image = null : (a.rawDisplay.visible = !1, 
            a.rawDisplay.$setBitmapData(null));
            a.childMovie !== r && (r && (r.stop(), this._childMovies.slice(this._childMovies.indexOf(r), 1)), 
            a.childMovie && (this._childMovies.indexOf(a.childMovie) < 0 && this._childMovies.push(a.childMovie), 
            a.config.action ? a.childMovie.play(a.config.action) : a.childMovie.play(a.childMovie._config.action)));
        }, r.prototype._getSlot = function(t) {
            for (var e = 0, a = this._slots.length; e < a; ++e) {
                var i = this._slots[e];
                if (i.config.name === t) return i;
            }
            return null;
        }, r.prototype.$render = function() {
            this._batchEnabled || i.prototype.$render.call(this);
        }, r.prototype.$updateRenderNode = function() {
            this._batchEnabled || i.prototype.$updateRenderNode.call(this);
        }, r.prototype.$measureContentBounds = function(t) {
            this._batchEnabled && this._cacheRectangle ? t.setTo(this._cacheRectangle.x, this._cacheRectangle.y, this._cacheRectangle.width - this._cacheRectangle.x, this._cacheRectangle.height - this._cacheRectangle.y) : i.prototype.$measureContentBounds.call(this, t);
        }, r.prototype.$doAddChild = function(t, e, a) {
            return this._batchEnabled ? (console.warn("Can not add child."), null) : i.prototype.$doAddChild.call(this, t, e, a);
        }, r.prototype.$doRemoveChild = function(t, e) {
            return this._batchEnabled ? (console.warn("Can not remove child."), null) : i.prototype.$doRemoveChild.call(this, t, e);
        }, r.prototype.dispose = function() {
            if (this._isLockDispose) this._isDelayDispose = !0; else {
                if (this._clock && this._clock.remove(this), this._slots) for (var t = 0, e = this._slots.length; t < e; ++t) this._slots[t].dispose();
                this._isPlaying = !1, this._cacheRectangle = null, this._clock = null, this._groupConfig = null, 
                this._config = null, this._clipConfig = null, this._currentFrameConfig = null, this._clipArray = null, 
                this._clipNames = null, this._slots = null, this._childMovies = null;
            }
        }, r.prototype.advanceTime = function(a) {
            if (this._isPlaying) {
                this._isLockDispose = !0, a < 0 && (a = -a), a *= this.timeScale, this._time += a * this.clipTimeScale;
                var i = this._clipConfig.duration, r = i * this._playTimes, n = this._time, l = this._currentPlayTimes;
                if (this._playTimes > 0 && (n >= r || n <= -r) ? (this._isCompleted = !0, l = this._playTimes, 
                n = n < 0 ? 0 : i) : (this._isCompleted = !1, n < 0 ? (l = Math.floor(-n / i), n = i - -n % i) : (l = Math.floor(n / i), 
                n %= i), this._playTimes > 0 && l > this._playTimes && (l = this._playTimes)), this._currentTime === n) return;
                var u = Math.floor(n * this._clipConfig.cacheTimeToFrameScale);
                if (this._cacheFrameIndex !== u) {
                    this._cacheFrameIndex = u;
                    var _ = this._groupConfig.displayFrameArray, f = this._groupConfig.transformArray, c = this._groupConfig.colorArray, p = !0, m = !1, d = !1, y = this._cacheRectangle;
                    this._cacheRectangle = this._clipConfig.cacheRectangles[this._cacheFrameIndex], 
                    this._batchEnabled && !this._cacheRectangle && (d = !0, this._cacheRectangle = new e.Rectangle(), 
                    this._clipConfig.cacheRectangles[this._cacheFrameIndex] = this._cacheRectangle);
                    for (var g = 0, v = this._slots.length; g < v; ++g) {
                        var b = this._slots[g], D = this._frameSize * this._cacheFrameIndex + 2 * g;
                        D >= this._clipArray.length && (D = this._frameSize * (this._cacheFrameIndex - 1) + 2 * g);
                        var T = 2 * this._clipArray[D];
                        if (T >= 0) {
                            var A = _[T], P = 8 * _[T + 1], O = 6 * this._clipArray[D + 1], S = !1;
                            if (b.displayIndex !== A && (b.displayIndex = A, S = !0, this._updateSlotDisplay(b)), 
                            (b.colorIndex !== P || S) && (b.colorIndex = P, b.colorIndex >= 0 ? this._updateSlotColor(b, .01 * c[P], .01 * c[P + 1], .01 * c[P + 2], .01 * c[P + 3], c[P + 4], c[P + 5], c[P + 6], c[P + 7]) : this._updateSlotColor(b, 1, 1, 1, 1, 0, 0, 0, 0)), 
                            m = !0, b.transformIndex !== O && (b.transformIndex = O, this._batchEnabled ? ((x = b.display.$renderNode.matrix) || (x = b.display.$renderNode.matrix = new e.Matrix()), 
                            x.a = f[O], x.b = f[O + 1], x.c = f[O + 2], x.d = f[O + 3], x.tx = f[O + 4], x.ty = f[O + 5]) : (o.a = f[O], 
                            o.b = f[O + 1], o.c = f[O + 2], o.d = f[O + 3], o.tx = f[O + 4], o.ty = f[O + 5], 
                            b.display.$setMatrix(o))), this._batchEnabled && d && b.displayConfig) {
                                var x = b.display.$renderNode.matrix;
                                s.x = 0, s.y = 0, s.width = b.displayConfig.texture.textureWidth, s.height = b.displayConfig.texture.textureHeight, 
                                x.$transformBounds(s), p ? (p = !1, this._cacheRectangle.x = s.x, this._cacheRectangle.width = s.x + s.width, 
                                this._cacheRectangle.y = s.y, this._cacheRectangle.height = s.y + s.height) : (this._cacheRectangle.x = Math.min(this._cacheRectangle.x, s.x), 
                                this._cacheRectangle.width = Math.max(this._cacheRectangle.width, s.x + s.width), 
                                this._cacheRectangle.y = Math.min(this._cacheRectangle.y, s.y), this._cacheRectangle.height = Math.max(this._cacheRectangle.height, s.y + s.height));
                            }
                        } else -1 !== b.displayIndex && (b.displayIndex = -1, this._updateSlotDisplay(b));
                    }
                    this._cacheRectangle && (m && d && p && y && (this._cacheRectangle.x = y.x, this._cacheRectangle.y = y.y, 
                    this._cacheRectangle.width = y.width, this._cacheRectangle.height = y.height), t.isV5 || this.$invalidateContentBounds());
                }
                if (this._isCompleted && (this._isPlaying = !1), !this._isStarted && (this._isStarted = !0, 
                this.hasEventListener(h.START))) {
                    var E = e.Event.create(h, h.START);
                    E.movie = this, E.clipName = this._clipConfig.name, E.name = "", E.slotName = "", 
                    this.dispatchEvent(E);
                }
                this._isReversing = this._currentTime > n && this._currentPlayTimes === l, this._currentTime = n;
                var M = this._clipConfig.frame ? this._clipConfig.frame.length : 0;
                if (M > 0) {
                    var C = Math.floor(this._currentTime * this._config.frameRate), w = this._groupConfig.frame[this._clipConfig.frame[C]];
                    if (this._currentFrameConfig !== w) if (M > 1) {
                        var I = this._currentFrameConfig;
                        if (this._currentFrameConfig = w, !I) {
                            var B = Math.floor(this._currentTime * this._config.frameRate);
                            I = this._groupConfig.frame[this._clipConfig.frame[B]], this._isReversing || (this._currentTime <= I.position || this._currentPlayTimes !== l) && (I = this._groupConfig.frame[I.prev]);
                        }
                        if (this._isReversing) for (;I !== w; ) this._onCrossFrame(I), I = this._groupConfig.frame[I.prev]; else for (;I !== w; ) I = this._groupConfig.frame[I.next], 
                        this._onCrossFrame(I);
                    } else this._currentFrameConfig = w, this._currentFrameConfig && this._onCrossFrame(this._currentFrameConfig);
                }
                if (this._currentPlayTimes !== l) {
                    if (this._currentPlayTimes = l, this.hasEventListener(h.LOOP_COMPLETE)) {
                        var F = e.Event.create(h, h.LOOP_COMPLETE);
                        F.movie = this, F.clipName = this._clipConfig.name, F.name = "", F.slotName = "", 
                        this.dispatchEvent(F), e.Event.release(F);
                    }
                    if (this._isCompleted && this.hasEventListener(h.COMPLETE)) {
                        var N = e.Event.create(h, h.COMPLETE);
                        N.movie = this, N.clipName = this._clipConfig.name, N.name = "", N.slotName = "", 
                        this.dispatchEvent(N), e.Event.release(N);
                    }
                }
            }
            this._isLockDispose = !1, this._isDelayDispose && this.dispose();
        }, r.prototype.play = function(t, e) {
            if (void 0 === t && (t = null), void 0 === e && (e = -1), t) {
                for (var a = null, i = 0, r = this._config.clip.length; i < r; ++i) {
                    var n = this._config.clip[i];
                    n.name === t && (a = n);
                }
                a ? (this._clipConfig = a, this._clipArray = new Int16Array(this._groupConfig.arrayBuffer, this._groupConfig.offset + this._groupConfig.position[0] + this._clipConfig.p, this._clipConfig.s / this._groupConfig.position[2]), 
                this._clipConfig.cacheRectangles || (this._clipConfig.cacheRectangles = []), this._isPlaying = !0, 
                this._isStarted = !1, this._isCompleted = !1, this._playTimes = e < 0 || e !== e ? this._clipConfig.playTimes : e, 
                this._time = 0, this._currentTime = 0, this._currentPlayTimes = 0, this._cacheFrameIndex = -1, 
                this._currentFrameConfig = null, this._cacheRectangle = null, this.clipTimeScale = 1 / this._clipConfig.scale) : console.warn("No clip in movie.", this._config.name, t);
            } else this._clipConfig ? this._isPlaying || this._isCompleted ? this.play(this._clipConfig.name, this._playTimes) : this._isPlaying = !0 : this._config.action && this.play(this._config.action, e);
        }, r.prototype.stop = function() {
            this._isPlaying = !1;
        }, r.prototype.gotoAndPlay = function(t, e, a) {
            void 0 === t && (t = null), void 0 === a && (a = -1), (e %= this._clipConfig.duration) < 0 && (e += this._clipConfig.duration), 
            this.play(t, a), this._time = e, this._currentTime = e;
        }, r.prototype.gotoAndStop = function(t, e) {
            void 0 === t && (t = null), (e %= this._clipConfig.duration) < 0 && (e += this._clipConfig.duration), 
            this.play(t, 1), this._time = e, this._currentTime = e, this.advanceTime(.001), 
            this.stop();
        }, r.prototype.hasClip = function(t) {
            for (var e = 0, a = this._config.clip.length; e < a; ++e) if (this._config.clip[e].name === t) return !0;
            return !1;
        }, Object.defineProperty(r.prototype, "isPlaying", {
            get: function() {
                return this._isPlaying && !this._isCompleted;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "isComplete", {
            get: function() {
                return this._isCompleted;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "currentTime", {
            get: function() {
                return this._currentTime;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "totalTime", {
            get: function() {
                return this._clipConfig ? this._clipConfig.duration : 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "currentPlayTimes", {
            get: function() {
                return this._currentPlayTimes;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "playTimes", {
            get: function() {
                return this._playTimes;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "groupName", {
            get: function() {
                return this._groupConfig.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "clipName", {
            get: function() {
                return this._clipConfig ? this._clipConfig.name : "";
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "clipNames", {
            get: function() {
                return this._clipNames;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "clock", {
            get: function() {
                return this._clock;
            },
            set: function(t) {
                if (this._clock !== t) {
                    var e = this._clock;
                    e && e.remove(this), this._clock = t, this._clock && this._clock.add(this);
                }
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.advanceTimeBySelf = function(e) {
            this.clock = e ? t.EgretFactory.clock : null;
        }, Object.defineProperty(r.prototype, "display", {
            get: function() {
                return this;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "animation", {
            get: function() {
                return this;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "armature", {
            get: function() {
                return this;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.getAnimation = function() {
            return this;
        }, r.prototype.getArmature = function() {
            return this;
        }, r.prototype.getDisplay = function() {
            return this;
        }, r.prototype.hasAnimation = function(t) {
            return this.hasClip(t);
        }, r.prototype.invalidUpdate = function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        }, Object.defineProperty(r.prototype, "lastAnimationName", {
            get: function() {
                return this.clipName;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "animationNames", {
            get: function() {
                return this.clipNames;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "animationList", {
            get: function() {
                return this.clipNames;
            },
            enumerable: !0,
            configurable: !0
        }), r;
    }(e.DisplayObjectContainer);
    t.Movie = _;
}(r || (r = {})), window.dragonBones = r;