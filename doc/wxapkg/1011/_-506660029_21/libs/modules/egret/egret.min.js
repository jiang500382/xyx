var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
    return typeof t;
} : function(t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
}, e = function(t, e, i) {
    t.__class__ = e, i ? i.push(e) : i = [ e ], t.__types__ = t.__types__ ? i.concat(t.__types__) : i;
}, i = function(t, e) {
    function i() {
        this.constructor = t;
    }
    for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
    i.prototype = e.prototype, t.prototype = new i();
};

if (void 0 === r) var r = window;

if (void 0 === n) var n = r;

!function(t) {
    t.$hashCount = 1;
    var i = function() {
        function e() {
            this.$hashCode = t.$hashCount++;
        }
        return Object.defineProperty(e.prototype, "hashCode", {
            get: function() {
                return this.$hashCode;
            },
            enumerable: !0,
            configurable: !0
        }), e;
    }();
    t.HashObject = i, e(i.prototype, "egret.HashObject", [ "egret.IHashObject" ]);
}(p || (p = {}));

!function(t) {
    var r = [], n = function(e) {
        function n(t) {
            void 0 === t && (t = null);
            var i = e.call(this) || this;
            return i.$EventDispatcher = {
                0: t || i,
                1: {},
                2: {},
                3: 0
            }, i;
        }
        return i(n, e), n.prototype.$getEventMap = function(t) {
            var e = this.$EventDispatcher;
            return t ? e[2] : e[1];
        }, n.prototype.addEventListener = function(t, e, i, r, n) {
            this.$addListener(t, e, i, r, n);
        }, n.prototype.once = function(t, e, i, r, n) {
            this.$addListener(t, e, i, r, n, !0);
        }, n.prototype.$addListener = function(t, e, i, r, n, a) {
            var o = this.$EventDispatcher, s = r ? o[2] : o[1], h = s[t];
            h ? 0 !== o[3] && (s[t] = h = h.concat()) : h = s[t] = [], this.$insertEventBin(h, t, e, i, r, n, a);
        }, n.prototype.$insertEventBin = function(t, e, i, r, n, a, o) {
            a = 0 | +a;
            for (var s = -1, h = t.length, c = 0; h > c; c++) {
                var l = t[c];
                if (l.listener == i && l.thisObject == r && l.target == this) return !1;
                -1 == s && l.priority < a && (s = c);
            }
            var u = {
                type: e,
                listener: i,
                thisObject: r,
                priority: a,
                target: this,
                useCapture: n,
                dispatchOnce: !!o
            };
            return -1 !== s ? t.splice(s, 0, u) : t.push(u), !0;
        }, n.prototype.removeEventListener = function(t, e, i, r) {
            var n = this.$EventDispatcher, a = r ? n[2] : n[1], o = a[t];
            o && (0 !== n[3] && (a[t] = o = o.concat()), this.$removeEventBin(o, e, i), 0 == o.length && (a[t] = null));
        }, n.prototype.$removeEventBin = function(t, e, i) {
            for (var r = t.length, n = 0; r > n; n++) {
                var a = t[n];
                if (a.listener == e && a.thisObject == i && a.target == this) return t.splice(n, 1), 
                !0;
            }
            return !1;
        }, n.prototype.hasEventListener = function(t) {
            var e = this.$EventDispatcher;
            return !(!e[1][t] && !e[2][t]);
        }, n.prototype.willTrigger = function(t) {
            return this.hasEventListener(t);
        }, n.prototype.dispatchEvent = function(t) {
            return t.$currentTarget = this.$EventDispatcher[0], t.$setTarget(t.$currentTarget), 
            this.$notifyListener(t, !1);
        }, n.prototype.$notifyListener = function(t, e) {
            var i = this.$EventDispatcher, n = (e ? i[2] : i[1])[t.$type];
            if (!n) return !0;
            var a = n.length;
            if (0 == a) return !0;
            var o = r;
            i[3]++;
            for (var s = 0; a > s && ((h = n[s]).listener.call(h.thisObject, t), h.dispatchOnce && o.push(h), 
            !t.$isPropagationImmediateStopped); s++) ;
            for (i[3]--; o.length; ) {
                var h = o.pop();
                h.target.removeEventListener(h.type, h.listener, h.thisObject, h.useCapture);
            }
            return !t.$isDefaultPrevented;
        }, n.prototype.dispatchEventWith = function(e, i, r, n) {
            if (i || this.hasEventListener(e)) {
                var a = t.Event.create(t.Event, e, i, n);
                a.data = r;
                var o = this.dispatchEvent(a);
                return t.Event.release(a), o;
            }
            return !0;
        }, n;
    }(t.HashObject);
    t.EventDispatcher = n, e(n.prototype, "egret.EventDispatcher", [ "egret.IEventDispatcher" ]);
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            return i.type = null, i.$id = null, i.paddingTop = 0, i.paddingBottom = 0, i.paddingLeft = 0, 
            i.paddingRight = 0, i.$uniforms = {}, t.nativeRender && egret_native.NativeDisplayObject.createFilter(i), 
            i;
        }
        return i(r, e), r.prototype.$toJson = function() {
            return "";
        }, r.prototype.updatePadding = function() {}, r.prototype.onPropertyChange = function() {
            var e = this;
            e.updatePadding(), t.nativeRender && (egret_native.NativeDisplayObject.setFilterPadding(e.$id, e.paddingTop, e.paddingBottom, e.paddingLeft, e.paddingRight), 
            egret_native.NativeDisplayObject.setDataToFilter(e));
        }, r;
    }(t.HashObject);
    t.Filter = r, e(r.prototype, "egret.Filter");
}(p || (p = {}));

!function(t) {
    function r(t) {
        return (t %= 360) > 180 ? t -= 360 : -180 > t && (t += 360), t;
    }
    var n = function(e) {
        function n() {
            var i = e.call(this) || this;
            return i.$children = null, i.$name = "", i.$parent = null, i.$stage = null, i.$nestLevel = 0, 
            i.$useTranslate = !1, i.$matrix = new t.Matrix(), i.$matrixDirty = !1, i.$x = 0, 
            i.$y = 0, i.$scaleX = 1, i.$scaleY = 1, i.$rotation = 0, i.$skewX = 0, i.$skewXdeg = 0, 
            i.$skewY = 0, i.$skewYdeg = 0, i.$explicitWidth = NaN, i.$explicitHeight = NaN, 
            i.$anchorOffsetX = 0, i.$anchorOffsetY = 0, i.$visible = !0, i.$displayList = null, 
            i.$cacheAsBitmap = !1, i.$cacheDirty = !1, i.$alpha = 1, i.$touchEnabled = n.defaultTouchEnabled, 
            i.$scrollRect = null, i.$blendMode = 0, i.$maskedObject = null, i.$mask = null, 
            i.$maskRect = null, i.$parentDisplayList = null, i.$renderNode = null, i.$renderDirty = !1, 
            i.$renderMode = null, t.nativeRender && i.createNativeDisplayObject(), i;
        }
        return i(n, e), n.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(0);
        }, Object.defineProperty(n.prototype, "name", {
            get: function() {
                return this.$name;
            },
            set: function(t) {
                this.$name = t;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "parent", {
            get: function() {
                return this.$parent;
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setParent = function(t) {
            this.$parent = t;
        }, n.prototype.$onAddToStage = function(e, i) {
            var r = this;
            r.$stage = e, r.$nestLevel = i, r.$hasAddToStage = !0, t.Sprite.$EVENT_ADD_TO_STAGE_LIST.push(r);
        }, n.prototype.$onRemoveFromStage = function() {
            var e = this;
            e.$nestLevel = 0, t.Sprite.$EVENT_REMOVE_FROM_STAGE_LIST.push(e);
        }, n.prototype.$updateUseTransform = function() {
            var t = this;
            1 == t.$scaleX && 1 == t.$scaleY && 0 == t.$skewX && 0 == t.$skewY ? t.$useTranslate = !1 : t.$useTranslate = !0;
        }, Object.defineProperty(n.prototype, "stage", {
            get: function() {
                return this.$stage;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "matrix", {
            get: function() {
                return this.$getMatrix().clone();
            },
            set: function(t) {
                this.$setMatrix(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getMatrix = function() {
            var t = this;
            return t.$matrixDirty && (t.$matrixDirty = !1, t.$matrix.$updateScaleAndRotation(t.$scaleX, t.$scaleY, t.$skewX, t.$skewY)), 
            t.$matrix.tx = t.$x, t.$matrix.ty = t.$y, t.$matrix;
        }, n.prototype.$setMatrix = function(e, i) {
            void 0 === i && (i = !0);
            var n = this, a = n.$matrix;
            a.a = e.a, a.b = e.b, a.c = e.c, a.d = e.d, n.$x = e.tx, n.$y = e.ty, n.$matrixDirty = !1, 
            1 == a.a && 0 == a.b && 0 == a.c && 1 == a.d ? n.$useTranslate = !1 : n.$useTranslate = !0, 
            i && (n.$scaleX = a.$getScaleX(), n.$scaleY = a.$getScaleY(), n.$skewX = e.$getSkewX(), 
            n.$skewY = e.$getSkewY(), n.$skewXdeg = r(180 * n.$skewX / Math.PI), n.$skewYdeg = r(180 * n.$skewY / Math.PI), 
            n.$rotation = r(180 * n.$skewY / Math.PI)), t.nativeRender && n.$nativeDisplayObject.setMatrix(e.a, e.b, e.c, e.d, e.tx, e.ty);
        }, n.prototype.$getConcatenatedMatrix = function() {
            var e = this, i = e.$concatenatedMatrix;
            i || (i = e.$concatenatedMatrix = new t.Matrix()), e.$parent ? e.$parent.$getConcatenatedMatrix().$preMultiplyInto(e.$getMatrix(), i) : i.copyFrom(e.$getMatrix());
            var r = e.$anchorOffsetX, n = e.$anchorOffsetY, a = e.$scrollRect;
            return a ? i.$preMultiplyInto(t.$TempMatrix.setTo(1, 0, 0, 1, -a.x - r, -a.y - n), i) : (0 != r || 0 != n) && i.$preMultiplyInto(t.$TempMatrix.setTo(1, 0, 0, 1, -r, -n), i), 
            e.$concatenatedMatrix;
        }, n.prototype.$getInvertedConcatenatedMatrix = function() {
            var e = this;
            return e.$invertedConcatenatedMatrix || (e.$invertedConcatenatedMatrix = new t.Matrix()), 
            e.$getConcatenatedMatrix().$invertInto(e.$invertedConcatenatedMatrix), e.$invertedConcatenatedMatrix;
        }, Object.defineProperty(n.prototype, "x", {
            get: function() {
                return this.$getX();
            },
            set: function(t) {
                this.$setX(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getX = function() {
            return this.$x;
        }, n.prototype.$setX = function(e) {
            var i = this;
            if (i.$x == e) return !1;
            if (i.$x = e, t.nativeRender) i.$nativeDisplayObject.setX(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
            return !0;
        }, Object.defineProperty(n.prototype, "y", {
            get: function() {
                return this.$getY();
            },
            set: function(t) {
                this.$setY(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getY = function() {
            return this.$y;
        }, n.prototype.$setY = function(e) {
            var i = this;
            if (i.$y == e) return !1;
            if (i.$y = e, t.nativeRender) i.$nativeDisplayObject.setY(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
            return !0;
        }, Object.defineProperty(n.prototype, "scaleX", {
            get: function() {
                return this.$getScaleX();
            },
            set: function(t) {
                this.$setScaleX(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getScaleX = function() {
            return this.$scaleX;
        }, n.prototype.$setScaleX = function(e) {
            var i = this;
            if (i.$scaleX = e, i.$matrixDirty = !0, i.$updateUseTransform(), t.nativeRender) i.$nativeDisplayObject.setScaleX(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "scaleY", {
            get: function() {
                return this.$getScaleY();
            },
            set: function(t) {
                this.$setScaleY(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getScaleY = function() {
            return this.$scaleY;
        }, n.prototype.$setScaleY = function(e) {
            var i = this;
            if (i.$scaleY = e, i.$matrixDirty = !0, i.$updateUseTransform(), t.nativeRender) i.$nativeDisplayObject.setScaleY(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "rotation", {
            get: function() {
                return this.$getRotation();
            },
            set: function(t) {
                this.$setRotation(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getRotation = function() {
            return this.$rotation;
        }, n.prototype.$setRotation = function(e) {
            var i = this;
            if ((e = r(e)) != i.$rotation) {
                var n = (e - i.$rotation) / 180 * Math.PI;
                if (i.$skewX += n, i.$skewY += n, i.$rotation = e, i.$matrixDirty = !0, i.$updateUseTransform(), 
                t.nativeRender) i.$nativeDisplayObject.setRotation(e); else {
                    var a = i.$parent;
                    a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp());
                    var o = i.$maskedObject;
                    o && !o.$cacheDirty && (o.$cacheDirty = !0, o.$cacheDirtyUp());
                }
            }
        }, Object.defineProperty(n.prototype, "skewX", {
            get: function() {
                return this.$skewXdeg;
            },
            set: function(t) {
                this.$setSkewX(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setSkewX = function(e) {
            var i = this;
            if (e != i.$skewXdeg) if (i.$skewXdeg = e, e = r(e), e = e / 180 * Math.PI, i.$skewX = e, 
            i.$matrixDirty = !0, i.$updateUseTransform(), t.nativeRender) i.$nativeDisplayObject.setSkewX(i.$skewXdeg); else {
                var n = i.$parent;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
                var a = i.$maskedObject;
                a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "skewY", {
            get: function() {
                return this.$skewYdeg;
            },
            set: function(t) {
                this.$setSkewY(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setSkewY = function(e) {
            var i = this;
            if (e != i.$skewYdeg) if (i.$skewYdeg = e, e = r(e), e = e / 180 * Math.PI, i.$skewY = e, 
            i.$matrixDirty = !0, i.$updateUseTransform(), t.nativeRender) i.$nativeDisplayObject.setSkewY(i.$skewYdeg); else {
                var n = i.$parent;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
                var a = i.$maskedObject;
                a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "width", {
            get: function() {
                return this.$getWidth();
            },
            set: function(t) {
                this.$setWidth(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getWidth = function() {
            var t = this;
            return isNaN(t.$explicitWidth) ? t.$getOriginalBounds().width : t.$explicitWidth;
        }, n.prototype.$setWidth = function(t) {
            this.$explicitWidth = isNaN(t) ? NaN : t;
        }, Object.defineProperty(n.prototype, "height", {
            get: function() {
                return this.$getHeight();
            },
            set: function(t) {
                this.$setHeight(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getHeight = function() {
            var t = this;
            return isNaN(t.$explicitHeight) ? t.$getOriginalBounds().height : t.$explicitHeight;
        }, n.prototype.$setHeight = function(t) {
            this.$explicitHeight = isNaN(t) ? NaN : t;
        }, Object.defineProperty(n.prototype, "measuredWidth", {
            get: function() {
                return this.$getOriginalBounds().width;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "measuredHeight", {
            get: function() {
                return this.$getOriginalBounds().height;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "anchorOffsetX", {
            get: function() {
                return this.$anchorOffsetX;
            },
            set: function(t) {
                this.$setAnchorOffsetX(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setAnchorOffsetX = function(e) {
            var i = this;
            i.$anchorOffsetX = e, t.nativeRender && i.$nativeDisplayObject.setAnchorOffsetX(e);
        }, Object.defineProperty(n.prototype, "anchorOffsetY", {
            get: function() {
                return this.$anchorOffsetY;
            },
            set: function(t) {
                this.$setAnchorOffsetY(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setAnchorOffsetY = function(e) {
            var i = this;
            i.$anchorOffsetY = e, t.nativeRender && i.$nativeDisplayObject.setAnchorOffsetY(e);
        }, Object.defineProperty(n.prototype, "visible", {
            get: function() {
                return this.$visible;
            },
            set: function(t) {
                this.$setVisible(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setVisible = function(e) {
            var i = this;
            if (i.$visible = e, t.nativeRender) i.$nativeDisplayObject.setVisible(e); else {
                i.$updateRenderMode();
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "cacheAsBitmap", {
            get: function() {
                return this.$cacheAsBitmap;
            },
            set: function(e) {
                var i = this;
                i.$cacheAsBitmap = e, t.nativeRender ? i.$nativeDisplayObject.setCacheAsBitmap(e) : i.$setHasDisplayList(e);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setHasDisplayList = function(e) {
            var i = this;
            if (!!i.$displayList != e) if (e) {
                var r = t.sys.DisplayList.create(i);
                r && (i.$displayList = r, i.$cacheDirty = !0);
            } else i.$displayList = null;
        }, n.prototype.$cacheDirtyUp = function() {
            var t = this.$parent;
            t && !t.$cacheDirty && (t.$cacheDirty = !0, t.$cacheDirtyUp());
        }, Object.defineProperty(n.prototype, "alpha", {
            get: function() {
                return this.$alpha;
            },
            set: function(t) {
                this.$setAlpha(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setAlpha = function(e) {
            var i = this;
            if (i.$alpha = e, t.nativeRender) i.$nativeDisplayObject.setAlpha(e); else {
                i.$updateRenderMode();
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, Object.defineProperty(n.prototype, "touchEnabled", {
            get: function() {
                return this.$getTouchEnabled();
            },
            set: function(t) {
                this.$setTouchEnabled(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$getTouchEnabled = function() {
            return this.$touchEnabled;
        }, n.prototype.$setTouchEnabled = function(t) {
            this.$touchEnabled = t;
        }, Object.defineProperty(n.prototype, "scrollRect", {
            get: function() {
                return this.$scrollRect;
            },
            set: function(t) {
                this.$setScrollRect(t);
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setScrollRect = function(e) {
            var i = this;
            return e || i.$scrollRect ? (e ? (i.$scrollRect || (i.$scrollRect = new t.Rectangle()), 
            i.$scrollRect.copyFrom(e), t.nativeRender && i.$nativeDisplayObject.setScrollRect(e.x, e.y, e.width, e.height)) : (i.$scrollRect = null, 
            t.nativeRender && i.$nativeDisplayObject.setScrollRect(0, 0, 0, 0)), void (t.nativeRender || i.$updateRenderMode())) : void i.$updateRenderMode();
        }, Object.defineProperty(n.prototype, "blendMode", {
            get: function() {
                return t.sys.numberToBlendMode(this.$blendMode);
            },
            set: function(e) {
                var i = this, r = t.sys.blendModeToNumber(e);
                if (i.$blendMode = r, t.nativeRender) i.$nativeDisplayObject.setBlendMode(r); else {
                    i.$updateRenderMode();
                    var n = i.$parent;
                    n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
                    var a = i.$maskedObject;
                    a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp());
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "mask", {
            get: function() {
                var t = this;
                return t.$mask ? t.$mask : t.$maskRect;
            },
            set: function(e) {
                var i = this;
                if (e !== i) {
                    if (e) if (e instanceof n) {
                        if (e == i.$mask) return;
                        e.$maskedObject && (e.$maskedObject.mask = null), e.$maskedObject = i, i.$mask = e, 
                        t.nativeRender || e.$updateRenderMode(), i.$maskRect && (t.nativeRender && i.$nativeDisplayObject.setMaskRect(0, 0, 0, 0), 
                        i.$maskRect = null), t.nativeRender && i.$nativeDisplayObject.setMask(e.$nativeDisplayObject.id);
                    } else i.$maskRect || (i.$maskRect = new t.Rectangle()), i.$maskRect.copyFrom(e), 
                    t.nativeRender && i.$nativeDisplayObject.setMaskRect(e.x, e.y, e.width, e.height), 
                    i.$mask && (i.$mask.$maskedObject = null, t.nativeRender || i.$mask.$updateRenderMode()), 
                    i.mask && (t.nativeRender && i.$nativeDisplayObject.setMask(-1), i.$mask = null); else i.$mask && (i.$mask.$maskedObject = null, 
                    t.nativeRender || i.$mask.$updateRenderMode()), i.mask && (t.nativeRender && i.$nativeDisplayObject.setMask(-1), 
                    i.$mask = null), i.$maskRect && (t.nativeRender && i.$nativeDisplayObject.setMaskRect(0, 0, 0, 0), 
                    i.$maskRect = null);
                    t.nativeRender || i.$updateRenderMode();
                }
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.$setMaskRect = function(e) {
            var i = this;
            (e || i.$maskRect) && (e ? (i.$maskRect || (i.$maskRect = new t.Rectangle()), i.$maskRect.copyFrom(e)) : i.$maskRect = null);
        }, Object.defineProperty(n.prototype, "filters", {
            get: function() {
                return this.$filters;
            },
            set: function(e) {
                var i = this;
                if (i.$filters || e) e && e.length ? (e = e.concat(), i.$filters = e, t.nativeRender && i.$nativeDisplayObject.setFilters(e)) : (i.$filters = e, 
                t.nativeRender && i.$nativeDisplayObject.setFilters(null)), t.nativeRender || (i.$updateRenderMode(), 
                (r = i.$parent) && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp()), (n = i.$maskedObject) && !n.$cacheDirty && (n.$cacheDirty = !0, 
                n.$cacheDirtyUp())); else if (i.$filters = e, t.nativeRender) i.$nativeDisplayObject.setFilters(null); else {
                    i.$updateRenderMode();
                    var r = i.$parent;
                    r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                    var n = i.$maskedObject;
                    n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
                }
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.getTransformedBounds = function(t, e) {
            return t = t || this, this.$getTransformedBounds(t, e);
        }, n.prototype.getBounds = function(t, e) {
            void 0 === e && (e = !0);
            var i = this;
            return t = i.$getTransformedBounds(i, t), e && (0 != i.$anchorOffsetX && (t.x -= i.$anchorOffsetX), 
            0 != i.$anchorOffsetY && (t.y -= i.$anchorOffsetY)), t;
        }, n.prototype.$getTransformedBounds = function(e, i) {
            var r = this, n = r.$getOriginalBounds();
            if (i || (i = new t.Rectangle()), i.copyFrom(n), e == r) return i;
            var a;
            return e ? (a = t.$TempMatrix, e.$getInvertedConcatenatedMatrix().$preMultiplyInto(r.$getConcatenatedMatrix(), a)) : a = r.$getConcatenatedMatrix(), 
            a.$transformBounds(i), i;
        }, n.prototype.globalToLocal = function(e, i, r) {
            if (void 0 === e && (e = 0), void 0 === i && (i = 0), t.nativeRender) {
                egret_native.updateNativeRender();
                var n = egret_native.nrGlobalToLocal(this.$nativeDisplayObject.id, e, i).split(","), a = parseFloat(n[0]), o = parseFloat(n[1]);
                return r ? r.setTo(a, o) : r = new t.Point(a, o), r;
            }
            return this.$getInvertedConcatenatedMatrix().transformPoint(e, i, r);
        }, n.prototype.localToGlobal = function(e, i, r) {
            if (void 0 === e && (e = 0), void 0 === i && (i = 0), t.nativeRender) {
                egret_native.updateNativeRender();
                var n = egret_native.nrLocalToGlobal(this.$nativeDisplayObject.id, e, i).split(","), a = parseFloat(n[0]), o = parseFloat(n[1]);
                return r ? r.setTo(a, o) : r = new t.Point(a, o), r;
            }
            return this.$getConcatenatedMatrix().transformPoint(e, i, r);
        }, n.prototype.$getOriginalBounds = function() {
            var t = this, e = t.$getContentBounds();
            t.$measureChildBounds(e);
            var i = t.$measureFiltersOffset(!1);
            return i && (e.x += i.minX, e.y += i.minY, e.width += -i.minX + i.maxX, e.height += -i.minY + i.maxY), 
            e;
        }, n.prototype.$measureChildBounds = function(t) {}, n.prototype.$getContentBounds = function() {
            var e = t.$TempRectangle;
            return e.setEmpty(), this.$measureContentBounds(e), e;
        }, n.prototype.$measureContentBounds = function(t) {}, n.prototype.$getRenderNode = function() {
            var t = this, e = t.$renderNode;
            return e ? (t.$renderDirty && (e.cleanBeforeRender(), t.$updateRenderNode(), t.$renderDirty = !1, 
            e = t.$renderNode), e) : null;
        }, n.prototype.$updateRenderMode = function() {
            var t = this;
            !t.$visible || t.$alpha <= 0 || t.$maskedObject ? t.$renderMode = 1 : t.filters && t.filters.length > 0 ? t.$renderMode = 2 : 0 !== t.$blendMode || t.$mask && t.$mask.$stage ? t.$renderMode = 3 : t.$scrollRect || t.$maskRect ? t.$renderMode = 4 : t.$renderMode = null;
        }, n.prototype.$measureFiltersOffset = function(e) {
            for (var i = this, r = 0, n = 0, a = 0, o = 0; i; ) {
                var s = i.$filters;
                if (s && s.length) for (var h = s.length, c = 0; h > c; c++) {
                    var l = s[c];
                    if ("blur" == l.type) r -= u = l.blurX, n -= p = l.blurY, a += u, o += p; else if ("glow" == l.type) {
                        var u = l.blurX, p = l.blurY;
                        r -= u, n -= p, a += u, o += p;
                        var d = l.distance || 0, f = l.angle || 0, $ = 0, y = 0;
                        0 != d && ($ = d * t.NumberUtils.cos(f), $ = $ > 0 ? Math.ceil($) : Math.floor($), 
                        y = d * t.NumberUtils.sin(f), y = y > 0 ? Math.ceil(y) : Math.floor(y), r += $, 
                        a += $, n += y, o += y);
                    } else if ("custom" == l.type) {
                        var g = l.padding;
                        r -= g, n -= g, a += g, o += g;
                    }
                }
                i = e ? i.$parent : null;
            }
            return r = Math.min(r, 0), n = Math.min(n, 0), a = Math.max(a, 0), o = Math.max(o, 0), 
            {
                minX: r,
                minY: n,
                maxX: a,
                maxY: o
            };
        }, n.prototype.$getConcatenatedMatrixAt = function(e, i) {
            var r = e.$getInvertedConcatenatedMatrix();
            if (0 === r.a || 0 === r.d) {
                var n = this, a = e.$nestLevel;
                for (i.identity(); n.$nestLevel > a; ) {
                    var o = n.$scrollRect;
                    o && i.concat(t.$TempMatrix.setTo(1, 0, 0, 1, -o.x, -o.y)), i.concat(n.$getMatrix()), 
                    n = n.$parent;
                }
            } else r.$preMultiplyInto(i, i);
        }, n.prototype.$updateRenderNode = function() {}, n.prototype.$hitTest = function(t, e) {
            var i = this;
            if (!i.$renderNode || !i.$visible || 0 == i.$scaleX || 0 == i.$scaleY) return null;
            var r = i.$getInvertedConcatenatedMatrix();
            if (0 == r.a && 0 == r.b && 0 == r.c && 0 == r.d) return null;
            var n = i.$getContentBounds(), a = r.a * t + r.c * e + r.tx, o = r.b * t + r.d * e + r.ty;
            if (n.contains(a, o)) {
                if (!i.$children) {
                    var s = i.$scrollRect ? i.$scrollRect : i.$maskRect;
                    if (s && !s.contains(a, o)) return null;
                    if (i.$mask && !i.$mask.$hitTest(t, e)) return null;
                }
                return i;
            }
            return null;
        }, n.prototype.hitTestPoint = function(e, i, r) {
            var n = this;
            if (r) {
                var a = (u = n.$getInvertedConcatenatedMatrix()).a * e + u.c * i + u.tx, o = u.b * e + u.d * i + u.ty, s = void 0;
                if (t.nativeRender) {
                    (c = t.sys.customHitTestBuffer).resize(3, 3), egret_native.forHitTest = !0, egret_native.activateBuffer(c), 
                    egret_native.updateNativeRender(), egret_native.nrRenderDisplayObject2(n.$nativeDisplayObject.id, 1 - a, 1 - o, !0);
                    try {
                        s = new Uint8Array(4), egret_native.nrGetPixels(1, 1, 1, 1, s);
                    } catch (e) {
                        throw new Error(t.sys.tr(1039));
                    }
                    return egret_native.activateBuffer(null), egret_native.forHitTest = !1, 0 !== s[3];
                }
                var h = n.$displayList;
                if (h) {
                    var c = h.renderBuffer;
                    try {
                        s = c.getPixels(a - h.offsetX, o - h.offsetY);
                    } catch (e) {
                        throw new Error(t.sys.tr(1039));
                    }
                } else {
                    (c = t.sys.customHitTestBuffer).resize(3, 3);
                    var l = t.Matrix.create();
                    l.identity(), l.translate(1 - a, 1 - o), t.sys.systemRenderer.render(this, c, l, !0), 
                    t.Matrix.release(l);
                    try {
                        s = c.getPixels(1, 1);
                    } catch (e) {
                        throw new Error(t.sys.tr(1039));
                    }
                }
                return 0 !== s[3];
            }
            if (0 == n.$scaleX || 0 == n.$scaleY) return !1;
            var u = n.$getInvertedConcatenatedMatrix(), p = n.getBounds(null, !1), a = u.a * e + u.c * i + u.tx, o = u.b * e + u.d * i + u.ty;
            if (p.contains(a, o)) {
                var d = n.$scrollRect ? n.$scrollRect : n.$maskRect;
                return !(d && !d.contains(a, o));
            }
            return !1;
        }, n.prototype.$addListener = function(i, r, a, o, s, h) {
            e.prototype.$addListener.call(this, i, r, a, o, s, h);
            var c = i == t.Event.ENTER_FRAME;
            if (c || i == t.Event.RENDER) {
                var l = c ? n.$enterFrameCallBackList : n.$renderCallBackList;
                -1 == l.indexOf(this) && l.push(this);
            }
        }, n.prototype.removeEventListener = function(i, r, a, o) {
            e.prototype.removeEventListener.call(this, i, r, a, o);
            var s = i == t.Event.ENTER_FRAME;
            if ((s || i == t.Event.RENDER) && !this.hasEventListener(i)) {
                var h = s ? n.$enterFrameCallBackList : n.$renderCallBackList, c = h.indexOf(this);
                -1 !== c && h.splice(c, 1);
            }
        }, n.prototype.dispatchEvent = function(t) {
            if (!t.$bubbles) return e.prototype.dispatchEvent.call(this, t);
            var i = this.$getPropagationList(this), r = .5 * i.length;
            return t.$setTarget(this), this.$dispatchPropagationEvent(t, i, r), !t.$isDefaultPrevented;
        }, n.prototype.$getPropagationList = function(t) {
            for (var e = []; t; ) e.push(t), t = t.$parent;
            var i = e.concat();
            return i.reverse(), e = i.concat(e);
        }, n.prototype.$dispatchPropagationEvent = function(t, e, i) {
            for (var r = e.length, n = i - 1, a = 0; r > a; a++) {
                var o = e[a];
                if (t.$currentTarget = o, t.$eventPhase = n > a ? 1 : a == i || a == n ? 2 : 3, 
                o.$notifyListener(t, i > a), t.$isPropagationStopped || t.$isPropagationImmediateStopped) return;
            }
        }, n.prototype.willTrigger = function(t) {
            for (var e = this; e; ) {
                if (e.hasEventListener(t)) return !0;
                e = e.$parent;
            }
            return !1;
        }, n.defaultTouchEnabled = !1, n.$enterFrameCallBackList = [], n.$renderCallBackList = [], 
        n;
    }(t.EventDispatcher);
    t.DisplayObject = n, e(n.prototype, "egret.DisplayObject");
}(p || (p = {}));

!function(t) {
    t.$TextureScaleFactor = 1;
    var r = function(e) {
        function r() {
            var t = e.call(this) || this;
            return t.disposeBitmapData = !0, t.$bitmapX = 0, t.$bitmapY = 0, t.$bitmapWidth = 0, 
            t.$bitmapHeight = 0, t.$offsetX = 0, t.$offsetY = 0, t.$textureWidth = 0, t.$textureHeight = 0, 
            t.$sourceWidth = 0, t.$sourceHeight = 0, t.$bitmapData = null, t.$rotated = !1, 
            t;
        }
        return i(r, e), Object.defineProperty(r.prototype, "textureWidth", {
            get: function() {
                return this.$getTextureWidth();
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$getTextureWidth = function() {
            return this.$textureWidth;
        }, Object.defineProperty(r.prototype, "textureHeight", {
            get: function() {
                return this.$getTextureHeight();
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$getTextureHeight = function() {
            return this.$textureHeight;
        }, r.prototype.$getScaleBitmapWidth = function() {
            return this.$bitmapWidth * t.$TextureScaleFactor;
        }, r.prototype.$getScaleBitmapHeight = function() {
            return this.$bitmapHeight * t.$TextureScaleFactor;
        }, Object.defineProperty(r.prototype, "bitmapData", {
            get: function() {
                return this.$bitmapData;
            },
            set: function(t) {
                this._setBitmapData(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype._setBitmapData = function(e) {
            this.$bitmapData = e;
            var i = t.$TextureScaleFactor, r = e.width * i, n = e.height * i;
            this.$initData(0, 0, r, n, 0, 0, r, n, e.width, e.height);
        }, r.prototype.$initData = function(e, i, r, n, a, o, s, h, c, l, u) {
            void 0 === u && (u = !1);
            var p = t.$TextureScaleFactor;
            this.$bitmapX = e / p, this.$bitmapY = i / p, this.$bitmapWidth = r / p, this.$bitmapHeight = n / p, 
            this.$offsetX = a, this.$offsetY = o, this.$textureWidth = s, this.$textureHeight = h, 
            this.$sourceWidth = c, this.$sourceHeight = l, this.$rotated = u, t.BitmapData.$invalidate(this.$bitmapData);
        }, r.prototype.getPixel32 = function(t, e) {
            throw new Error();
        }, r.prototype.getPixels = function(t, e, i, r) {
            throw void 0 === i && (i = 1), void 0 === r && (r = 1), new Error();
        }, r.prototype.toDataURL = function(t, e, i) {
            throw new Error();
        }, r.prototype.saveToFile = function(t, e, i) {
            throw new Error();
        }, r.prototype.dispose = function() {
            this.$bitmapData && (this.disposeBitmapData && this.$bitmapData.$dispose(), this.$bitmapData = null), 
            t.nativeRender && egret_native.NativeDisplayObject.disposeTexture(this);
        }, r;
    }(t.HashObject);
    t.Texture = r, e(r.prototype, "egret.Texture");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e(e, i, r, n) {
            var a = t.call(this) || this;
            return a.$eventPhase = 2, a.$currentTarget = null, a.$target = null, a.$isDefaultPrevented = !1, 
            a.$isPropagationStopped = !1, a.$isPropagationImmediateStopped = !1, a.$type = e, 
            a.$bubbles = !!i, a.$cancelable = !!r, a.data = n, a;
        }
        return i(e, t), Object.defineProperty(e.prototype, "type", {
            get: function() {
                return this.$type;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "bubbles", {
            get: function() {
                return this.$bubbles;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "cancelable", {
            get: function() {
                return this.$cancelable;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "eventPhase", {
            get: function() {
                return this.$eventPhase;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "currentTarget", {
            get: function() {
                return this.$currentTarget;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "target", {
            get: function() {
                return this.$target;
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.$setTarget = function(t) {
            return this.$target = t, !0;
        }, e.prototype.isDefaultPrevented = function() {
            return this.$isDefaultPrevented;
        }, e.prototype.preventDefault = function() {
            this.$cancelable && (this.$isDefaultPrevented = !0);
        }, e.prototype.stopPropagation = function() {
            this.$bubbles && (this.$isPropagationStopped = !0);
        }, e.prototype.stopImmediatePropagation = function() {
            this.$bubbles && (this.$isPropagationImmediateStopped = !0);
        }, e.prototype.clean = function() {
            this.data = this.$currentTarget = null, this.$setTarget(null);
        }, e.dispatchEvent = function(t, i, r, n) {
            void 0 === r && (r = !1);
            var a = e.create(e, i, r), o = e._getPropertyData(e);
            void 0 != n && (o.data = n);
            var s = t.dispatchEvent(a);
            return e.release(a), s;
        }, e._getPropertyData = function(t) {
            var e = t._props;
            return e || (e = t._props = {}), e;
        }, e.create = function(t, e, i, r) {
            var n = t.eventPool;
            if (n || (n = t.eventPool = []), n.length) {
                var a = n.pop();
                return a.$type = e, a.$bubbles = !!i, a.$cancelable = !!r, a.$isDefaultPrevented = !1, 
                a.$isPropagationStopped = !1, a.$isPropagationImmediateStopped = !1, a.$eventPhase = 2, 
                a;
            }
            return new t(e, i, r);
        }, e.release = function(t) {
            t.clean(), Object.getPrototypeOf(t).constructor.eventPool.push(t);
        }, e.ADDED_TO_STAGE = "addedToStage", e.REMOVED_FROM_STAGE = "removedFromStage", 
        e.ADDED = "added", e.REMOVED = "removed", e.ENTER_FRAME = "enterFrame", e.RENDER = "render", 
        e.RESIZE = "resize", e.CHANGE = "change", e.CHANGING = "changing", e.COMPLETE = "complete", 
        e.LOOP_COMPLETE = "loopComplete", e.FOCUS_IN = "focusIn", e.FOCUS_OUT = "focusOut", 
        e.ENDED = "ended", e.ACTIVATE = "activate", e.DEACTIVATE = "deactivate", e.CLOSE = "close", 
        e.CONNECT = "connect", e.LEAVE_STAGE = "leaveStage", e.SOUND_COMPLETE = "soundComplete", 
        e;
    }(t.HashObject);
    t.Event = r, e(r.prototype, "egret.Event");
}(p || (p = {}));

!function(t) {
    t.getString = function() {
        return "";
    }, t.$error = function(t) {
        throw new Error("#" + t);
    }, t.$warn = function() {}, t.$markCannotUse = function() {};
}(p || (p = {}));

!function(t) {
    var r = [], n = Math.PI / 180, a = function(e) {
        function a(t, i) {
            void 0 === t && (t = 0), void 0 === i && (i = 0);
            var r = e.call(this) || this;
            return r.x = t, r.y = i, r;
        }
        return i(a, e), a.release = function(t) {
            t && r.push(t);
        }, a.create = function(t, e) {
            var i = r.pop();
            return i || (i = new a()), i.setTo(t, e);
        }, Object.defineProperty(a.prototype, "length", {
            get: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.setTo = function(t, e) {
            return this.x = t, this.y = e, this;
        }, a.prototype.clone = function() {
            return new a(this.x, this.y);
        }, a.prototype.equals = function(t) {
            return this.x == t.x && this.y == t.y;
        }, a.distance = function(t, e) {
            return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y));
        }, a.prototype.copyFrom = function(t) {
            this.x = t.x, this.y = t.y;
        }, a.prototype.add = function(t) {
            return new a(this.x + t.x, this.y + t.y);
        }, a.interpolate = function(t, e, i) {
            var r = 1 - i;
            return new a(t.x * i + e.x * r, t.y * i + e.y * r);
        }, a.prototype.normalize = function(t) {
            if (0 != this.x || 0 != this.y) {
                var e = t / this.length;
                this.x *= e, this.y *= e;
            }
        }, a.prototype.offset = function(t, e) {
            this.x += t, this.y += e;
        }, a.polar = function(e, i) {
            return new a(e * t.NumberUtils.cos(i / n), e * t.NumberUtils.sin(i / n));
        }, a.prototype.subtract = function(t) {
            return new a(this.x - t.x, this.y - t.y);
        }, a.prototype.toString = function() {
            return "(x=" + this.x + ", y=" + this.y + ")";
        }, a;
    }(t.HashObject);
    t.Point = a, e(a.prototype, "egret.Point"), t.$TempPoint = new a();
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var t = e.call(this) || this;
            return t.$touchChildren = !0, t.$children = [], t;
        }
        return i(r, e), Object.defineProperty(r.prototype, "numChildren", {
            get: function() {
                return this.$children.length;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.addChild = function(t) {
            var e = this.$children.length;
            return t.$parent == this && e--, this.$doAddChild(t, e);
        }, r.prototype.addChildAt = function(t, e) {
            return (0 > (e = 0 | +e) || e >= this.$children.length) && (e = this.$children.length, 
            t.$parent == this && e--), this.$doAddChild(t, e);
        }, r.prototype.$doAddChild = function(e, i, n) {
            void 0 === n && (n = !0);
            var a = this, o = e.$parent;
            if (o == a) return a.doSetChildIndex(e, i), e;
            o && o.removeChild(e), a.$children.splice(i, 0, e), e.$setParent(a);
            var s = a.$stage;
            if (s && e.$onAddToStage(s, a.$nestLevel + 1), n && e.dispatchEventWith(t.Event.ADDED, !0), 
            s) for (var h = r.$EVENT_ADD_TO_STAGE_LIST; h.length; ) {
                var c = h.shift();
                c.$stage && n && c.dispatchEventWith(t.Event.ADDED_TO_STAGE);
            }
            if (t.nativeRender) a.$nativeDisplayObject.addChildAt(e.$nativeDisplayObject.id, i); else if (e.$maskedObject && e.$maskedObject.$updateRenderMode(), 
            !a.$cacheDirty) {
                a.$cacheDirty = !0;
                var l = a.$parent;
                l && !l.$cacheDirty && (l.$cacheDirty = !0, l.$cacheDirtyUp());
                var u = a.$maskedObject;
                u && !u.$cacheDirty && (u.$cacheDirty = !0, u.$cacheDirtyUp());
            }
            return this.$childAdded(e, i), e;
        }, r.prototype.contains = function(t) {
            for (;t; ) {
                if (t == this) return !0;
                t = t.$parent;
            }
            return !1;
        }, r.prototype.getChildAt = function(t) {
            return (t = 0 | +t) >= 0 && t < this.$children.length ? this.$children[t] : null;
        }, r.prototype.getChildIndex = function(t) {
            return this.$children.indexOf(t);
        }, r.prototype.getChildByName = function(t) {
            for (var e, i = this.$children, r = i.length, n = 0; r > n; n++) if ((e = i[n]).name == t) return e;
            return null;
        }, r.prototype.removeChild = function(t) {
            var e = this.$children.indexOf(t);
            return e >= 0 ? this.$doRemoveChild(e) : null;
        }, r.prototype.removeChildAt = function(t) {
            return (t = 0 | +t) >= 0 && t < this.$children.length ? this.$doRemoveChild(t) : null;
        }, r.prototype.$doRemoveChild = function(e, i) {
            void 0 === i && (i = !0), e = 0 | +e;
            var n = this, a = this.$children, o = a[e];
            if (this.$childRemoved(o, e), i && o.dispatchEventWith(t.Event.REMOVED, !0), this.$stage) {
                o.$onRemoveFromStage();
                for (var s = r.$EVENT_REMOVE_FROM_STAGE_LIST; s.length > 0; ) {
                    var h = s.shift();
                    i && h.$hasAddToStage && (h.$hasAddToStage = !1, h.dispatchEventWith(t.Event.REMOVED_FROM_STAGE)), 
                    h.$hasAddToStage = !1, h.$stage = null;
                }
            }
            this.$displayList || this.$parentDisplayList, o.$setParent(null);
            var c = a.indexOf(o);
            if (-1 != c && a.splice(c, 1), t.nativeRender) n.$nativeDisplayObject.removeChild(o.$nativeDisplayObject.id); else if (o.$maskedObject && o.$maskedObject.$updateRenderMode(), 
            !n.$cacheDirty) {
                n.$cacheDirty = !0;
                var l = n.$parent;
                l && !l.$cacheDirty && (l.$cacheDirty = !0, l.$cacheDirtyUp());
                var u = n.$maskedObject;
                u && !u.$cacheDirty && (u.$cacheDirty = !0, u.$cacheDirtyUp());
            }
            return o;
        }, r.prototype.setChildIndex = function(t, e) {
            (0 > (e = 0 | +e) || e >= this.$children.length) && (e = this.$children.length - 1), 
            this.doSetChildIndex(t, e);
        }, r.prototype.doSetChildIndex = function(e, i) {
            var r = this, n = this.$children.indexOf(e);
            if (n != i) if (this.$childRemoved(e, n), this.$children.splice(n, 1), this.$children.splice(i, 0, e), 
            this.$childAdded(e, i), t.nativeRender) this.$nativeDisplayObject.removeChild(e.$nativeDisplayObject.id), 
            this.$nativeDisplayObject.addChildAt(e.$nativeDisplayObject.id, i); else if (!r.$cacheDirty) {
                r.$cacheDirty = !0;
                var a = r.$parent;
                a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp());
                var o = r.$maskedObject;
                o && !o.$cacheDirty && (o.$cacheDirty = !0, o.$cacheDirtyUp());
            }
        }, r.prototype.swapChildrenAt = function(t, e) {
            e = 0 | +e, (t = 0 | +t) >= 0 && t < this.$children.length && e >= 0 && e < this.$children.length && this.doSwapChildrenAt(t, e);
        }, r.prototype.swapChildren = function(t, e) {
            var i = this.$children.indexOf(t), r = this.$children.indexOf(e);
            -1 == i || -1 == r || this.doSwapChildrenAt(i, r);
        }, r.prototype.doSwapChildrenAt = function(e, i) {
            var r = this;
            if (e > i) {
                var n = i;
                i = e, e = n;
            } else if (e == i) return;
            var a = this.$children, o = a[e], s = a[i];
            if (this.$childRemoved(o, e), this.$childRemoved(s, i), a[e] = s, a[i] = o, this.$childAdded(s, e), 
            this.$childAdded(o, i), t.nativeRender) this.$nativeDisplayObject.swapChild(e, i); else if (!r.$cacheDirty) {
                r.$cacheDirty = !0;
                var h = r.$parent;
                h && !h.$cacheDirty && (h.$cacheDirty = !0, h.$cacheDirtyUp());
                var c = r.$maskedObject;
                c && !c.$cacheDirty && (c.$cacheDirty = !0, c.$cacheDirtyUp());
            }
        }, r.prototype.removeChildren = function() {
            for (var t = this.$children.length - 1; t >= 0; t--) this.$doRemoveChild(t);
        }, r.prototype.$childAdded = function(t, e) {}, r.prototype.$childRemoved = function(t, e) {}, 
        r.prototype.$onAddToStage = function(t, i) {
            e.prototype.$onAddToStage.call(this, t, i);
            var r = this.$children.length;
            i++;
            for (var n = 0; r > n; n++) {
                var a = this.$children[n];
                a.$onAddToStage(t, i), a.$maskedObject && a.$maskedObject.$updateRenderMode();
            }
        }, r.prototype.$onRemoveFromStage = function() {
            e.prototype.$onRemoveFromStage.call(this);
            for (var t = this.$children, i = t.length, r = 0; i > r; r++) t[r].$onRemoveFromStage();
        }, r.prototype.$measureChildBounds = function(e) {
            var i = this.$children, r = i.length;
            if (0 != r) {
                for (var n = 0, a = 0, o = 0, s = 0, h = !1, c = -1; r > c; c++) {
                    var l = void 0;
                    -1 == c ? l = e : (i[c].getBounds(t.$TempRectangle), i[c].$getMatrix().$transformBounds(t.$TempRectangle), 
                    l = t.$TempRectangle), l.isEmpty() || (h ? (n = Math.min(n, l.x), a = Math.max(a, l.x + l.width), 
                    o = Math.min(o, l.y), s = Math.max(s, l.y + l.height)) : (h = !0, n = l.x, a = n + l.width, 
                    o = l.y, s = o + l.height));
                }
                e.setTo(n, o, a - n, s - o);
            }
        }, Object.defineProperty(r.prototype, "touchChildren", {
            get: function() {
                return this.$getTouchChildren();
            },
            set: function(t) {
                this.$setTouchChildren(!!t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$getTouchChildren = function() {
            return this.$touchChildren;
        }, r.prototype.$setTouchChildren = function(t) {
            return this.$touchChildren != t && (this.$touchChildren = t, !0);
        }, r.prototype.$hitTest = function(t, i) {
            if (!this.$visible) return null;
            var r = this.$getInvertedConcatenatedMatrix(), n = r.a * t + r.c * i + r.tx, a = r.b * t + r.d * i + r.ty, o = this.$scrollRect ? this.$scrollRect : this.$maskRect;
            if (o && !o.contains(n, a)) return null;
            if (this.$mask && !this.$mask.$hitTest(t, i)) return null;
            for (var s = this.$children, h = !1, c = null, l = s.length - 1; l >= 0; l--) {
                var u = s[l];
                if (!u.$maskedObject && (c = u.$hitTest(t, i))) {
                    if (h = !0, c.$touchEnabled) break;
                    c = null;
                }
            }
            return c ? this.$touchChildren ? c : this : h ? this : e.prototype.$hitTest.call(this, t, i);
        }, r.$EVENT_ADD_TO_STAGE_LIST = [], r.$EVENT_REMOVE_FROM_STAGE_LIST = [], r;
    }(t.DisplayObject);
    t.DisplayObjectContainer = r, e(r.prototype, "egret.DisplayObjectContainer");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(i) {
            var r = e.call(this) || this;
            return r._bitmapX = 0, r._bitmapY = 0, r._textureMap = t.createMap(), r.$texture = i, 
            r._bitmapX = i.$bitmapX - i.$offsetX, r._bitmapY = i.$bitmapY - i.$offsetY, r;
        }
        return i(r, e), r.prototype.getTexture = function(t) {
            return this._textureMap[t];
        }, r.prototype.createTexture = function(e, i, r, n, a, o, s, h, c) {
            void 0 === o && (o = 0), void 0 === s && (s = 0), void 0 === h && (h = o + n), void 0 === c && (c = s + a);
            var l = new t.Texture();
            return l.disposeBitmapData = !1, l.$bitmapData = this.$texture.$bitmapData, l.$initData(this._bitmapX + i, this._bitmapY + r, n, a, o, s, h, c, this.$texture.$sourceWidth, this.$texture.$sourceHeight), 
            this._textureMap[e] = l, l;
        }, r.prototype.dispose = function() {
            this.$texture && this.$texture.dispose();
        }, r;
    }(t.HashObject);
    t.SpriteSheet = r, e(r.prototype, "egret.SpriteSheet");
}(p || (p = {}));

!function(t) {
    t.$locale_strings = t.$locale_strings || {}, t.$language = "en_US";
}(p || (p = {})), function(t) {
    !function(e) {
        e.tr = function(e) {
            for (var i = [], r = 1; r < arguments.length; r++) i[r - 1] = arguments[r];
            var n = t.$locale_strings[t.$language][e];
            if (!n) return "{" + e + "}";
            for (var a = i.length, o = 0; a > o; o++) n = n.replace("{" + o + "}", i[o]);
            return n;
        };
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(i) {
            var n = e.call(this) || this;
            return n.$texture = null, n.$bitmapData = null, n.$bitmapX = 0, n.$bitmapY = 0, 
            n.$bitmapWidth = 0, n.$bitmapHeight = 0, n.$offsetX = 0, n.$offsetY = 0, n.$textureWidth = 0, 
            n.$textureHeight = 0, n.$sourceWidth = 0, n.$sourceHeight = 0, n.$smoothing = r.defaultSmoothing, 
            n.$explicitBitmapWidth = NaN, n.$explicitBitmapHeight = NaN, n.$scale9Grid = null, 
            n.$fillMode = "scale", n._pixelHitTest = !1, n.$renderNode = new t.sys.NormalBitmapNode(), 
            n.$setTexture(i), i && (n.$renderNode.rotated = i.$rotated), n;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(1);
        }, r.prototype.$onAddToStage = function(i, r) {
            e.prototype.$onAddToStage.call(this, i, r);
            var n = this.$texture;
            n && n.$bitmapData && t.BitmapData.$addDisplayObject(this, n.$bitmapData);
        }, r.prototype.$onRemoveFromStage = function() {
            e.prototype.$onRemoveFromStage.call(this);
            var i = this.$texture;
            i && t.BitmapData.$removeDisplayObject(this, i.$bitmapData);
        }, Object.defineProperty(r.prototype, "texture", {
            get: function() {
                return this.$texture;
            },
            set: function(t) {
                var e = this;
                e.$setTexture(t), t && e.$renderNode && (e.$renderNode.rotated = t.$rotated);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setTexture = function(e) {
            var i = this, r = i.$texture;
            if (e == r) return !1;
            if (i.$texture = e, !e) {
                r && t.BitmapData.$removeDisplayObject(i, r.$bitmapData), i.setImageData(null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
                i.$renderDirty = !0;
                var n = i.$parent;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
                var a = i.$maskedObject;
                return a && !a.$cacheDirty && (a.$cacheDirty = !0, a.$cacheDirtyUp()), t.nativeRender && this.setBitmapDataToWasm(null), 
                !0;
            }
            if (i.$refreshImageData(), i.$stage) {
                if (r && r.$bitmapData) {
                    if (r.$bitmapData.hashCode == (e.$bitmapData ? e.$bitmapData.hashCode : -1)) {
                        i.$renderDirty = !0;
                        var o = i.$parent;
                        o && !o.$cacheDirty && (o.$cacheDirty = !0, o.$cacheDirtyUp());
                        var s = i.$maskedObject;
                        return s && !s.$cacheDirty && (s.$cacheDirty = !0, s.$cacheDirtyUp()), !0;
                    }
                    t.BitmapData.$removeDisplayObject(i, r.$bitmapData);
                }
                t.BitmapData.$addDisplayObject(i, e.$bitmapData);
            }
            i.$renderDirty = !0;
            var h = i.$parent;
            h && !h.$cacheDirty && (h.$cacheDirty = !0, h.$cacheDirtyUp());
            var c = i.$maskedObject;
            return c && !c.$cacheDirty && (c.$cacheDirty = !0, c.$cacheDirtyUp()), !0;
        }, r.prototype.$setBitmapData = function(t) {
            this.$setTexture(t);
        }, r.prototype.setBitmapDataToWasm = function(t) {
            this.$nativeDisplayObject.setBitmapData(t);
        }, r.prototype.$refreshImageData = function() {
            var e = this.$texture;
            e ? (t.nativeRender && this.setBitmapDataToWasm(e), this.setImageData(e.$bitmapData, e.$bitmapX, e.$bitmapY, e.$bitmapWidth, e.$bitmapHeight, e.$offsetX, e.$offsetY, e.$getTextureWidth(), e.$getTextureHeight(), e.$sourceWidth, e.$sourceHeight)) : t.nativeRender && this.setBitmapDataToWasm(null);
        }, r.prototype.setImageData = function(t, e, i, r, n, a, o, s, h, c, l) {
            this.$bitmapData = t, this.$bitmapX = e, this.$bitmapY = i, this.$bitmapWidth = r, 
            this.$bitmapHeight = n, this.$offsetX = a, this.$offsetY = o, this.$textureWidth = s, 
            this.$textureHeight = h, this.$sourceWidth = c, this.$sourceHeight = l;
        }, Object.defineProperty(r.prototype, "scale9Grid", {
            get: function() {
                return this.$scale9Grid;
            },
            set: function(t) {
                this.$setScale9Grid(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setScale9Grid = function(e) {
            var i = this;
            if (i.$scale9Grid = e, i.$renderDirty = !0, t.nativeRender) e ? i.$nativeDisplayObject.setScale9Grid(e.x, e.y, e.width, e.height) : i.$nativeDisplayObject.setScale9Grid(0, 0, -1, -1); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, Object.defineProperty(r.prototype, "fillMode", {
            get: function() {
                return this.$fillMode;
            },
            set: function(t) {
                this.$setFillMode(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setFillMode = function(e) {
            return e != this.$fillMode && (this.$fillMode = e, t.nativeRender && this.$nativeDisplayObject.setBitmapFillMode(this.$fillMode), 
            !0);
        }, Object.defineProperty(r.prototype, "smoothing", {
            get: function() {
                return this.$smoothing;
            },
            set: function(t) {
                t != this.$smoothing && (this.$smoothing = t, this.$renderNode.smoothing = t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setWidth = function(e) {
            var i = this;
            if (0 > e || e == i.$explicitBitmapWidth) return !1;
            if (i.$explicitBitmapWidth = e, i.$renderDirty = !0, t.nativeRender) i.$nativeDisplayObject.setWidth(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
            return !0;
        }, r.prototype.$setHeight = function(e) {
            var i = this;
            if (0 > e || e == i.$explicitBitmapHeight) return !1;
            if (i.$explicitBitmapHeight = e, i.$renderDirty = !0, t.nativeRender) i.$nativeDisplayObject.setHeight(e); else {
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
            return !0;
        }, r.prototype.$getWidth = function() {
            return isNaN(this.$explicitBitmapWidth) ? this.$getContentBounds().width : this.$explicitBitmapWidth;
        }, r.prototype.$getHeight = function() {
            return isNaN(this.$explicitBitmapHeight) ? this.$getContentBounds().height : this.$explicitBitmapHeight;
        }, r.prototype.$measureContentBounds = function(t) {
            if (this.$bitmapData) {
                var e = isNaN(this.$explicitBitmapWidth) ? this.$textureWidth : this.$explicitBitmapWidth, i = isNaN(this.$explicitBitmapHeight) ? this.$textureHeight : this.$explicitBitmapHeight;
                t.setTo(0, 0, e, i);
            } else {
                var e = isNaN(this.$explicitBitmapWidth) ? 0 : this.$explicitBitmapWidth, i = isNaN(this.$explicitBitmapHeight) ? 0 : this.$explicitBitmapHeight;
                t.setTo(0, 0, e, i);
            }
        }, r.prototype.$updateRenderNode = function() {
            if (this.$texture) {
                var e = isNaN(this.$explicitBitmapWidth) ? this.$textureWidth : this.$explicitBitmapWidth, i = isNaN(this.$explicitBitmapHeight) ? this.$textureHeight : this.$explicitBitmapHeight, r = this.scale9Grid || this.$texture.scale9Grid;
                r ? (this.$renderNode instanceof t.sys.NormalBitmapNode && (this.$renderNode = new t.sys.BitmapNode()), 
                t.sys.BitmapNode.$updateTextureDataWithScale9Grid(this.$renderNode, this.$bitmapData, r, this.$bitmapX, this.$bitmapY, this.$bitmapWidth, this.$bitmapHeight, this.$offsetX, this.$offsetY, this.$textureWidth, this.$textureHeight, e, i, this.$sourceWidth, this.$sourceHeight, this.$smoothing)) : (this.fillMode == t.BitmapFillMode.REPEAT && this.$renderNode instanceof t.sys.NormalBitmapNode && (this.$renderNode = new t.sys.BitmapNode()), 
                t.sys.BitmapNode.$updateTextureData(this.$renderNode, this.$bitmapData, this.$bitmapX, this.$bitmapY, this.$bitmapWidth, this.$bitmapHeight, this.$offsetX, this.$offsetY, this.$textureWidth, this.$textureHeight, e, i, this.$sourceWidth, this.$sourceHeight, this.$fillMode, this.$smoothing));
            }
        }, Object.defineProperty(r.prototype, "pixelHitTest", {
            get: function() {
                return this._pixelHitTest;
            },
            set: function(t) {
                this._pixelHitTest = !!t;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$hitTest = function(t, i) {
            var r = e.prototype.$hitTest.call(this, t, i);
            return r && this._pixelHitTest && (this.hitTestPoint(t, i, !0) || (r = null)), r;
        }, r.defaultSmoothing = !0, r;
    }(t.DisplayObject);
    t.Bitmap = r, e(r.prototype, "egret.Bitmap");
}(p || (p = {}));

!function(t) {
    !function(t) {
        var i = function() {
            function t() {
                this.type = 0, this.drawData = [], this.renderCount = 0;
            }
            return t.prototype.cleanBeforeRender = function() {
                this.drawData.length = 0, this.renderCount = 0;
            }, t.prototype.$getRenderCount = function() {
                return this.renderCount;
            }, t;
        }();
        t.RenderNode = i, e(i.prototype, "egret.sys.RenderNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(t) {
        var i = function() {
            function t() {
                this.type = 0, this.$commands = [], this.$data = [], this.commandPosition = 0, this.dataPosition = 0, 
                this.$lastX = 0, this.$lastY = 0;
            }
            return t.prototype.moveTo = function(t, e) {
                this.$commands[this.commandPosition++] = 1;
                var i = this.dataPosition;
                this.$data[i++] = t, this.$data[i++] = e, this.dataPosition = i;
            }, t.prototype.lineTo = function(t, e) {
                this.$commands[this.commandPosition++] = 2;
                var i = this.dataPosition;
                this.$data[i++] = t, this.$data[i++] = e, this.dataPosition = i;
            }, t.prototype.curveTo = function(t, e, i, r) {
                this.$commands[this.commandPosition++] = 3;
                var n = this.dataPosition;
                this.$data[n++] = t, this.$data[n++] = e, this.$data[n++] = i, this.$data[n++] = r, 
                this.dataPosition = n;
            }, t.prototype.cubicCurveTo = function(t, e, i, r, n, a) {
                this.$commands[this.commandPosition++] = 4;
                var o = this.dataPosition;
                this.$data[o++] = t, this.$data[o++] = e, this.$data[o++] = i, this.$data[o++] = r, 
                this.$data[o++] = n, this.$data[o++] = a, this.dataPosition = o;
            }, t.prototype.drawRect = function(t, e, i, r) {
                var n = t + i, a = e + r;
                this.moveTo(t, e), this.lineTo(n, e), this.lineTo(n, a), this.lineTo(t, a), this.lineTo(t, e);
            }, t.prototype.drawRoundRect = function(t, e, i, r, n, a) {
                var o = .5 * n | 0, s = a ? .5 * a | 0 : o;
                if (o && s) {
                    var h = .5 * i, c = .5 * r;
                    if (o > h && (o = h), s > c && (s = c), h !== o || c !== s) {
                        var l = t + i, u = e + r, p = t + o, d = l - o, f = e + s, $ = u - s;
                        this.moveTo(l, $), this.curveTo(l, u, d, u), this.lineTo(p, u), this.curveTo(t, u, t, $), 
                        this.lineTo(t, f), this.curveTo(t, e, p, e), this.lineTo(d, e), this.curveTo(l, e, l, f), 
                        this.lineTo(l, $);
                    } else o === s ? this.drawCircle(t + o, e + s, o) : this.drawEllipse(t, e, 2 * o, 2 * s);
                } else this.drawRect(t, e, i, r);
            }, t.prototype.drawCircle = function(t, e, i) {
                this.arcToBezier(t, e, i, i, 0, 2 * Math.PI);
            }, t.prototype.drawEllipse = function(t, e, i, r) {
                var n = .5 * i, a = .5 * r;
                t += n, e += a, this.arcToBezier(t, e, n, a, 0, 2 * Math.PI);
            }, t.prototype.drawArc = function(t, e, i, r, n, a) {
                a ? n >= r && (n -= 2 * Math.PI) : r >= n && (n += 2 * Math.PI), this.arcToBezier(t, e, i, i, r, n, a);
            }, t.prototype.arcToBezier = function(t, e, i, r, n, a, o) {
                var s = .5 * Math.PI, h = n, c = h;
                o ? (c += -s - h % s, a > c && (c = a)) : (c += s - h % s) > a && (c = a);
                var l = t + Math.cos(h) * i, u = e + Math.sin(h) * r;
                (this.$lastX != l || this.$lastY != u) && this.moveTo(l, u);
                for (var p = Math.cos(h), d = Math.sin(h), f = 0; 4 > f; f++) {
                    var $ = c - h, y = 4 * Math.tan($ / 4) / 3, g = l - d * y * i, v = u + p * y * r, b = (l = t + (p = Math.cos(c)) * i) + (d = Math.sin(c)) * y * i, m = (u = e + d * r) - p * y * r;
                    if (this.cubicCurveTo(g, v, b, m, l, u), c === a) break;
                    h = c, o ? (c = h - s, a > c && (c = a)) : (c = h + s) > a && (c = a);
                }
            }, t;
        }();
        t.Path2D = i, e(i.prototype, "egret.sys.Path2D");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

(p || (p = {})).fontMapping = {};

!function(t) {
    (p || (p = {})).createMap = function() {
        var t = Object.create(null);
        return t.__v8__ = void 0, delete t.__v8__, t;
    };
}();

!function(t) {
    var r = function(t) {
        function e(e, i, r, n, a, o, s, h) {
            void 0 === e && (e = 16711680), void 0 === i && (i = 1), void 0 === r && (r = 6), 
            void 0 === n && (n = 6), void 0 === a && (a = 2), void 0 === o && (o = 1), void 0 === s && (s = !1), 
            void 0 === h && (h = !1);
            var c = t.call(this) || this, l = c;
            return l.type = "glow", l.$color = e, l.$blue = 255 & e, l.$green = (65280 & e) >> 8, 
            l.$red = e >> 16, l.$alpha = i, l.$blurX = r, l.$blurY = n, l.$strength = a, l.$quality = o, 
            l.$inner = s, l.$knockout = h, l.$uniforms.color = {
                x: c.$red / 255,
                y: c.$green / 255,
                z: c.$blue / 255,
                w: 1
            }, l.$uniforms.alpha = i, l.$uniforms.blurX = r, l.$uniforms.blurY = n, l.$uniforms.strength = a, 
            l.$uniforms.inner = s ? 1 : 0, l.$uniforms.knockout = h ? 0 : 1, l.$uniforms.dist = 0, 
            l.$uniforms.angle = 0, l.$uniforms.hideObject = 0, l.onPropertyChange(), c;
        }
        return i(e, t), Object.defineProperty(e.prototype, "color", {
            get: function() {
                return this.$color;
            },
            set: function(t) {
                this.$color != t && (this.$color = t, this.$blue = 255 & t, this.$green = (65280 & t) >> 8, 
                this.$red = t >> 16, this.$uniforms.color.x = this.$red / 255, this.$uniforms.color.y = this.$green / 255, 
                this.$uniforms.color.z = this.$blue / 255);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "alpha", {
            get: function() {
                return this.$alpha;
            },
            set: function(t) {
                this.$alpha != t && (this.$alpha = t, this.$uniforms.alpha = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "blurX", {
            get: function() {
                return this.$blurX;
            },
            set: function(t) {
                var e = this;
                e.$blurX != t && (e.$blurX = t, e.$uniforms.blurX = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "blurY", {
            get: function() {
                return this.$blurY;
            },
            set: function(t) {
                var e = this;
                e.$blurY != t && (e.$blurY = t, e.$uniforms.blurY = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "strength", {
            get: function() {
                return this.$strength;
            },
            set: function(t) {
                this.$strength != t && (this.$strength = t, this.$uniforms.strength = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "quality", {
            get: function() {
                return this.$quality;
            },
            set: function(t) {
                this.$quality != t && (this.$quality = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "inner", {
            get: function() {
                return this.$inner;
            },
            set: function(t) {
                this.$inner != t && (this.$inner = t, this.$uniforms.inner = t ? 1 : 0);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "knockout", {
            get: function() {
                return this.$knockout;
            },
            set: function(t) {
                this.$knockout != t && (this.$knockout = t, this.$uniforms.knockout = t ? 0 : 1);
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.$toJson = function() {
            return '{"color": ' + this.$color + ', "red": ' + this.$red + ', "green": ' + this.$green + ', "blue": ' + this.$blue + ', "alpha": ' + this.$alpha + ', "blurX": ' + this.$blurX + ', "blurY": ' + this.blurY + ', "strength": ' + this.$strength + ', "quality": ' + this.$quality + ', "inner": ' + this.$inner + ', "knockout": ' + this.$knockout + "}";
        }, e.prototype.updatePadding = function() {
            var t = this;
            t.paddingLeft = t.blurX, t.paddingRight = t.blurX, t.paddingTop = t.blurY, t.paddingBottom = t.blurY;
        }, e;
    }(t.Filter);
    t.GlowFilter = r, e(r.prototype, "egret.GlowFilter");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.NORMAL = "normal", t.ADD = "add", t.ERASE = "erase", t;
    }();
    t.BlendMode = i, e(i.prototype, "egret.BlendMode");
}(p || (p = {})), function(t) {
    !function(t) {
        for (var e = [ "normal", "add", "erase" ], i = {}, r = e.length, n = 0; r > n; n++) {
            var a = e[n];
            i[a] = n;
        }
        t.blendModeToNumber = function(t) {
            var e = i[t];
            return void 0 === e ? 0 : e;
        }, t.numberToBlendMode = function(t) {
            var i = e[t];
            return void 0 === i ? "normal" : i;
        };
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

(p || (p = {})).CapsStyle = {
    NONE: "none",
    ROUND: "round",
    SQUARE: "square"
};

!function(t) {
    var i = function() {
        function e() {}
        return e.compileProgram = function(i, r, n) {
            var a = e.compileFragmentShader(i, n), o = e.compileVertexShader(i, r), s = i.createProgram();
            return i.attachShader(s, o), i.attachShader(s, a), i.linkProgram(s), i.getProgramParameter(s, i.LINK_STATUS) || t.$warn(1020), 
            s;
        }, e.compileFragmentShader = function(t, i) {
            return e._compileShader(t, i, t.FRAGMENT_SHADER);
        }, e.compileVertexShader = function(t, i) {
            return e._compileShader(t, i, t.VERTEX_SHADER);
        }, e._compileShader = function(t, e, i) {
            var r = t.createShader(i);
            return t.shaderSource(r, e), t.compileShader(r), t.getShaderParameter(r, t.COMPILE_STATUS) ? r : null;
        }, e.checkCanUseWebGL = function() {
            if (void 0 == e.canUseWebGL) try {
                var t = document.createElement("canvas");
                e.canUseWebGL = !(!window.WebGLRenderingContext || !t.getContext("webgl") && !t.getContext("experimental-webgl"));
            } catch (t) {
                e.canUseWebGL = !1;
            }
            return e.canUseWebGL;
        }, e.deleteWebGLTexture = function(t) {
            if (t) {
                var e = t.glContext;
                e && e.deleteTexture(t);
            }
        }, e;
    }();
    t.WebGLUtils = i, e(i.prototype, "egret.WebGLUtils");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e(e, i, r) {
            return void 0 === i && (i = !1), void 0 === r && (r = !1), t.call(this, e, i, r) || this;
        }
        return i(e, t), e.FOCUS_IN = "focusIn", e.FOCUS_OUT = "focusOut", e;
    }(t.Event);
    t.FocusEvent = r, e(r.prototype, "egret.FocusEvent");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return i(e, t), e.PERMISSION_DENIED = "permissionDenied", e.UNAVAILABLE = "unavailable", 
        e;
    }(t.Event);
    t.GeolocationEvent = r, e(r.prototype, "egret.GeolocationEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r) {
            void 0 === i && (i = !1), void 0 === r && (r = !1);
            var n = e.call(this, t, i, r) || this;
            return n._status = 0, n;
        }
        return i(r, e), Object.defineProperty(r.prototype, "status", {
            get: function() {
                return this._status;
            },
            enumerable: !0,
            configurable: !0
        }), r.dispatchHTTPStatusEvent = function(e, i) {
            var n = t.Event.create(r, r.HTTP_STATUS);
            n._status = i;
            var a = e.dispatchEvent(n);
            return t.Event.release(n), a;
        }, r.HTTP_STATUS = "httpStatus", r;
    }(t.Event);
    t.HTTPStatusEvent = r, e(r.prototype, "egret.HTTPStatusEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r) {
            return void 0 === i && (i = !1), void 0 === r && (r = !1), e.call(this, t, i, r) || this;
        }
        return i(r, e), r.dispatchIOErrorEvent = function(e) {
            var i = t.Event.create(r, r.IO_ERROR), n = e.dispatchEvent(i);
            return t.Event.release(i), n;
        }, r.IO_ERROR = "ioError", r;
    }(t.Event);
    t.IOErrorEvent = r, e(r.prototype, "egret.IOErrorEvent");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return i(e, t), e;
    }(t.Event);
    t.MotionEvent = r, e(r.prototype, "egret.MotionEvent");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return i(e, t), e;
    }(t.Event);
    t.OrientationEvent = r, e(r.prototype, "egret.OrientationEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r, n, a) {
            void 0 === i && (i = !1), void 0 === r && (r = !1), void 0 === n && (n = 0), void 0 === a && (a = 0);
            var o = e.call(this, t, i, r) || this;
            return o.bytesLoaded = 0, o.bytesTotal = 0, o.bytesLoaded = n, o.bytesTotal = a, 
            o;
        }
        return i(r, e), r.dispatchProgressEvent = function(e, i, n, a) {
            void 0 === n && (n = 0), void 0 === a && (a = 0);
            var o = t.Event.create(r, i);
            o.bytesLoaded = n, o.bytesTotal = a;
            var s = e.dispatchEvent(o);
            return t.Event.release(o), s;
        }, r.PROGRESS = "progress", r.SOCKET_DATA = "socketData", r;
    }(t.Event);
    t.ProgressEvent = r, e(r.prototype, "egret.ProgressEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r) {
            return void 0 === i && (i = !1), void 0 === r && (r = !1), e.call(this, t, i, r) || this;
        }
        return i(r, e), r.dispatchStageOrientationEvent = function(e, i) {
            var n = t.Event.create(r, i), a = e.dispatchEvent(n);
            return t.Event.release(n), a;
        }, r.ORIENTATION_CHANGE = "orientationChange", r;
    }(t.Event);
    t.StageOrientationEvent = r, e(r.prototype, "egret.StageOrientationEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r, n) {
            void 0 === i && (i = !1), void 0 === r && (r = !1), void 0 === n && (n = "");
            var a = e.call(this, t, i, r) || this;
            return a.text = n, a;
        }
        return i(r, e), r.dispatchTextEvent = function(e, i, n) {
            var a = t.Event.create(r, i);
            a.text = n;
            var o = e.dispatchEvent(a);
            return t.Event.release(a), o;
        }, r.LINK = "link", r;
    }(t.Event);
    t.TextEvent = r, e(r.prototype, "egret.TextEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r) {
            return e.call(this, t, i, r) || this;
        }
        return i(r, e), r.prototype.updateAfterEvent = function() {
            t.sys.$requestRenderingFlag = !0;
        }, r.dispatchTimerEvent = function(e, i, n, a) {
            var o = t.Event.create(r, i, n, a), s = e.dispatchEvent(o);
            return t.Event.release(o), s;
        }, r.TIMER = "timer", r.TIMER_COMPLETE = "timerComplete", r;
    }(t.Event);
    t.TimerEvent = r, e(r.prototype, "egret.TimerEvent");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t) {
            var i = e.call(this) || this;
            return i.format = "image", i.$deleteSource = !0, i.source = t, i.width = t.width, 
            i.height = t.height, i;
        }
        return i(r, e), r.create = function(e, i, n) {
            var a = "", o = "image/png";
            "/" === (a = "arraybuffer" === e ? t.Base64Util.encode(i) : i).charAt(0) ? o = "image/jpeg" : "R" === a.charAt(0) ? o = "image/gif" : "i" === a.charAt(0) && (o = "image/png");
            var s = new Image();
            s.src = "data:" + o + ";base64," + a, s.crossOrigin = "*";
            var h = new r(s);
            return s.onload = function() {
                s.onload = void 0, h.source = s, h.height = s.height, h.width = s.width, n && n(h);
            }, h;
        }, r.prototype.$dispose = function() {
            "webgl" == t.Capabilities.renderMode && this.webGLTexture && (t.WebGLUtils.deleteWebGLTexture(this.webGLTexture), 
            this.webGLTexture = null), this.source && this.source.dispose && this.source.dispose(), 
            this.source = null, r.$dispose(this);
        }, r.$addDisplayObject = function(t, e) {
            if (e) {
                var i = e.hashCode;
                if (i) {
                    if (!r._displayList[i]) return void (r._displayList[i] = [ t ]);
                    var n = r._displayList[i];
                    n.indexOf(t) < 0 && n.push(t);
                }
            }
        }, r.$removeDisplayObject = function(t, e) {
            if (e) {
                var i = e.hashCode;
                if (i && r._displayList[i]) {
                    var n = r._displayList[i], a = n.indexOf(t);
                    a >= 0 && n.splice(a, 1);
                }
            }
        }, r.$invalidate = function(e) {
            if (e) {
                var i = e.hashCode;
                if (i && r._displayList[i]) for (var n = r._displayList[i], a = 0; a < n.length; a++) {
                    n[a] instanceof t.Bitmap && n[a].$refreshImageData();
                    var o = n[a];
                    o.$renderDirty = !0;
                    var s = o.$parent;
                    s && !s.$cacheDirty && (s.$cacheDirty = !0, s.$cacheDirtyUp());
                    var h = o.$maskedObject;
                    h && !h.$cacheDirty && (h.$cacheDirty = !0, h.$cacheDirtyUp());
                }
            }
        }, r.$dispose = function(e) {
            if (e) {
                var i = e.hashCode;
                if (i && r._displayList[i]) {
                    for (var n = 0, a = r._displayList[i]; n < a.length; n++) {
                        var o = a[n];
                        o instanceof t.Bitmap && (o.$bitmapData = null), o.$renderDirty = !0;
                        var s = o.$parent;
                        s && !s.$cacheDirty && (s.$cacheDirty = !0, s.$cacheDirtyUp());
                        var h = o.$maskedObject;
                        h && !h.$cacheDirty && (h.$cacheDirty = !0, h.$cacheDirtyUp());
                    }
                    t.nativeRender && egret_native.NativeDisplayObject.disposeBitmapData(e), delete r._displayList[i];
                }
            }
        }, r._displayList = t.createMap(), r;
    }(t.HashObject);
    t.BitmapData = r, e(r.prototype, "egret.BitmapData");
}(p || (p = {}));

!function(t) {
    var r = new t.Point(), n = function(e) {
        function n(t, i, r, n, a, o) {
            var s = e.call(this, t, i, r) || this;
            return s.targetChanged = !0, s.touchDown = !1, s.$initTo(n, a, o), s;
        }
        return i(n, e), n.prototype.$initTo = function(t, e, i) {
            this.touchPointID = +i || 0, this.$stageX = +t || 0, this.$stageY = +e || 0;
        }, Object.defineProperty(n.prototype, "stageX", {
            get: function() {
                return this.$stageX;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "stageY", {
            get: function() {
                return this.$stageY;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "localX", {
            get: function() {
                return this.targetChanged && this.getLocalXY(), this._localX;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "localY", {
            get: function() {
                return this.targetChanged && this.getLocalXY(), this._localY;
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.getLocalXY = function() {
            this.targetChanged = !1, this.$target.$getInvertedConcatenatedMatrix().transformPoint(this.$stageX, this.$stageY, r), 
            this._localX = r.x, this._localY = r.y;
        }, n.prototype.$setTarget = function(t) {
            return this.$target = t, this.targetChanged = !!t, !0;
        }, n.prototype.updateAfterEvent = function() {
            t.sys.$requestRenderingFlag = !0;
        }, n.dispatchTouchEvent = function(e, i, r, a, o, s, h, c) {
            if (void 0 === c && (c = !1), !r && !e.hasEventListener(i)) return !0;
            var l = t.Event.create(n, i, r, a);
            l.$initTo(o, s, h), l.touchDown = c;
            var u = e.dispatchEvent(l);
            return t.Event.release(l), u;
        }, n.TOUCH_MOVE = "touchMove", n.TOUCH_BEGIN = "touchBegin", n.TOUCH_END = "touchEnd", 
        n.TOUCH_CANCEL = "touchCancel", n.TOUCH_TAP = "touchTap", n.TOUCH_RELEASE_OUTSIDE = "touchReleaseOutside", 
        n;
    }(t.Event);
    t.TouchEvent = n, e(n.prototype, "egret.TouchEvent");
}(p || (p = {}));

p || (p = {});

!function(t) {
    var r = function(e) {
        function r(t, i, r) {
            void 0 === t && (t = 4), void 0 === i && (i = 4), void 0 === r && (r = 1);
            var o = e.call(this) || this, s = o;
            return s.type = "blur", s.$blurX = t, s.$blurY = i, s.$quality = r, s.blurXFilter = new n(t), 
            s.blurYFilter = new a(i), s.onPropertyChange(), o;
        }
        return i(r, e), Object.defineProperty(r.prototype, "blurX", {
            get: function() {
                return this.$blurX;
            },
            set: function(t) {
                var e = this;
                e.$blurX != t && (e.$blurX = t, e.blurXFilter.blurX = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "blurY", {
            get: function() {
                return this.$blurY;
            },
            set: function(t) {
                var e = this;
                e.$blurY != t && (e.$blurY = t, e.blurYFilter.blurY = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$toJson = function() {
            return '{"blurX": ' + this.$blurX + ', "blurY": ' + this.$blurY + ', "quality": 1}';
        }, r.prototype.updatePadding = function() {
            var t = this;
            t.paddingLeft = t.blurX, t.paddingRight = t.blurX, t.paddingTop = t.blurY, t.paddingBottom = t.blurY;
        }, r.prototype.onPropertyChange = function() {
            var e = this;
            e.updatePadding(), t.nativeRender && (egret_native.NativeDisplayObject.setFilterPadding(e.blurXFilter.$id, 0, 0, e.paddingLeft, e.paddingRight), 
            egret_native.NativeDisplayObject.setFilterPadding(e.blurYFilter.$id, e.paddingTop, e.paddingBottom, 0, 0), 
            egret_native.NativeDisplayObject.setDataToFilter(e));
        }, r;
    }(t.Filter);
    t.BlurFilter = r, e(r.prototype, "egret.BlurFilter");
    var n = function(e) {
        function r(i) {
            void 0 === i && (i = 4);
            var r = e.call(this) || this;
            return t.nativeRender ? r.type = "blur" : r.type = "blurX", r.$uniforms.blur = {
                x: i,
                y: 0
            }, r.onPropertyChange(), r;
        }
        return i(r, e), Object.defineProperty(r.prototype, "blurX", {
            get: function() {
                return this.$uniforms.blur.x;
            },
            set: function(t) {
                this.$uniforms.blur.x = t;
            },
            enumerable: !0,
            configurable: !0
        }), r;
    }(t.Filter);
    e(n.prototype, "BlurXFilter", [ "egret.IBlurXFilter" ]);
    var a = function(e) {
        function r(i) {
            void 0 === i && (i = 4);
            var r = e.call(this) || this;
            return t.nativeRender ? r.type = "blur" : r.type = "blurY", r.$uniforms.blur = {
                x: 0,
                y: i
            }, r.onPropertyChange(), r;
        }
        return i(r, e), Object.defineProperty(r.prototype, "blurY", {
            get: function() {
                return this.$uniforms.blur.y;
            },
            set: function(t) {
                this.$uniforms.blur.y = t;
            },
            enumerable: !0,
            configurable: !0
        }), r;
    }(t.Filter);
    e(a.prototype, "BlurYFilter", [ "egret.IBlurYFilter" ]);
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e(e) {
            void 0 === e && (e = null);
            var i = t.call(this) || this;
            return i.$matrix = [], i.matrix2 = [], i.type = "colorTransform", i.$uniforms.matrix = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], 
            i.$uniforms.colorAdd = {
                x: 0,
                y: 0,
                z: 0,
                w: 0
            }, i.setMatrix(e), i.onPropertyChange(), i;
        }
        return i(e, t), Object.defineProperty(e.prototype, "matrix", {
            get: function() {
                for (var t = 0; 20 > t; t++) this.matrix2[t] = this.$matrix[t];
                return this.matrix2;
            },
            set: function(t) {
                this.setMatrix(t);
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setMatrix = function(t) {
            if (t) for (n = 0; 20 > n; n++) this.$matrix[n] = t[n]; else for (n = 0; 20 > n; n++) this.$matrix[n] = 0 == n || 6 == n || 12 == n || 18 == n ? 1 : 0;
            for (var e = this.$matrix, i = this.$uniforms.matrix, r = this.$uniforms.colorAdd, n = 0, a = 0; n < e.length; n++) 4 === n ? r.x = e[n] / 255 : 9 === n ? r.y = e[n] / 255 : 14 === n ? r.z = e[n] / 255 : 19 === n ? r.w = e[n] / 255 : (i[a] = e[n], 
            a++);
            this.onPropertyChange();
        }, e.prototype.$toJson = function() {
            return '{"matrix": [' + this.$matrix.toString() + "]}";
        }, e;
    }(t.Filter);
    t.ColorMatrixFilter = r, e(r.prototype, "egret.ColorMatrixFilter");
}(p || (p = {}));

!function(t) {
    var r, n = {}, a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""), o = new Array(36), s = 0, h = function() {
        for (var t = 0; 36 > t; t++) 8 === t || 13 === t || 18 === t || 23 === t ? o[t] = "-" : 14 === t ? o[t] = "4" : (2 >= s && (s = 33554432 + 16777216 * Math.random() | 0), 
        r = 15 & s, s >>= 4, o[t] = a[19 === t ? 3 & r | 8 : r]);
        return o.join("");
    }, c = function(e) {
        function r(t, i, r) {
            void 0 === r && (r = {});
            var a = e.call(this) || this;
            a.$padding = 0, a.$vertexSrc = t, a.$fragmentSrc = i;
            var o = t + i;
            return n[o] || (n[o] = h()), a.$shaderKey = n[o], a.$uniforms = r, a.type = "custom", 
            a;
        }
        return i(r, e), Object.defineProperty(r.prototype, "padding", {
            get: function() {
                return this.$padding;
            },
            set: function(t) {
                var e = this;
                e.$padding != t && (e.$padding = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "uniforms", {
            get: function() {
                return this.$uniforms;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.onPropertyChange = function() {
            if (t.nativeRender) {
                var e = this;
                egret_native.NativeDisplayObject.setFilterPadding(e.$id, e.$padding, e.$padding, e.$padding, e.$padding), 
                egret_native.NativeDisplayObject.setDataToFilter(e);
            }
        }, r;
    }(t.Filter);
    t.CustomFilter = c, e(c.prototype, "egret.CustomFilter");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(t, i, r, n, a, o, s, h, c, l, u) {
            void 0 === t && (t = 4), void 0 === i && (i = 45), void 0 === r && (r = 0), void 0 === n && (n = 1), 
            void 0 === a && (a = 4), void 0 === o && (o = 4), void 0 === s && (s = 1), void 0 === h && (h = 1), 
            void 0 === c && (c = !1), void 0 === l && (l = !1), void 0 === u && (u = !1);
            var p = e.call(this, r, n, a, o, s, h, c, l) || this, d = p;
            return d.$distance = t, d.$angle = i, d.$hideObject = u, d.$uniforms.dist = t, d.$uniforms.angle = i / 180 * Math.PI, 
            d.$uniforms.hideObject = u ? 1 : 0, d.onPropertyChange(), p;
        }
        return i(r, e), Object.defineProperty(r.prototype, "distance", {
            get: function() {
                return this.$distance;
            },
            set: function(t) {
                var e = this;
                e.$distance != t && (e.$distance = t, e.$uniforms.dist = t, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "angle", {
            get: function() {
                return this.$angle;
            },
            set: function(t) {
                var e = this;
                e.$angle != t && (e.$angle = t, e.$uniforms.angle = t / 180 * Math.PI, e.onPropertyChange());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "hideObject", {
            get: function() {
                return this.$hideObject;
            },
            set: function(t) {
                this.$hideObject != t && (this.$hideObject = t, this.$uniforms.hideObject = t ? 1 : 0);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$toJson = function() {
            return '{"distance": ' + this.$distance + ', "angle": ' + this.$angle + ', "color": ' + this.$color + ', "red": ' + this.$red + ', "green": ' + this.$green + ', "blue": ' + this.$blue + ', "alpha": ' + this.$alpha + ', "blurX": ' + this.$blurX + ', "blurY": ' + this.blurY + ', "strength": ' + this.$strength + ', "quality": ' + this.$quality + ', "inner": ' + this.$inner + ', "knockout": ' + this.$knockout + ', "hideObject": ' + this.$hideObject + "}";
        }, r.prototype.updatePadding = function() {
            var e = this;
            e.paddingLeft = e.blurX, e.paddingRight = e.blurX, e.paddingTop = e.blurY, e.paddingBottom = e.blurY;
            var i = e.distance || 0, r = e.angle || 0, n = 0, a = 0;
            0 != i && (n = i * t.NumberUtils.cos(r), n = n > 0 ? Math.ceil(n) : Math.floor(n), 
            a = i * t.NumberUtils.sin(r), a = a > 0 ? Math.ceil(a) : Math.floor(a), e.paddingLeft += n, 
            e.paddingRight += n, e.paddingTop += a, e.paddingBottom += a);
        }, r;
    }(t.GlowFilter);
    t.DropShadowFilter = r, e(r.prototype, "egret.DropShadowFilter");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.LINEAR = "linear", t.RADIAL = "radial", t;
    }();
    t.GradientType = i, e(i.prototype, "egret.GradientType");
}(p || (p = {}));

!function(t) {
    function r(t) {
        return 0 > (t %= 2 * Math.PI) && (t += 2 * Math.PI), t;
    }
    function n(t, e) {
        for (var i = [], r = 0; e > r; r++) {
            var n = a(t, r / e);
            n && i.push(n);
        }
        return i;
    }
    function a(e, i) {
        var r = 0, n = 0, a = 0, h = e.length;
        if (h / 2 == 3) {
            var c = e[r++], l = e[r++], u = e[r++], p = e[r++], d = e[r++], f = e[r++];
            n = o(c, u, d, i), a = o(l, p, f, i);
        } else if (h / 2 == 4) {
            var c = e[r++], l = e[r++], u = e[r++], p = e[r++], d = e[r++], f = e[r++], $ = e[r++], y = e[r++];
            n = s(c, u, d, $, i), a = s(l, p, f, y, i);
        }
        return t.Point.create(n, a);
    }
    function o(t, e, i, r) {
        return Math.pow(1 - r, 2) * t + 2 * r * (1 - r) * e + Math.pow(r, 2) * i;
    }
    function s(t, e, i, r, n) {
        return Math.pow(1 - n, 3) * t + 3 * n * Math.pow(1 - n, 2) * e + 3 * (1 - n) * Math.pow(n, 2) * i + Math.pow(n, 3) * r;
    }
    var h = function(e) {
        function a() {
            var i = e.call(this) || this;
            return i.lastX = 0, i.lastY = 0, i.fillPath = null, i.strokePath = null, i.topLeftStrokeWidth = 0, 
            i.bottomRightStrokeWidth = 0, i.minX = 1 / 0, i.minY = 1 / 0, i.maxX = -1 / 0, i.maxY = -1 / 0, 
            i.includeLastPosition = !0, i.$renderNode = new t.sys.GraphicsNode(), i;
        }
        return i(a, e), a.prototype.$setTarget = function(e) {
            this.$targetDisplay && (this.$targetDisplay.$renderNode = null), e.$renderNode = this.$renderNode, 
            this.$targetDisplay = e, this.$targetIsSprite = e instanceof t.Sprite;
        }, a.prototype.setStrokeWidth = function(t) {
            switch (t) {
              case 1:
                this.topLeftStrokeWidth = 0, this.bottomRightStrokeWidth = 1;
                break;

              case 3:
                this.topLeftStrokeWidth = 1, this.bottomRightStrokeWidth = 2;
                break;

              default:
                var e = 0 | Math.ceil(.5 * t);
                this.topLeftStrokeWidth = e, this.bottomRightStrokeWidth = e;
            }
        }, a.prototype.beginFill = function(e, i) {
            void 0 === i && (i = 1), e = +e || 0, i = +i || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setBeginFill(e, i), 
            this.fillPath = this.$renderNode.beginFill(e, i, this.strokePath), this.$renderNode.drawData.length > 1 && this.fillPath.moveTo(this.lastX, this.lastY);
        }, a.prototype.beginGradientFill = function(e, i, r, n, a) {
            void 0 === a && (a = null), t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setBeginGradientFill(e, i, r, n, a), 
            this.fillPath = this.$renderNode.beginGradientFill(e, i, r, n, a, this.strokePath), 
            this.$renderNode.drawData.length > 1 && this.fillPath.moveTo(this.lastX, this.lastY);
        }, a.prototype.endFill = function() {
            t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setEndFill(), this.fillPath = null;
        }, a.prototype.lineStyle = function(e, i, r, n, a, o, s, h, c) {
            void 0 === e && (e = NaN), void 0 === i && (i = 0), void 0 === r && (r = 1), void 0 === n && (n = !1), 
            void 0 === a && (a = "normal"), void 0 === o && (o = null), void 0 === s && (s = null), 
            void 0 === h && (h = 3), e = +e || 0, i = +i || 0, r = +r || 0, h = +h || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setLineStyle(e, i, r, n, a, o, s, h), 
            0 >= e ? (this.strokePath = null, this.setStrokeWidth(0)) : (this.setStrokeWidth(e), 
            this.strokePath = this.$renderNode.lineStyle(e, i, r, o, s, h, c), this.$renderNode.drawData.length > 1 && this.strokePath.moveTo(this.lastX, this.lastY));
        }, a.prototype.drawRect = function(e, i, r, n) {
            e = +e || 0, i = +i || 0, r = +r || 0, n = +n || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setDrawRect(e, i, r, n);
            var a = this.fillPath, o = this.strokePath;
            a && a.drawRect(e, i, r, n), o && o.drawRect(e, i, r, n), this.extendBoundsByPoint(e + r, i + n), 
            this.updatePosition(e, i), this.dirty();
        }, a.prototype.drawRoundRect = function(e, i, r, n, a, o) {
            e = +e || 0, i = +i || 0, r = +r || 0, n = +n || 0, a = +a || 0, o = +o || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setDrawRoundRect(e, i, r, n, a, o);
            var s = this.fillPath, h = this.strokePath;
            s && s.drawRoundRect(e, i, r, n, a, o), h && h.drawRoundRect(e, i, r, n, a, o);
            var c = .5 * a | 0, l = e + r, u = i + n, p = u - (o ? .5 * o | 0 : c);
            this.extendBoundsByPoint(e, i), this.extendBoundsByPoint(l, u), this.updatePosition(l, p), 
            this.dirty();
        }, a.prototype.drawCircle = function(e, i, r) {
            e = +e || 0, i = +i || 0, r = +r || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setDrawCircle(e, i, r);
            var n = this.fillPath, a = this.strokePath;
            n && n.drawCircle(e, i, r), a && a.drawCircle(e, i, r), this.extendBoundsByPoint(e - r - 1, i - r - 1), 
            this.extendBoundsByPoint(e + r + 2, i + r + 2), this.updatePosition(e + r, i), this.dirty();
        }, a.prototype.drawEllipse = function(e, i, r, n) {
            e = +e || 0, i = +i || 0, r = +r || 0, n = +n || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setDrawEllipse(e, i, r, n);
            var a = this.fillPath, o = this.strokePath;
            a && a.drawEllipse(e, i, r, n), o && o.drawEllipse(e, i, r, n), this.extendBoundsByPoint(e - 1, i - 1), 
            this.extendBoundsByPoint(e + r + 2, i + n + 2), this.updatePosition(e + r, i + .5 * n), 
            this.dirty();
        }, a.prototype.moveTo = function(e, i) {
            e = +e || 0, i = +i || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setMoveTo(e, i);
            var r = this.fillPath, n = this.strokePath;
            r && r.moveTo(e, i), n && n.moveTo(e, i), this.includeLastPosition = !1, this.lastX = e, 
            this.lastY = i, this.dirty();
        }, a.prototype.lineTo = function(e, i) {
            e = +e || 0, i = +i || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setLineTo(e, i);
            var r = this.fillPath, n = this.strokePath;
            r && r.lineTo(e, i), n && n.lineTo(e, i), this.updatePosition(e, i), this.dirty();
        }, a.prototype.curveTo = function(e, i, r, a) {
            e = +e || 0, i = +i || 0, r = +r || 0, a = +a || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setCurveTo(e, i, r, a);
            var o = this.fillPath, s = this.strokePath;
            o && o.curveTo(e, i, r, a), s && s.curveTo(e, i, r, a);
            for (var h = n([ this.lastX || 0, this.lastY || 0, e, i, r, a ], 50), c = 0; c < h.length; c++) {
                var l = h[c];
                this.extendBoundsByPoint(l.x, l.y), t.Point.release(l);
            }
            this.extendBoundsByPoint(r, a), this.updatePosition(r, a), this.dirty();
        }, a.prototype.cubicCurveTo = function(e, i, r, a, o, s) {
            e = +e || 0, i = +i || 0, r = +r || 0, a = +a || 0, o = +o || 0, s = +s || 0, t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setCubicCurveTo(e, i, r, a, o, s);
            var h = this.fillPath, c = this.strokePath;
            h && h.cubicCurveTo(e, i, r, a, o, s), c && c.cubicCurveTo(e, i, r, a, o, s);
            for (var l = n([ this.lastX || 0, this.lastY || 0, e, i, r, a, o, s ], 50), u = 0; u < l.length; u++) {
                var p = l[u];
                this.extendBoundsByPoint(p.x, p.y), t.Point.release(p);
            }
            this.extendBoundsByPoint(o, s), this.updatePosition(o, s), this.dirty();
        }, a.prototype.drawArc = function(e, i, n, a, o, s) {
            if (!(0 > n || a === o)) {
                e = +e || 0, i = +i || 0, n = +n || 0, a = +a || 0, o = +o || 0, s = !!s, a = r(a), 
                o = r(o), t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setDrawArc(e, i, n, a, o, s);
                var h = this.fillPath, c = this.strokePath;
                h && (h.$lastX = this.lastX, h.$lastY = this.lastY, h.drawArc(e, i, n, a, o, s)), 
                c && (c.$lastX = this.lastX, c.$lastY = this.lastY, c.drawArc(e, i, n, a, o, s)), 
                s ? this.arcBounds(e, i, n, o, a) : this.arcBounds(e, i, n, a, o);
                var l = e + Math.cos(o) * n, u = i + Math.sin(o) * n;
                this.updatePosition(l, u), this.dirty();
            }
        }, a.prototype.dirty = function() {
            var e = this;
            if (e.$renderNode.dirtyRender = !0, !t.nativeRender) {
                var i = e.$targetDisplay;
                i.$cacheDirty = !0;
                var r = i.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = i.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, a.prototype.arcBounds = function(t, e, i, r, n) {
            var a = Math.PI;
            if (Math.abs(r - n) < .01) return this.extendBoundsByPoint(t - i, e - i), void this.extendBoundsByPoint(t + i, e + i);
            r > n && (n += 2 * a);
            for (var o = Math.cos(r) * i, s = Math.cos(n) * i, h = Math.min(o, s), c = Math.max(o, s), l = Math.sin(r) * i, u = Math.sin(n) * i, p = Math.min(l, u), d = Math.max(l, u), f = r / (.5 * a), $ = n / (.5 * a), y = Math.ceil(f); $ >= y; y++) switch (y % 4) {
              case 0:
                c = i;
                break;

              case 1:
                d = i;
                break;

              case 2:
                h = -i;
                break;

              case 3:
                p = -i;
            }
            h = Math.floor(h), p = Math.floor(p), c = Math.ceil(c), d = Math.ceil(d), this.extendBoundsByPoint(h + t, p + e), 
            this.extendBoundsByPoint(c + t, d + e);
        }, a.prototype.clear = function() {
            t.nativeRender && this.$targetDisplay.$nativeDisplayObject.setGraphicsClear(), this.$renderNode.clear(), 
            this.updatePosition(0, 0), this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = -1 / 0, 
            this.maxY = -1 / 0, this.dirty();
        }, a.prototype.extendBoundsByPoint = function(t, e) {
            this.extendBoundsByX(t), this.extendBoundsByY(e);
        }, a.prototype.extendBoundsByX = function(t) {
            this.minX = Math.min(this.minX, t - this.topLeftStrokeWidth), this.maxX = Math.max(this.maxX, t + this.bottomRightStrokeWidth), 
            this.updateNodeBounds();
        }, a.prototype.extendBoundsByY = function(t) {
            this.minY = Math.min(this.minY, t - this.topLeftStrokeWidth), this.maxY = Math.max(this.maxY, t + this.bottomRightStrokeWidth), 
            this.updateNodeBounds();
        }, a.prototype.updateNodeBounds = function() {
            var t = this.$renderNode;
            t.x = this.minX, t.y = this.minY, t.width = Math.ceil(this.maxX - this.minX), t.height = Math.ceil(this.maxY - this.minY);
        }, a.prototype.updatePosition = function(t, e) {
            this.includeLastPosition || (this.extendBoundsByPoint(this.lastX, this.lastY), this.includeLastPosition = !0), 
            this.lastX = t, this.lastY = e, this.extendBoundsByPoint(t, e);
        }, a.prototype.$measureContentBounds = function(t) {
            this.minX === 1 / 0 ? t.setEmpty() : t.setTo(this.minX, this.minY, this.maxX - this.minX, this.maxY - this.minY);
        }, a.prototype.$hitTest = function(e, i) {
            var r = this.$targetDisplay, n = r.$getInvertedConcatenatedMatrix(), a = n.a * e + n.c * i + n.tx, o = n.b * e + n.d * i + n.ty, s = t.sys.canvasHitTestBuffer;
            s.resize(3, 3);
            var h = this.$renderNode, c = t.Matrix.create();
            c.identity(), c.translate(1 - a, 1 - o), t.sys.canvasRenderer.drawNodeToBuffer(h, s, c, !0), 
            t.Matrix.release(c);
            try {
                if (0 === s.getPixels(1, 1)[3]) return null;
            } catch (e) {
                throw new Error(t.sys.tr(1039));
            }
            return r;
        }, a.prototype.$onRemoveFromStage = function() {
            this.$renderNode && this.$renderNode.clean(), t.nativeRender && egret_native.NativeDisplayObject.disposeGraphicData(this);
        }, a;
    }(t.HashObject);
    t.Graphics = h, e(h.prototype, "egret.Graphics");
}(p || (p = {}));

!function(t) {
    var r = Math.PI, n = 2 * r, a = r / 180, o = [], s = function(e) {
        function s(t, i, r, n, a, o) {
            void 0 === t && (t = 1), void 0 === i && (i = 0), void 0 === r && (r = 0), void 0 === n && (n = 1), 
            void 0 === a && (a = 0), void 0 === o && (o = 0);
            var s = e.call(this) || this;
            return s.a = t, s.b = i, s.c = r, s.d = n, s.tx = a, s.ty = o, s;
        }
        return i(s, e), s.release = function(t) {
            t && o.push(t);
        }, s.create = function() {
            var t = o.pop();
            return t || (t = new s()), t;
        }, s.prototype.clone = function() {
            return new s(this.a, this.b, this.c, this.d, this.tx, this.ty);
        }, s.prototype.concat = function(t) {
            var e = this.a * t.a, i = 0, r = 0, n = this.d * t.d, a = this.tx * t.a + t.tx, o = this.ty * t.d + t.ty;
            (0 !== this.b || 0 !== this.c || 0 !== t.b || 0 !== t.c) && (e += this.b * t.c, 
            n += this.c * t.b, i += this.a * t.b + this.b * t.d, r += this.c * t.a + this.d * t.c, 
            a += this.ty * t.c, o += this.tx * t.b), this.a = e, this.b = i, this.c = r, this.d = n, 
            this.tx = a, this.ty = o;
        }, s.prototype.copyFrom = function(t) {
            return this.a = t.a, this.b = t.b, this.c = t.c, this.d = t.d, this.tx = t.tx, this.ty = t.ty, 
            this;
        }, s.prototype.identity = function() {
            this.a = this.d = 1, this.b = this.c = this.tx = this.ty = 0;
        }, s.prototype.invert = function() {
            this.$invertInto(this);
        }, s.prototype.$invertInto = function(t) {
            var e = this.a, i = this.b, r = this.c, n = this.d, a = this.tx, o = this.ty;
            if (0 == i && 0 == r) return t.b = t.c = 0, void (0 == e || 0 == n ? t.a = t.d = t.tx = t.ty = 0 : (e = t.a = 1 / e, 
            n = t.d = 1 / n, t.tx = -e * a, t.ty = -n * o));
            var s = e * n - i * r;
            if (0 != s) {
                s = 1 / s;
                var h = t.a = n * s;
                i = t.b = -i * s, r = t.c = -r * s, n = t.d = e * s, t.tx = -(h * a + r * o), t.ty = -(i * a + n * o);
            } else t.identity();
        }, s.prototype.rotate = function(e) {
            if (0 != (e = +e)) {
                e /= a;
                var i = t.NumberUtils.cos(e), r = t.NumberUtils.sin(e), n = this.a, o = this.b, s = this.c, h = this.d, c = this.tx, l = this.ty;
                this.a = n * i - o * r, this.b = n * r + o * i, this.c = s * i - h * r, this.d = s * r + h * i, 
                this.tx = c * i - l * r, this.ty = c * r + l * i;
            }
        }, s.prototype.scale = function(t, e) {
            1 !== t && (this.a *= t, this.c *= t, this.tx *= t), 1 !== e && (this.b *= e, this.d *= e, 
            this.ty *= e);
        }, s.prototype.setTo = function(t, e, i, r, n, a) {
            return this.a = t, this.b = e, this.c = i, this.d = r, this.tx = n, this.ty = a, 
            this;
        }, s.prototype.transformPoint = function(e, i, r) {
            var n = this.a * e + this.c * i + this.tx, a = this.b * e + this.d * i + this.ty;
            return r ? (r.setTo(n, a), r) : new t.Point(n, a);
        }, s.prototype.translate = function(t, e) {
            this.tx += t, this.ty += e;
        }, s.prototype.equals = function(t) {
            return this.a == t.a && this.b == t.b && this.c == t.c && this.d == t.d && this.tx == t.tx && this.ty == t.ty;
        }, s.prototype.prepend = function(t, e, i, r, n, a) {
            var o = this.tx;
            if (1 != t || 0 != e || 0 != i || 1 != r) {
                var s = this.a, h = this.c;
                this.a = s * t + this.b * i, this.b = s * e + this.b * r, this.c = h * t + this.d * i, 
                this.d = h * e + this.d * r;
            }
            return this.tx = o * t + this.ty * i + n, this.ty = o * e + this.ty * r + a, this;
        }, s.prototype.append = function(t, e, i, r, n, a) {
            var o = this.a, s = this.b, h = this.c, c = this.d;
            return (1 != t || 0 != e || 0 != i || 1 != r) && (this.a = t * o + e * h, this.b = t * s + e * c, 
            this.c = i * o + r * h, this.d = i * s + r * c), this.tx = n * o + a * h + this.tx, 
            this.ty = n * s + a * c + this.ty, this;
        }, s.prototype.deltaTransformPoint = function(e) {
            var i = this, r = i.a * e.x + i.c * e.y, n = i.b * e.x + i.d * e.y;
            return new t.Point(r, n);
        }, s.prototype.toString = function() {
            return "(a=" + this.a + ", b=" + this.b + ", c=" + this.c + ", d=" + this.d + ", tx=" + this.tx + ", ty=" + this.ty + ")";
        }, s.prototype.createBox = function(e, i, r, n, o) {
            void 0 === r && (r = 0), void 0 === n && (n = 0), void 0 === o && (o = 0);
            var s = this;
            if (0 !== r) {
                r /= a;
                var h = t.NumberUtils.cos(r), c = t.NumberUtils.sin(r);
                s.a = h * e, s.b = c * i, s.c = -c * e, s.d = h * i;
            } else s.a = e, s.b = 0, s.c = 0, s.d = i;
            s.tx = n, s.ty = o;
        }, s.prototype.createGradientBox = function(t, e, i, r, n) {
            void 0 === i && (i = 0), void 0 === r && (r = 0), void 0 === n && (n = 0), this.createBox(t / 1638.4, e / 1638.4, i, r + t / 2, n + e / 2);
        }, s.prototype.$transformBounds = function(t) {
            var e = this.a, i = this.b, r = this.c, n = this.d, a = this.tx, o = this.ty, s = t.x, h = t.y, c = s + t.width, l = h + t.height, u = e * s + r * h + a, p = i * s + n * h + o, d = e * c + r * h + a, f = i * c + n * h + o, $ = e * c + r * l + a, y = i * c + n * l + o, g = e * s + r * l + a, v = i * s + n * l + o, b = 0;
            u > d && (b = u, u = d, d = b), $ > g && (b = $, $ = g, g = b), t.x = Math.floor($ > u ? u : $), 
            t.width = Math.ceil((d > g ? d : g) - t.x), p > f && (b = p, p = f, f = b), y > v && (b = y, 
            y = v, v = b), t.y = Math.floor(y > p ? p : y), t.height = Math.ceil((f > v ? f : v) - t.y);
        }, s.prototype.getDeterminant = function() {
            return this.a * this.d - this.b * this.c;
        }, s.prototype.$getScaleX = function() {
            var t = this;
            if (0 == t.b) return t.a;
            var e = Math.sqrt(t.a * t.a + t.b * t.b);
            return this.getDeterminant() < 0 ? -e : e;
        }, s.prototype.$getScaleY = function() {
            var t = this;
            if (0 == t.c) return t.d;
            var e = Math.sqrt(t.c * t.c + t.d * t.d);
            return this.getDeterminant() < 0 ? -e : e;
        }, s.prototype.$getSkewX = function() {
            return this.d < 0 ? Math.atan2(this.d, this.c) + r / 2 : Math.atan2(this.d, this.c) - r / 2;
        }, s.prototype.$getSkewY = function() {
            return this.a < 0 ? Math.atan2(this.b, this.a) - r : Math.atan2(this.b, this.a);
        }, s.prototype.$updateScaleAndRotation = function(e, i, r, o) {
            if (!(0 != r && r != n || 0 != o && o != n)) return this.a = e, this.b = this.c = 0, 
            void (this.d = i);
            r /= a, o /= a;
            var s = t.NumberUtils.cos(r), h = t.NumberUtils.sin(r);
            r == o ? (this.a = s * e, this.b = h * e) : (this.a = t.NumberUtils.cos(o) * e, 
            this.b = t.NumberUtils.sin(o) * e), this.c = -h * i, this.d = s * i;
        }, s.prototype.$preMultiplyInto = function(t, e) {
            var i = t.a * this.a, r = 0, n = 0, a = t.d * this.d, o = t.tx * this.a + this.tx, s = t.ty * this.d + this.ty;
            (0 !== t.b || 0 !== t.c || 0 !== this.b || 0 !== this.c) && (i += t.b * this.c, 
            a += t.c * this.b, r += t.a * this.b + t.b * this.d, n += t.c * this.a + t.d * this.c, 
            o += t.ty * this.c, s += t.tx * this.b), e.a = i, e.b = r, e.c = n, e.d = a, e.tx = o, 
            e.ty = s;
        }, s;
    }(t.HashObject);
    t.Matrix = s, e(s.prototype, "egret.Matrix"), t.$TempMatrix = new s();
}(p || (p = {}));

!function(t) {
    var r = [], n = function(e) {
        function n(t, i, r, n) {
            void 0 === t && (t = 0), void 0 === i && (i = 0), void 0 === r && (r = 0), void 0 === n && (n = 0);
            var a = e.call(this) || this;
            return a.x = t, a.y = i, a.width = r, a.height = n, a;
        }
        return i(n, e), n.release = function(t) {
            t && r.push(t);
        }, n.create = function() {
            var t = r.pop();
            return t || (t = new n()), t;
        }, Object.defineProperty(n.prototype, "right", {
            get: function() {
                return this.x + this.width;
            },
            set: function(t) {
                this.width = t - this.x;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "bottom", {
            get: function() {
                return this.y + this.height;
            },
            set: function(t) {
                this.height = t - this.y;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "left", {
            get: function() {
                return this.x;
            },
            set: function(t) {
                this.width += this.x - t, this.x = t;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "top", {
            get: function() {
                return this.y;
            },
            set: function(t) {
                this.height += this.y - t, this.y = t;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "topLeft", {
            get: function() {
                return new t.Point(this.left, this.top);
            },
            set: function(t) {
                this.top = t.y, this.left = t.x;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(n.prototype, "bottomRight", {
            get: function() {
                return new t.Point(this.right, this.bottom);
            },
            set: function(t) {
                this.bottom = t.y, this.right = t.x;
            },
            enumerable: !0,
            configurable: !0
        }), n.prototype.copyFrom = function(t) {
            return this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height, 
            this;
        }, n.prototype.setTo = function(t, e, i, r) {
            return this.x = t, this.y = e, this.width = i, this.height = r, this;
        }, n.prototype.contains = function(t, e) {
            return this.x <= t && this.x + this.width >= t && this.y <= e && this.y + this.height >= e;
        }, n.prototype.intersection = function(t) {
            return this.clone().$intersectInPlace(t);
        }, n.prototype.inflate = function(t, e) {
            this.x -= t, this.width += 2 * t, this.y -= e, this.height += 2 * e;
        }, n.prototype.$intersectInPlace = function(t) {
            var e = this.x, i = this.y, r = t.x, n = t.y, a = Math.max(e, r), o = Math.min(e + this.width, r + t.width);
            if (o >= a) {
                var s = Math.max(i, n), h = Math.min(i + this.height, n + t.height);
                if (h >= s) return this.setTo(a, s, o - a, h - s), this;
            }
            return this.setEmpty(), this;
        }, n.prototype.intersects = function(t) {
            return Math.max(this.x, t.x) <= Math.min(this.right, t.right) && Math.max(this.y, t.y) <= Math.min(this.bottom, t.bottom);
        }, n.prototype.isEmpty = function() {
            return this.width <= 0 || this.height <= 0;
        }, n.prototype.setEmpty = function() {
            this.x = 0, this.y = 0, this.width = 0, this.height = 0;
        }, n.prototype.clone = function() {
            return new n(this.x, this.y, this.width, this.height);
        }, n.prototype.containsPoint = function(t) {
            return this.x <= t.x && this.x + this.width > t.x && this.y <= t.y && this.y + this.height > t.y;
        }, n.prototype.containsRect = function(t) {
            var e = t.x + t.width, i = t.y + t.height, r = this.x + this.width, n = this.y + this.height;
            return t.x >= this.x && t.x < r && t.y >= this.y && t.y < n && e > this.x && r >= e && i > this.y && n >= i;
        }, n.prototype.equals = function(t) {
            return this === t || this.x === t.x && this.y === t.y && this.width === t.width && this.height === t.height;
        }, n.prototype.inflatePoint = function(t) {
            this.inflate(t.x, t.y);
        }, n.prototype.offset = function(t, e) {
            this.x += t, this.y += e;
        }, n.prototype.offsetPoint = function(t) {
            this.offset(t.x, t.y);
        }, n.prototype.toString = function() {
            return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
        }, n.prototype.union = function(t) {
            var e = this.clone();
            if (t.isEmpty()) return e;
            if (e.isEmpty()) return e.copyFrom(t), e;
            var i = Math.min(e.x, t.x), r = Math.min(e.y, t.y);
            return e.setTo(i, r, Math.max(e.right, t.right) - i, Math.max(e.bottom, t.bottom) - r), 
            e;
        }, n.prototype.$getBaseWidth = function(t) {
            var e = Math.abs(Math.cos(t)), i = Math.abs(Math.sin(t));
            return e * this.width + i * this.height;
        }, n.prototype.$getBaseHeight = function(t) {
            var e = Math.abs(Math.cos(t));
            return Math.abs(Math.sin(t)) * this.width + e * this.height;
        }, n;
    }(t.HashObject);
    t.Rectangle = n, e(n.prototype, "egret.Rectangle"), t.$TempRectangle = new n();
}(p || (p = {}));

!function(t) {
    t.$locale_strings = t.$locale_strings || {}, t.$locale_strings.en_US = t.$locale_strings.en_US || {};
    var e = t.$locale_strings.en_US;
    e[1001] = "Could not find Egret entry class: {0}。", e[1002] = "Egret entry class '{0}' must inherit from egret.DisplayObject.", 
    e[1003] = "Parameter {0} must be non-null.", e[1004] = "An object cannot be added as a child to one of it's children (or children's children, etc.).", 
    e[1005] = "An object cannot be added as a child of itself.", e[1006] = "The supplied DisplayObject must be a child of the caller.", 
    e[1007] = "An index specified for a parameter was out of range.", e[1008] = "Instantiate singleton error，singleton class {0} can not create multiple instances.", 
    e[1009] = 'the Class {0} cannot use the property "{1}"', e[1010] = 'the property "{1}" of the Class "{0}" is readonly', 
    e[1011] = "Stream Error. URL: {0}", e[1012] = "The type of parameter {0} must be Class.", 
    e[1013] = "Variable assignment is NaN, please see the code!", e[1014] = 'the constant "{1}" of the Class "{0}" is read-only', 
    e[1015] = "xml not found!", e[1016] = "{0}has been obsoleted", e[1017] = "The format of JSON file is incorrect: {0}\ndata: {1}", 
    e[1018] = "the scale9Grid is not correct", e[1019] = "Network ab:{0}", e[1020] = "Cannot initialize Shader", 
    e[1021] = "Current browser does not support webgl", e[1022] = "{0} ArgumentError", 
    e[1023] = "This method is not available in the ScrollView!", e[1025] = "end of the file", 
    e[1026] = "! EncodingError The code point {0} could not be encoded.", e[1027] = "DecodingError", 
    e[1028] = ". called injection is not configured rule: {0}, please specify configuration during its initial years of injection rule, and then call the corresponding single case.", 
    e[1029] = "Function.prototype.bind - what is trying to be bound is not callable", 
    e[1033] = "Photos can not be used across domains toDataURL to convert base64", e[1034] = 'Music file decoding failed: "{0}", please use the standard conversion tool reconversion under mp3.', 
    e[1035] = "Native does not support this feature!", e[1036] = "Sound has stopped, please recall Sound.play () to play the sound!", 
    e[1037] = "Non-load the correct blob!", e[1038] = "XML format error!", e[1039] = "Cross domains pictures can not get pixel information!", 
    e[1040] = "hitTestPoint can not detect crossOrigin images! Please check if the display object has crossOrigin elements.", 
    e[1041] = "{0} is deprecated, please use {1} replace", e[1042] = "The parameters passed in the region needs is an integer in drawToTexture method. Otherwise, some browsers will draw abnormal.", 
    e[1043] = "Compile errors in {0}, the attribute name: {1}, the attribute value: {2}.", 
    e[1044] = "The current version of the Runtime does not support video playback, please use the latest version", 
    e[1045] = "The resource url is not found", e[1046] = "BitmapText no corresponding characters: {0}, please check the configuration file", 
    e[1047] = "egret.localStorage.setItem save failed,key={0}&value={1}", e[1048] = "Video loading failed", 
    e[1049] = "In the absence of sound is not allowed to play after loading", e[1050] = "ExternalInterface calls the method without js registration: {0}", 
    e[3e3] = "Theme configuration file failed to load: {0}", e[3001] = "Cannot find the skin name which is configured in Theme: {0}", 
    e[3002] = 'Index:"{0}" is out of the collection element index range', e[3003] = "Cannot be available in this component. If this component is container, please continue to use", 
    e[3004] = "addChild(){0}addElement() replace", e[3005] = "addChildAt(){0}addElementAt() replace", 
    e[3006] = "removeChild(){0}removeElement() replace", e[3007] = "removeChildAt(){0}removeElementAt() replace", 
    e[3008] = "setChildIndex(){0}setElementIndex() replace", e[3009] = "swapChildren(){0}swapElements() replace", 
    e[3010] = "swapChildrenAt(){0}swapElementsAt() replace", e[3011] = 'Index:"{0}" is out of the visual element index range', 
    e[3012] = "This method is not available in Scroller component!", e[3013] = "UIStage is GUI root container, and only one such instant is in the display list！", 
    e[3014] = "set fullscreen error", e[3100] = "Current browser does not support WebSocket", 
    e[3101] = "Please connect Socket firstly", e[3102] = "Please set the type of binary type", 
    e[4e3] = "An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)", 
    e[4001] = "Abstract class can not be instantiated!", e[4002] = "Unnamed data!", 
    e[4003] = "Nonsupport version!";
}(p || (p = {}));

(p || (p = {})).JointStyle = {
    BEVEL: "bevel",
    MITER: "miter",
    ROUND: "round"
};

!function(t) {
    t.$locale_strings = t.$locale_strings || {}, t.$locale_strings.zh_CN = t.$locale_strings.zh_CN || {};
    var e = t.$locale_strings.zh_CN;
    e[1001] = "找不到Egret入口类: {0}。", e[1002] = "Egret入口类 {0} 必须继承自egret.DisplayObject。", 
    e[1003] = "参数 {0} 不能为 null。", e[1004] = "无法将对象添加为它的一个子对象（或子对象的子对象等）的子对象。", e[1005] = "不能将对象添加为其自身的子对象。", 
    e[1006] = "提供的 DisplayObject 必须是调用者的子级。", e[1007] = "为参数指定的索引不在范围内。", e[1008] = "实例化单例出错，不允许实例化多个 {0} 对象。", 
    e[1009] = "类 {0} 不可以使用属性 {1}", e[1010] = "类 {0} 属性 {1} 是只读的", e[1011] = "流错误。URL: {0}", 
    e[1012] = "参数 {0} 的类型必须为 Class。", e[1013] = "变量赋值为NaN，请查看代码！", e[1014] = "类 {0} 常量 {1} 是只读的", 
    e[1015] = "xml not found!", e[1016] = "{0}已经废弃", e[1017] = "JSON文件格式不正确: {0}\ndata: {1}", 
    e[1018] = "9宫格设置错误", e[1019] = "网络异常:{0}", e[1020] = "无法初始化着色器", e[1021] = "当前浏览器不支持webgl", 
    e[1022] = "{0} ArgumentError", e[1023] = "此方法在ScrollView内不可用!", e[1025] = "遇到文件尾", 
    e[1026] = "EncodingError! The code point {0} could not be encoded.", e[1027] = "DecodingError", 
    e[1028] = "调用了未配置的注入规则:{0}。 请先在项目初始化里配置指定的注入规则，再调用对应单例。", e[1029] = "Function.prototype.bind - what is trying to be bound is not callable", 
    e[1033] = "跨域图片不可以使用toDataURL来转换成base64", e[1034] = '音乐文件解码失败："{0}"，请使用标准的转换工具重新转换下mp3。', 
    e[1035] = "Native 下暂未实现此功能！", e[1036] = "声音已停止，请重新调用 Sound.play() 来播放声音！", e[1037] = "非正确的blob加载！", 
    e[1038] = "XML 格式错误!", e[1039] = "跨域图片不能获取像素信息!", e[1040] = "hitTestPoint 不能对跨域图片进行检测! 请检查该显示对象内是否含有跨域元素", 
    e[1041] = "{0} 已废弃,请使用 {1} 代替", e[1042] = "drawToTexture方法传入的区域各个参数需要为整数,否则某些浏览器绘制会出现异常", 
    e[1043] = "{0} 中存在编译错误，属性名 : {1}，属性值 : {2}", e[1044] = "当前的 runtime 版本不支持视频播放,请使用最新的版本", 
    e[1045] = "没有设置要加载的资源地址", e[1046] = "BitmapText 找不到对应字符:{0}，请检查配置文件", e[1047] = "egret.localStorage.setItem保存失败,key={0}&value={1}", 
    e[1048] = "视频加载失败", e[1049] = "声音在没有加载完之前不允许播放", e[1050] = "ExternalInterface调用了js没有注册的方法: {0}", 
    e[3e3] = "主题配置文件加载失败: {0}", e[3001] = "找不到主题中所配置的皮肤类名: {0}", e[3002] = '索引:"{0}"超出集合元素索引范围', 
    e[3003] = "在此组件中不可用，若此组件为容器类，请使用", e[3004] = "addChild(){0}addElement()代替", e[3005] = "addChildAt(){0}addElementAt()代替", 
    e[3006] = "removeChild(){0}removeElement()代替", e[3007] = "removeChildAt(){0}removeElementAt()代替", 
    e[3008] = "setChildIndex(){0}setElementIndex()代替", e[3009] = "swapChildren(){0}swapElements()代替", 
    e[3010] = "swapChildrenAt(){0}swapElementsAt()代替", e[3011] = '索引:"{0}"超出可视元素索引范围', 
    e[3012] = "此方法在Scroller组件内不可用!", e[3013] = "UIStage是GUI根容器，只能有一个此实例在显示列表中！", e[3014] = "设置全屏模式失败", 
    e[3100] = "当前浏览器不支持WebSocket", e[3101] = "请先连接WebSocket", e[3102] = "请先设置type为二进制类型", 
    e[4e3] = "An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)", 
    e[4001] = "Abstract class can not be instantiated!", e[4002] = "Unnamed data!", 
    e[4003] = "Nonsupport version!";
}(p || (p = {}));

!function(t) {
    t.localStorage || (t.localStorage = {});
}(p || (p = {}));

!function(t) {
    !function(t) {
        var e = [];
        t.$pushSoundChannel = function(t) {
            e.indexOf(t) < 0 && e.push(t);
        }, t.$popSoundChannel = function(t) {
            var i = e.indexOf(t);
            return i >= 0 && (e.splice(i, 1), !0);
        };
    }(t.sys || (t.sys = {}));
}(p || (p = {})), p || (p = {});

p || (p = {});

!function(t) {
    !function(t) {
        t.GET = "GET", t.POST = "POST";
    }(t.HttpMethod || (t.HttpMethod = {}));
}(p || (p = {}));

p || (p = {});

!function(t) {
    var i = function() {
        function t() {}
        return t.TEXT = "text", t.ARRAY_BUFFER = "arraybuffer", t;
    }();
    t.HttpResponseType = i, e(i.prototype, "egret.HttpResponseType");
}(p || (p = {}));

p || (p = {});

!function(t) {
    !function(r) {
        var n = function(e) {
            function n(i) {
                var n = e.call(this) || this;
                return n.isStage = !1, n.$renderNode = new r.BitmapNode(), n.renderBuffer = null, 
                n.offsetX = 0, n.offsetY = 0, n.offsetMatrix = new t.Matrix(), n.$canvasScaleX = 1, 
                n.$canvasScaleY = 1, n.root = i, n.isStage = i instanceof t.Stage, n;
            }
            return i(n, e), n.create = function(e) {
                var i = new t.sys.DisplayList(e);
                try {
                    var n = new r.RenderBuffer();
                    i.renderBuffer = n;
                } catch (t) {
                    return null;
                }
                return i.root = e, i;
            }, n.prototype.$getRenderNode = function() {
                return this.$renderNode;
            }, n.prototype.setClipRect = function(t, e) {
                t *= n.$canvasScaleX, e *= n.$canvasScaleY, this.renderBuffer.resize(t, e);
            }, n.prototype.drawToSurface = function() {
                var e = 0;
                this.$canvasScaleX = this.offsetMatrix.a = n.$canvasScaleX, this.$canvasScaleY = this.offsetMatrix.d = n.$canvasScaleY, 
                this.isStage || this.changeSurfaceSize();
                var i = this.renderBuffer;
                if (i.clear(), e = r.systemRenderer.render(this.root, i, this.offsetMatrix), !this.isStage) {
                    var a = i.surface, o = this.$renderNode;
                    o.drawData.length = 0;
                    var s = a.width, h = a.height;
                    this.bitmapData ? (this.bitmapData.source = a, this.bitmapData.width = s, this.bitmapData.height = h) : this.bitmapData = new t.BitmapData(a), 
                    o.image = this.bitmapData, o.imageWidth = s, o.imageHeight = h, o.drawImage(0, 0, s, h, -this.offsetX, -this.offsetY, s / this.$canvasScaleX, h / this.$canvasScaleY);
                }
                return e;
            }, n.prototype.changeSurfaceSize = function() {
                var t = (this.root, this.offsetX), e = this.offsetY, i = this.root.$getOriginalBounds(), r = this.$canvasScaleX, n = this.$canvasScaleY;
                this.offsetX = -i.x, this.offsetY = -i.y, this.offsetMatrix.setTo(this.offsetMatrix.a, 0, 0, this.offsetMatrix.d, this.offsetX, this.offsetY);
                var a = this.renderBuffer, o = Math.max(257, i.width * r), s = Math.max(257, i.height * n);
                (this.offsetX != t || this.offsetY != e || a.surface.width != o || a.surface.height != s) && a.resize(o, s);
            }, n.$setCanvasScale = function(e, i) {
                n.$canvasScaleX = e, n.$canvasScaleY = i, t.nativeRender && egret_native.nrSetCanvasScaleFactor(n.$canvasScaleFactor, e, i);
            }, n.$canvasScaleFactor = 1, n.$canvasScaleX = 1, n.$canvasScaleY = 1, n;
        }(t.HashObject);
        r.DisplayList = n, e(n.prototype, "egret.sys.DisplayList");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

p || (p = {});

p || (p = {});

!function(t) {
    !function(r) {
        function a(t) {
            for (var e = [], i = 0; i < t.length; i++) e.push(t[i]);
            return e;
        }
        var o = function(e) {
            function n(i, r, n) {
                var a = e.call(this) || this;
                return a.isPlaying = !1, a.entryClassName = n, a.stage = r, a.screenDisplayList = a.createDisplayList(r, i), 
                a.showFPS = !1, a.showLog = !1, a.stageDisplayList = null, t.nativeRender && (egret_native.rootWebGLBuffer = i), 
                a;
            }
            return i(n, e), n.prototype.createDisplayList = function(t, e) {
                var i = new r.DisplayList(t);
                return i.renderBuffer = e, t.$displayList = i, i;
            }, n.prototype.start = function() {
                !this.isPlaying && this.stage && (r.$TempStage = r.$TempStage || this.stage, this.isPlaying = !0, 
                this.root || this.initialize(), t.ticker.$addPlayer(this));
            }, n.prototype.initialize = function() {
                var e;
                if (this.entryClassName && (e = t.getDefinitionByName(this.entryClassName)), e) {
                    var i = new e();
                    this.root = i, i instanceof t.DisplayObject && this.stage.addChild(i);
                }
            }, n.prototype.stop = function() {
                this.pause(), this.stage = null;
            }, n.prototype.pause = function() {
                this.isPlaying && (this.isPlaying = !1, t.ticker.$removePlayer(this));
            }, n.prototype.$render = function(e, i) {
                if (t.nativeRender) return egret_native.updateNativeRender(), void egret_native.nrRender();
                var r = this.stage, n = t.getTimer(), a = r.$displayList.drawToSurface(), o = t.getTimer();
                e && this.showFPS && s.update(a, o - n, i);
            }, n.prototype.updateStageSize = function(e, i) {
                var r = this.stage;
                r.$stageWidth = e, r.$stageHeight = i, t.nativeRender ? egret_native.nrResize(e, i) : (this.screenDisplayList.setClipRect(e, i), 
                this.stageDisplayList && this.stageDisplayList.setClipRect(e, i)), r.dispatchEventWith(t.Event.RESIZE);
            }, n.prototype.displayFPS = function(e, i, n, o) {
                if ((i = !!i) && (t.log = function() {
                    for (var t = arguments.length, e = "", i = 0; t > i; i++) e += arguments[i] + " ";
                    r.$logToFPS(e), console.log.apply(console, a(arguments));
                }, t.warn = function() {
                    for (var t = arguments.length, e = "", i = 0; t > i; i++) e += arguments[i] + " ";
                    r.$warnToFPS(e), console.warn.apply(console, a(arguments));
                }, t.error = function() {
                    for (var t = arguments.length, e = "", i = 0; t > i; i++) e += arguments[i] + " ";
                    r.$errorToFPS(e), console.error.apply(console, a(arguments));
                }), this.showFPS = !!e, this.showLog = i, !s) {
                    s = new FPS(this.stage, e, i, n, o);
                    for (var u = h.length, p = 0; u > p; p++) s.updateInfo(h[p]);
                    h = null;
                    for (var d = c.length, p = 0; d > p; p++) s.updateWarn(c[p]);
                    c = null;
                    for (var f = l.length, p = 0; f > p; p++) s.updateError(l[p]);
                    l = null;
                }
            }, n;
        }(t.HashObject);
        r.Player = o, e(o.prototype, "egret.sys.Player");
        var s, h = [], c = [], l = [];
        r.$logToFPS = function(t) {
            return s ? void s.updateInfo(t) : void h.push(t);
        }, r.$warnToFPS = function(t) {
            return s ? void s.updateWarn(t) : void c.push(t);
        }, r.$errorToFPS = function(t) {
            return s ? void s.updateError(t) : void l.push(t);
        };
        var u = function() {
            function e(e, i, r, n, a) {
                this.showFPS = i, this.showLog = r, this.logFilter = n, this.styles = a, this.infoLines = [], 
                this.totalTime = 0, this.totalTick = 0, this.lastTime = 0, this.drawCalls = 0, this.costRender = 0, 
                this.costTicker = 0, this.infoLines = [], this.totalTime = 0, this.totalTick = 0, 
                this.lastTime = 0, this.drawCalls = 0, this.costRender = 0, this.costTicker = 0, 
                this._stage = e, this.showFPS = i, this.showLog = r, this.logFilter = n, this.styles = a, 
                this.fpsDisplay = new t.FPSDisplay(e, i, r, n, a);
                var o;
                try {
                    o = n ? new RegExp(n) : null;
                } catch (e) {
                    t.log(e);
                }
                this.filter = function(t) {
                    return o ? o.test(t) : !n || 0 == t.indexOf(n);
                };
            }
            return e.prototype.update = function(e, i, r) {
                var n = t.getTimer();
                if (this.totalTime += n - this.lastTime, this.lastTime = n, this.totalTick++, this.drawCalls += e, 
                this.costRender += i, this.costTicker += r, this.totalTime >= 1e3) {
                    var a = Math.min(Math.ceil(1e3 * this.totalTick / this.totalTime), t.ticker.$frameRate), o = Math.round(this.drawCalls / this.totalTick), s = Math.round(this.costRender / this.totalTick), h = Math.round(this.costTicker / this.totalTick);
                    this.fpsDisplay.update({
                        fps: a,
                        draw: o,
                        costTicker: h,
                        costRender: s
                    }), this.totalTick = 0, this.totalTime = this.totalTime % 1e3, this.drawCalls = 0, 
                    this.costRender = 0, this.costTicker = 0;
                }
            }, e.prototype.updateInfo = function(t) {
                t && this.showLog && this.filter(t) && this.fpsDisplay.updateInfo(t);
            }, e.prototype.updateWarn = function(t) {
                t && this.showLog && this.filter(t) && (this.fpsDisplay.updateWarn ? this.fpsDisplay.updateWarn(t) : this.fpsDisplay.updateInfo("[Warning]" + t));
            }, e.prototype.updateError = function(t) {
                t && this.showLog && this.filter(t) && (this.fpsDisplay.updateError ? this.fpsDisplay.updateError(t) : this.fpsDisplay.updateInfo("[Error]" + t));
            }, e;
        }();
        e(u.prototype, "FPSImpl"), n.FPS = u, t.warn = function() {
            console.warn.apply(console, a(arguments));
        }, t.error = function() {
            console.error.apply(console, a(arguments));
        }, t.assert = function() {
            console.assert.apply(console, a(arguments));
        }, t.log = function() {
            console.log.apply(console, a(arguments));
        };
    }(t.sys || (t.sys = {}));
}(p || (p = {})), function(t) {
    if (t.nativeRender = n.nativeRender, t.nativeRender) {
        var e = egret_native.nrABIVersion, i = egret_native.nrMinEgretVersion;
        if (4 > e) {
            t.nativeRender = !1;
            r = "需要升级微端版本到 0.1.8 才可以开启原生渲染加速";
            t.sys.$warnToFPS(r), t.warn(r);
        } else if (e > 4) {
            t.nativeRender = !1;
            var r = "需要升级引擎版本到 " + i + " 才可以开启原生渲染加速";
            t.sys.$warnToFPS(r), t.warn(r);
        }
    }
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r(i) {
            var r = e.call(this, i) || this;
            return r._verticesDirty = !0, r._bounds = new t.Rectangle(), r.$renderNode = new t.sys.MeshNode(), 
            r;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(12);
        }, r.prototype.setBitmapDataToWasm = function(t) {
            this.$nativeDisplayObject.setBitmapDataToMesh(t);
        }, r.prototype.$updateRenderNode = function() {
            var e = this.$bitmapData;
            if (e) {
                var i = (t.$TextureScaleFactor, this.$renderNode);
                i.smoothing = this.$smoothing, i.image = e, i.imageWidth = this.$sourceWidth, i.imageHeight = this.$sourceHeight;
                var r = isNaN(this.$explicitBitmapWidth) ? this.$textureWidth : this.$explicitBitmapWidth, n = isNaN(this.$explicitBitmapHeight) ? this.$textureHeight : this.$explicitBitmapHeight, a = r / this.$textureWidth, o = n / this.$textureHeight, s = this.$bitmapWidth, h = this.$bitmapHeight;
                i.drawMesh(this.$bitmapX, this.$bitmapY, s, h, this.$offsetX * a, this.$offsetY * o, a * s, o * h);
            }
        }, r.prototype.$updateVertices = function() {
            var e = this;
            if (e._verticesDirty = !0, e.$renderDirty = !0, t.nativeRender) {
                var i = this.$renderNode;
                this.$nativeDisplayObject.setDataToMesh(i.vertices, i.indices, i.uvs);
            } else {
                var r = e.$parent;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
                var n = e.$maskedObject;
                n && !n.$cacheDirty && (n.$cacheDirty = !0, n.$cacheDirtyUp());
            }
        }, r.prototype.$measureContentBounds = function(t) {
            if (this._verticesDirty) {
                this._verticesDirty = !1;
                var e = this.$renderNode, i = e.vertices;
                if (i.length) {
                    this._bounds.setTo(Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
                    for (var r = 0, n = i.length; n > r; r += 2) {
                        var a = i[r], o = i[r + 1];
                        this._bounds.x > a && (this._bounds.x = a), this._bounds.width < a && (this._bounds.width = a), 
                        this._bounds.y > o && (this._bounds.y = o), this._bounds.height < o && (this._bounds.height = o);
                    }
                    this._bounds.width -= this._bounds.x, this._bounds.height -= this._bounds.y;
                } else this._bounds.setTo(0, 0, 0, 0);
                e.bounds.copyFrom(this._bounds);
            }
            t.copyFrom(this._bounds);
        }, r;
    }(t.Bitmap);
    t.Mesh = r, e(r.prototype, "egret.Mesh");
}(p || (p = {}));

!function(t) {
    !function(r) {
        var n = function(e) {
            function r() {
                return e.call(this) || this;
            }
            return i(r, e), r.prototype.calculateStageSize = function(e, i, r, n, a) {
                var o = i, s = r, h = n, c = a, l = i / h || 0, u = r / c || 0;
                switch (e) {
                  case t.StageScaleMode.EXACT_FIT:
                    break;

                  case t.StageScaleMode.FIXED_HEIGHT:
                    h = Math.round(i / u);
                    break;

                  case t.StageScaleMode.FIXED_WIDTH:
                    c = Math.round(r / l);
                    break;

                  case t.StageScaleMode.NO_BORDER:
                    l > u ? s = Math.round(c * l) : o = Math.round(h * u);
                    break;

                  case t.StageScaleMode.SHOW_ALL:
                    l > u ? o = Math.round(h * u) : s = Math.round(c * l);
                    break;

                  case t.StageScaleMode.FIXED_NARROW:
                    l > u ? h = Math.round(i / u) : c = Math.round(r / l);
                    break;

                  case t.StageScaleMode.FIXED_WIDE:
                    l > u ? c = Math.round(r / l) : h = Math.round(i / u);
                    break;

                  default:
                    h = i, c = r;
                }
                return t.Capabilities.runtimeType != t.RuntimeType.WXGAME && (h % 2 != 0 && (h += 1), 
                c % 2 != 0 && (c += 1), o % 2 != 0 && (o += 1), s % 2 != 0 && (s += 1)), {
                    stageWidth: h,
                    stageHeight: c,
                    displayWidth: o,
                    displayHeight: s
                };
            }, r;
        }(t.HashObject);
        r.DefaultScreenAdapter = n, e(n.prototype, "egret.sys.DefaultScreenAdapter", [ "egret.sys.IScreenAdapter" ]);
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.NO_SCALE = "noScale", t.SHOW_ALL = "showAll", t.NO_BORDER = "noBorder", 
        t.EXACT_FIT = "exactFit", t.FIXED_WIDTH = "fixedWidth", t.FIXED_HEIGHT = "fixedHeight", 
        t.FIXED_NARROW = "fixedNarrow", t.FIXED_WIDE = "fixedWide", t;
    }();
    t.StageScaleMode = i, e(i.prototype, "egret.StageScaleMode");
}(p || (p = {}));

!function(t) {
    t.sys || (t.sys = {});
}(p || (p = {}));

!function(t) {
    !function(i) {
        i.$START_TIME = 0, i.$invalidateRenderFlag = !1, i.$requestRenderingFlag = !1;
        var r = function() {
            function e() {
                this.playerList = [], this.callBackList = [], this.thisObjectList = [], this.$frameRate = 30, 
                this.lastTimeStamp = 0, this.costEnterFrame = 0, this.isPaused = !1, i.$START_TIME = Date.now(), 
                this.frameDeltaTime = 1e3 / this.$frameRate, this.lastCount = this.frameInterval = Math.round(6e4 / this.$frameRate);
            }
            return e.prototype.$addPlayer = function(t) {
                -1 == this.playerList.indexOf(t) && (this.playerList = this.playerList.concat(), 
                this.playerList.push(t));
            }, e.prototype.$removePlayer = function(t) {
                var e = this.playerList.indexOf(t);
                -1 !== e && (this.playerList = this.playerList.concat(), this.playerList.splice(e, 1));
            }, e.prototype.$startTick = function(t, e) {
                -1 == this.getTickIndex(t, e) && (this.concatTick(), this.callBackList.push(t), 
                this.thisObjectList.push(e));
            }, e.prototype.$stopTick = function(t, e) {
                var i = this.getTickIndex(t, e);
                -1 != i && (this.concatTick(), this.callBackList.splice(i, 1), this.thisObjectList.splice(i, 1));
            }, e.prototype.getTickIndex = function(t, e) {
                for (var i = this.callBackList, r = this.thisObjectList, n = i.length - 1; n >= 0; n--) if (i[n] == t && r[n] == e) return n;
                return -1;
            }, e.prototype.concatTick = function() {
                this.callBackList = this.callBackList.concat(), this.thisObjectList = this.thisObjectList.concat();
            }, e.prototype.$setFrameRate = function(t) {
                return !(0 >= t) && (this.$frameRate != t && (this.$frameRate = t, t > 60 && (t = 60), 
                this.frameDeltaTime = 1e3 / t, this.lastCount = this.frameInterval = Math.round(6e4 / t), 
                !0));
            }, e.prototype.pause = function() {
                this.isPaused = !0;
            }, e.prototype.resume = function() {
                this.isPaused = !1;
            }, e.prototype.update = function() {
                for (var e = t.getTimer(), r = this.callBackList, n = this.thisObjectList, a = r.length, o = i.$requestRenderingFlag, s = t.getTimer(), h = 0, c = t.lifecycle.contexts; h < c.length; h++) {
                    var l = c[h];
                    l.onUpdate && l.onUpdate();
                }
                if (this.isPaused) this.lastTimeStamp = s; else {
                    this.callLaterAsyncs();
                    for (var u = 0; a > u; u++) r[u].call(n[u], s) && (o = !0);
                    var p = t.getTimer(), d = s - this.lastTimeStamp;
                    if (this.lastTimeStamp = s, d >= this.frameDeltaTime) this.lastCount = this.frameInterval; else {
                        if (this.lastCount -= 1e3, this.lastCount > 0) return void (o && this.render(!1, this.costEnterFrame + p - e));
                        this.lastCount += this.frameInterval;
                    }
                    this.render(!0, this.costEnterFrame + p - e);
                    var f = t.getTimer();
                    this.broadcastEnterFrame();
                    var $ = t.getTimer();
                    this.costEnterFrame = $ - f;
                }
            }, e.prototype.render = function(t, e) {
                var r = this.playerList, n = r.length;
                if (0 != n) {
                    this.callLaters(), i.$invalidateRenderFlag && (this.broadcastRender(), i.$invalidateRenderFlag = !1);
                    for (var a = 0; n > a; a++) r[a].$render(t, e);
                    i.$requestRenderingFlag = !1;
                }
            }, e.prototype.broadcastEnterFrame = function() {
                var e = t.DisplayObject.$enterFrameCallBackList, i = e.length;
                if (0 != i) {
                    e = e.concat();
                    for (var r = 0; i > r; r++) e[r].dispatchEventWith(t.Event.ENTER_FRAME);
                }
            }, e.prototype.broadcastRender = function() {
                var e = t.DisplayObject.$renderCallBackList, i = e.length;
                if (0 != i) {
                    e = e.concat();
                    for (var r = 0; i > r; r++) e[r].dispatchEventWith(t.Event.RENDER);
                }
            }, e.prototype.callLaters = function() {
                var e, i, r;
                if (t.$callLaterFunctionList.length > 0 && (e = t.$callLaterFunctionList, t.$callLaterFunctionList = [], 
                i = t.$callLaterThisList, t.$callLaterThisList = [], r = t.$callLaterArgsList, t.$callLaterArgsList = []), 
                e) for (var n = e.length, a = 0; n > a; a++) {
                    var o = e[a];
                    null != o && o.apply(i[a], r[a]);
                }
            }, e.prototype.callLaterAsyncs = function() {
                if (t.$callAsyncFunctionList.length > 0) {
                    var e = t.$callAsyncFunctionList, i = t.$callAsyncThisList, r = t.$callAsyncArgsList;
                    t.$callAsyncFunctionList = [], t.$callAsyncThisList = [], t.$callAsyncArgsList = [];
                    for (var n = 0; n < e.length; n++) {
                        var a = e[n];
                        null != a && a.apply(i[n], r[n]);
                    }
                }
            }, e;
        }();
        i.SystemTicker = r, e(r.prototype, "egret.sys.SystemTicker");
    }(t.sys || (t.sys = {}));
}(p || (p = {})), function(t) {
    !function(i) {
        i.contexts = [];
        var r = !0, n = function() {
            function e() {}
            return e.prototype.pause = function() {
                r && (r = !1, i.stage.dispatchEvent(new t.Event(t.Event.DEACTIVATE)), i.onPause && i.onPause());
            }, e.prototype.resume = function() {
                r || (r = !0, i.stage.dispatchEvent(new t.Event(t.Event.ACTIVATE)), i.onResume && i.onResume());
            }, e;
        }();
        i.LifecycleContext = n, e(n.prototype, "egret.lifecycle.LifecycleContext"), i.addLifecycleListener = function(t) {
            var e = new n();
            i.contexts.push(e), t(e);
        };
    }(t.lifecycle || (t.lifecycle = {})), t.ticker = new t.sys.SystemTicker();
}(p || (p = {}));

!function(t) {
    !function(r) {
        var n = function(e) {
            function r(t) {
                var i = e.call(this) || this;
                return i.maxTouches = 0, i.useTouchesCount = 0, i.touchDownTarget = {}, i.lastTouchX = -1, 
                i.lastTouchY = -1, i.stage = t, i;
            }
            return i(r, e), r.prototype.$initMaxTouches = function() {
                this.maxTouches = this.stage.$maxTouches;
            }, r.prototype.onTouchBegin = function(e, i, r) {
                if (!(this.useTouchesCount >= this.maxTouches)) {
                    this.lastTouchX = e, this.lastTouchY = i;
                    var n = this.findTarget(e, i);
                    null == this.touchDownTarget[r] && (this.touchDownTarget[r] = n, this.useTouchesCount++), 
                    t.TouchEvent.dispatchTouchEvent(n, t.TouchEvent.TOUCH_BEGIN, !0, !0, e, i, r, !0);
                }
            }, r.prototype.onTouchMove = function(e, i, r) {
                if (null != this.touchDownTarget[r] && (this.lastTouchX != e || this.lastTouchY != i)) {
                    this.lastTouchX = e, this.lastTouchY = i;
                    var n = this.findTarget(e, i);
                    t.TouchEvent.dispatchTouchEvent(n, t.TouchEvent.TOUCH_MOVE, !0, !0, e, i, r, !0);
                }
            }, r.prototype.onTouchEnd = function(e, i, r) {
                if (null != this.touchDownTarget[r]) {
                    var n = this.findTarget(e, i), a = this.touchDownTarget[r];
                    delete this.touchDownTarget[r], this.useTouchesCount--, t.TouchEvent.dispatchTouchEvent(n, t.TouchEvent.TOUCH_END, !0, !0, e, i, r, !1), 
                    a == n ? t.TouchEvent.dispatchTouchEvent(n, t.TouchEvent.TOUCH_TAP, !0, !0, e, i, r, !1) : t.TouchEvent.dispatchTouchEvent(a, t.TouchEvent.TOUCH_RELEASE_OUTSIDE, !0, !0, e, i, r, !1);
                }
            }, r.prototype.findTarget = function(t, e) {
                var i = this.stage.$hitTest(t, e);
                return i || (i = this.stage), i;
            }, r;
        }(t.HashObject);
        r.TouchHandler = n, e(n.prototype, "egret.sys.TouchHandler");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(r) {
        var n = function(e) {
            function r() {
                var t = e.call(this) || this;
                return t.image = null, t.smoothing = !0, t.blendMode = null, t.alpha = NaN, t.filter = null, 
                t.rotated = !1, t.type = 1, t;
            }
            return i(r, e), r.prototype.drawImage = function(t, e, i, r, n, a, o, s) {
                this.drawData.push(t, e, i, r, n, a, o, s), this.renderCount++;
            }, r.prototype.cleanBeforeRender = function() {
                e.prototype.cleanBeforeRender.call(this), this.image = null, this.matrix = null, 
                this.blendMode = null, this.alpha = NaN, this.filter = null;
            }, r.$updateTextureData = function(e, i, n, a, o, s, h, c, l, u, p, d, f, $, y, g) {
                if (i) {
                    var v = t.$TextureScaleFactor;
                    if (e.smoothing = g, e.image = i, e.imageWidth = f, e.imageHeight = $, y == t.BitmapFillMode.SCALE) {
                        var b = p / l * v, m = d / u * v;
                        e.drawImage(n, a, o, s, b * h, m * c, b * o, m * s);
                    } else if (y == t.BitmapFillMode.CLIP) {
                        var x = Math.min(l, p), T = Math.min(u, d), D = o * v, O = s * v;
                        r.drawClipImage(e, v, n, a, D, O, h, c, x, T);
                    } else for (var D = o * v, O = s * v, w = 0; p > w; w += l) for (var E = 0; d > E; E += u) {
                        var x = Math.min(p - w, l), T = Math.min(d - E, u);
                        r.drawClipImage(e, v, n, a, D, O, h, c, x, T, w, E);
                    }
                }
            }, r.$updateTextureDataWithScale9Grid = function(e, i, r, n, a, o, s, h, c, l, u, p, d, f, $, y) {
                e.smoothing = y, e.image = i, e.imageWidth = f, e.imageHeight = $;
                var g = o, v = s;
                p -= l - o * t.$TextureScaleFactor, d -= u - s * t.$TextureScaleFactor;
                var b = r.x - h, m = r.y - c, x = b / t.$TextureScaleFactor, T = m / t.$TextureScaleFactor, D = r.width / t.$TextureScaleFactor, O = r.height / t.$TextureScaleFactor;
                0 == O && (O = 1, T >= v && T--), 0 == D && (D = 1, x >= g && x--);
                var w = n, E = w + x, S = E + D, R = g - x - D, F = a, P = F + T, C = P + O, _ = v - T - O, M = R * t.$TextureScaleFactor, N = _ * t.$TextureScaleFactor;
                if ((x + R) * t.$TextureScaleFactor > p || (T + _) * t.$TextureScaleFactor > d) e.drawImage(n, a, o, s, h, c, p, d); else {
                    var j = h, A = j + b, B = j + (p - M), k = p - b - M, L = c, I = L + m, U = L + d - N, X = d - m - N;
                    T > 0 && (x > 0 && e.drawImage(w, F, x, T, j, L, b, m), D > 0 && e.drawImage(E, F, D, T, A, L, k, m), 
                    R > 0 && e.drawImage(S, F, R, T, B, L, M, m)), O > 0 && (x > 0 && e.drawImage(w, P, x, O, j, I, b, X), 
                    D > 0 && e.drawImage(E, P, D, O, A, I, k, X), R > 0 && e.drawImage(S, P, R, O, B, I, M, X)), 
                    _ > 0 && (x > 0 && e.drawImage(w, C, x, _, j, U, b, N), D > 0 && e.drawImage(E, C, D, _, A, U, k, N), 
                    R > 0 && e.drawImage(S, C, R, _, B, U, M, N));
                }
            }, r.drawClipImage = function(t, e, i, r, n, a, o, s, h, c, l, u) {
                void 0 === l && (l = 0), void 0 === u && (u = 0);
                var p = o + n - h;
                p > 0 && (n -= p), (p = s + a - c) > 0 && (a -= p), t.drawImage(i, r, n / e, a / e, l + o, u + s, n, a);
            }, r;
        }(r.RenderNode);
        r.BitmapNode = n, e(n.prototype, "egret.sys.BitmapNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(r) {
        var n = [ "none", "round", "square" ], a = [ "bevel", "miter", "round" ], o = function(e) {
            function o() {
                var t = e.call(this) || this;
                return t.dirtyRender = !0, t.type = 3, t;
            }
            return i(o, e), o.prototype.beginFill = function(t, e, i) {
                void 0 === e && (e = 1);
                var n = new r.FillPath();
                if (n.fillColor = t, n.fillAlpha = e, i) {
                    var a = this.drawData.lastIndexOf(i);
                    this.drawData.splice(a, 0, n);
                } else this.drawData.push(n);
                return this.renderCount++, n;
            }, o.prototype.beginGradientFill = function(e, i, n, a, o, s) {
                var h = new t.Matrix();
                o ? (h.a = 819.2 * o.a, h.b = 819.2 * o.b, h.c = 819.2 * o.c, h.d = 819.2 * o.d, 
                h.tx = o.tx, h.ty = o.ty) : (h.a = 100, h.d = 100);
                var c = new r.GradientFillPath();
                if (c.gradientType = e, c.colors = i, c.alphas = n, c.ratios = a, c.matrix = h, 
                s) {
                    var l = this.drawData.lastIndexOf(s);
                    this.drawData.splice(l, 0, c);
                } else this.drawData.push(c);
                return this.renderCount++, c;
            }, o.prototype.lineStyle = function(e, i, o, s, h, c, l) {
                void 0 === o && (o = 1), void 0 === c && (c = 3), void 0 === l && (l = []), -1 == n.indexOf(s) && (s = "round"), 
                -1 == a.indexOf(h) && (h = "round");
                var u = new r.StrokePath();
                return u.lineWidth = e, u.lineColor = i, u.lineAlpha = o, u.caps = s || t.CapsStyle.ROUND, 
                u.joints = h, u.miterLimit = c, u.lineDash = l, this.drawData.push(u), this.renderCount++, 
                u;
            }, o.prototype.clear = function() {
                this.drawData.length = 0, this.dirtyRender = !0, this.renderCount = 0;
            }, o.prototype.cleanBeforeRender = function() {}, o.prototype.clean = function() {
                this.$texture && (t.WebGLUtils.deleteWebGLTexture(this.$texture), this.$texture = null, 
                this.dirtyRender = !0);
            }, o;
        }(r.RenderNode);
        r.GraphicsNode = o, e(o.prototype, "egret.sys.GraphicsNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(t) {
        var r = function(t) {
            function e() {
                var e = t.call(this) || this;
                return e.type = 4, e;
            }
            return i(e, t), e.prototype.addNode = function(t) {
                this.drawData.push(t);
            }, e.prototype.cleanBeforeRender = function() {
                for (var t = this.drawData, e = t.length - 1; e >= 0; e--) t[e].cleanBeforeRender();
            }, e.prototype.$getRenderCount = function() {
                for (var t = 0, e = this.drawData, i = e.length - 1; i >= 0; i--) t += e[i].$getRenderCount();
                return t;
            }, e;
        }(t.RenderNode);
        t.GroupNode = r, e(r.prototype, "egret.sys.GroupNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(r) {
        var n = function(e) {
            function r() {
                var i = e.call(this) || this;
                return i.image = null, i.smoothing = !0, i.bounds = new t.Rectangle(), i.blendMode = null, 
                i.alpha = NaN, i.filter = null, i.rotated = !1, i.type = 5, i.vertices = [], i.uvs = [], 
                i.indices = [], i;
            }
            return i(r, e), r.prototype.drawMesh = function(t, e, i, r, n, a, o, s) {
                this.drawData.push(t, e, i, r, n, a, o, s), this.renderCount++;
            }, r.prototype.cleanBeforeRender = function() {
                e.prototype.cleanBeforeRender.call(this), this.image = null, this.matrix = null;
            }, r;
        }(r.RenderNode);
        r.MeshNode = n, e(n.prototype, "egret.sys.MeshNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(t) {
        var r = function(t) {
            function e() {
                var e = t.call(this) || this;
                return e.image = null, e.smoothing = !0, e.rotated = !1, e.type = 6, e;
            }
            return i(e, t), e.prototype.drawImage = function(t, e, i, r, n, a, o, s) {
                var h = this;
                h.sourceX = t, h.sourceY = e, h.sourceW = i, h.sourceH = r, h.drawX = n, h.drawY = a, 
                h.drawW = o, h.drawH = s, h.renderCount = 1;
            }, e.prototype.cleanBeforeRender = function() {
                t.prototype.cleanBeforeRender.call(this), this.image = null;
            }, e;
        }(t.RenderNode);
        t.NormalBitmapNode = r, e(r.prototype, "egret.sys.NormalBitmapNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

(p || (p = {})).OrientationMode = {
    AUTO: "auto",
    PORTRAIT: "portrait",
    LANDSCAPE: "landscape",
    LANDSCAPE_FLIPPED: "landscapeFlipped"
};

!function(t) {
    !function(r) {
        var n = function(e) {
            function r() {
                var t = e.call(this) || this;
                return t.textColor = 16777215, t.strokeColor = 0, t.size = 30, t.stroke = 0, t.bold = !1, 
                t.italic = !1, t.fontFamily = "Arial", t.dirtyRender = !0, t.type = 2, t;
            }
            return i(r, e), r.prototype.drawText = function(t, e, i, r) {
                this.drawData.push(t, e, i, r), this.renderCount++, this.dirtyRender = !0;
            }, r.prototype.clean = function() {
                this.$texture && (t.WebGLUtils.deleteWebGLTexture(this.$texture), this.$texture = null, 
                this.dirtyRender = !0);
            }, r.prototype.cleanBeforeRender = function() {
                e.prototype.cleanBeforeRender.call(this), this.dirtyRender = !0;
            }, r;
        }(r.RenderNode);
        r.TextNode = n, e(n.prototype, "egret.sys.TextNode");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(t) {
        var r = function(t) {
            function e() {
                var e = t.call(this) || this;
                return e.type = 1, e;
            }
            return i(e, t), e;
        }(t.Path2D);
        t.FillPath = r, e(r.prototype, "egret.sys.FillPath");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    !function(t) {
        var r = function(t) {
            function e() {
                var e = t.call(this) || this;
                return e.type = 2, e;
            }
            return i(e, t), e;
        }(t.Path2D);
        t.GradientFillPath = r, e(r.prototype, "egret.sys.GradientFillPath");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            i.$renderBuffer = new t.sys.RenderBuffer();
            var r = new t.BitmapData(i.$renderBuffer.surface);
            return r.$deleteSource = !1, i._setBitmapData(r), i;
        }
        return i(r, e), r.prototype.drawToTexture = function(e, i, r) {
            if (void 0 === r && (r = 1), i && (0 == i.width || 0 == i.height)) return !1;
            var n = i || e.$getOriginalBounds();
            if (0 == n.width || 0 == n.height) return !1;
            r /= t.$TextureScaleFactor;
            var a = (n.x + n.width) * r, o = (n.y + n.height) * r;
            i && (a = n.width * r, o = n.height * r);
            var s = this.$renderBuffer;
            if (!s) return !1;
            if (s.resize(a, o), this.$bitmapData.width = a, this.$bitmapData.height = o, t.nativeRender) {
                egret_native.activateBuffer(this.$renderBuffer);
                var h = !1, c = 0, l = 0, u = 0, p = 0;
                i && (h = !0, c = i.x, l = i.y, u = i.width, p = i.height), egret_native.updateNativeRender(), 
                egret_native.nrRenderDisplayObject(e.$nativeDisplayObject.id, r, h, c, l, u, p), 
                egret_native.activateBuffer(null);
            } else {
                var d = t.Matrix.create();
                d.identity(), d.scale(r, r), i && d.translate(-i.x, -i.y), t.sys.systemRenderer.render(e, s, d, !0), 
                t.Matrix.release(d);
            }
            return this.$initData(0, 0, a, o, 0, 0, a, o, a, o), !0;
        }, r.prototype.getPixel32 = function(e, i) {
            var r;
            if (this.$renderBuffer) {
                var n = t.$TextureScaleFactor;
                e = Math.round(e / n), i = Math.round(i / n), r = this.$renderBuffer.getPixels(e, i, 1, 1);
            }
            return r;
        }, r.prototype.dispose = function() {
            e.prototype.dispose.call(this), this.$renderBuffer = null;
        }, r;
    }(t.Texture);
    t.RenderTexture = r, e(r.prototype, "egret.RenderTexture");
}(p || (p = {}));

!function(t) {
    !function(t) {
        var r = function(t) {
            function e() {
                var e = t.call(this) || this;
                return e.type = 3, e;
            }
            return i(e, t), e;
        }(t.Path2D);
        t.StrokePath = r, e(r.prototype, "egret.sys.StrokePath");
    }(t.sys || (t.sys = {}));
}(p || (p = {}));

!function(i) {
    function r(t, e) {
        var i = null == e.italic ? t.italic : e.italic, r = null == e.bold ? t.bold : e.bold, n = null == e.size ? t.size : e.size, a = e.fontFamily || t.fontFamily, o = i ? "italic " : "normal ";
        return o += r ? "bold " : "normal ", o += n + "px " + a;
    }
    function n(t, e) {
        return "rgba(" + (t >> 16) + "," + (t >> 8 & 255) + "," + (255 & t) + "," + e + ")";
    }
    function a(t, e, r, a, o, s) {
        var h;
        h = e == i.GradientType.LINEAR ? t.createLinearGradient(-1, 0, 1, 0) : t.createRadialGradient(0, 0, 0, 0, 0, 1);
        for (var c = r.length, l = 0; c > l; l++) h.addColorStop(o[l] / 255, n(r[l], a[l]));
        return h;
    }
    function o(t, e, i) {
        void 0 === i && (i = 0);
        for (var r = 0, n = e.length; n > r; r++) t[r + i] = e[r];
    }
    function s(t, e, i, r) {
        for (var n = r[0], a = r[1], o = r[2], s = r[3], h = r[4], c = r[5], l = r[6], u = r[7], p = r[8], d = r[9], f = r[10], $ = r[11], y = r[12], g = r[13], v = r[14], b = r[15], m = r[16], x = r[17], T = r[18], D = r[19], O = 0, w = e * i * 4; w > O; O += 4) {
            var E = t[O + 0], S = t[O + 1], R = t[O + 2], F = t[O + 3];
            t[O + 0] = n * E + a * S + o * R + s * F + h, t[O + 1] = c * E + l * S + u * R + p * F + d, 
            t[O + 2] = f * E + $ * S + y * R + g * F + v, t[O + 3] = b * E + m * S + x * R + T * F + D;
        }
    }
    function h(t, e, i, r, n) {
        c(t, e, i, r), l(t, e, i, n);
    }
    function c(t, e, i, r) {
        var n;
        n = w ? new Uint8ClampedArray(4 * e) : new Array(4 * e);
        for (var a = 4 * e, s = 2 * r + 1, h = 0; i > h; h++) {
            for (var c = h * a, l = 0, u = 0, p = 0, d = 0, f = 0, $ = 0, y = 4 * -r, g = 4 * r + 4; g > y; y += 4) {
                var v = c + y;
                c > v || v >= c + a || (f = t[v + 3], l += t[v + 0] * f, u += t[v + 1] * f, p += t[v + 2] * f, 
                d += f);
            }
            for (var g = c + a, b = 0, m = (y = c) - 4 * r, x = y + 4 * (r + 1); g > y; y += 4, 
            b += 4, x += 4, m += 4) 0 === d ? (n[b + 0] = 0, n[b + 1] = 0, n[b + 2] = 0, n[b + 3] = 0) : (n[b + 0] = l / d, 
            n[b + 1] = u / d, n[b + 2] = p / d, n[b + 3] = d / s), f = t[x + 3], $ = t[m + 3], 
            f || 0 == f ? $ || 0 == $ ? (l += t[x + 0] * f - t[m + 0] * $, u += t[x + 1] * f - t[m + 1] * $, 
            p += t[x + 2] * f - t[m + 2] * $, d += f - $) : (l += t[x + 0] * f, u += t[x + 1] * f, 
            p += t[x + 2] * f, d += f) : ($ || 0 == $) && (l += -t[m + 0] * $, u += -t[m + 1] * $, 
            p += -t[m + 2] * $, d += -$);
            w ? t.set(n, c) : o(t, n, c);
        }
    }
    function l(t, e, i, r) {
        var n;
        n = w ? new Uint8ClampedArray(4 * i) : new Array(4 * i);
        for (var a = 4 * e, o = 2 * r + 1, s = 0; e > s; s++) {
            for (var h = 4 * s, c = 0, l = 0, u = 0, p = 0, d = 0, f = 0, $ = -r * a, y = r * a + a; y > $; $ += a) {
                var g = h + $;
                h > g || g >= h + i * a || (d = t[g + 3], c += t[g + 0] * d, l += t[g + 1] * d, 
                u += t[g + 2] * d, p += d);
            }
            for (var $ = h, y = h + i * a, v = 0, b = h - r * a, m = h + (r + 1) * a; y > $; $ += a, 
            v += 4, m += a, b += a) 0 === p ? (n[v + 0] = 0, n[v + 1] = 0, n[v + 2] = 0, n[v + 3] = 0) : (n[v + 0] = c / p, 
            n[v + 1] = l / p, n[v + 2] = u / p, n[v + 3] = p / o), d = t[m + 3], f = t[b + 3], 
            d || 0 == d ? f || 0 == f ? (c += t[m + 0] * d - t[b + 0] * f, l += t[m + 1] * d - t[b + 1] * f, 
            u += t[m + 2] * d - t[b + 2] * f, p += d - f) : (c += t[m + 0] * d, l += t[m + 1] * d, 
            u += t[m + 2] * d, p += d) : (f || 0 == f) && (c += -t[b + 0] * f, l += -t[b + 1] * f, 
            u += -t[b + 2] * f, p += -f);
            for (var x = 4 * s, y = x + i * a, T = 0; y > x; x += a, T += 4) t[x + 0] = n[T + 0], 
            t[x + 1] = n[T + 1], t[x + 2] = n[T + 2], t[x + 3] = n[T + 3];
        }
    }
    function u(t, e, i, r, n, a, s, c, l) {
        var u = p(t, r);
        d(u, e, i, s, c), h(u, e, i, n, a), f(u, l), $(u, t), t.set(u), w ? t.set(u) : o(t, u);
    }
    function p(t, e) {
        e || (e = [ 0, 0, 0, 0 ]);
        var i;
        w ? i = new Uint8ClampedArray(t) : (i = new Array(t.length), o(i, t));
        for (var r = e[0], n = e[1], a = e[2], s = e[3], h = 0, c = i.length; c > h; h += 4) {
            var l = i[h + 3];
            i[h + 0] = r * l, i[h + 1] = n * l, i[h + 2] = a * l, i[h + 3] = s * l;
        }
        return i;
    }
    function d(t, e, i, r, n) {
        var a, s, h = Math.sin(r) * n | 0, c = Math.cos(r) * n | 0;
        if (w) {
            a = new Int32Array(t.buffer), s = new Int32Array(a.length);
            for (l = 0; i > l; l++) if (!(0 > (u = l + h) || u > i)) for (p = 0; e > p; p++) 0 > (d = p + c) || d > e || (s[u * e + d] = a[l * e + p]);
            a.set(s);
        } else {
            a = t, s = new Array(a.length);
            for (var l = 0; i > l; l++) {
                var u = l + h;
                if (!(0 > u || u > i)) for (var p = 0; e > p; p++) {
                    var d = p + c;
                    0 > d || d > e || (s[4 * (u * e + d) + 0] = a[4 * (l * e + p) + 0], s[4 * (u * e + d) + 1] = a[4 * (l * e + p) + 1], 
                    s[4 * (u * e + d) + 2] = a[4 * (l * e + p) + 2], s[4 * (u * e + d) + 3] = a[4 * (l * e + p) + 3]);
                }
            }
            o(a, s);
        }
    }
    function f(t, e) {
        for (var i = 0, r = t.length; r > i; i += 4) t[i + 3] *= e;
    }
    function $(t, e) {
        for (var i = 0, r = t.length; r > i; i += 4) {
            var n = t[i + 0], a = t[i + 1], o = t[i + 2], s = t[i + 3] / 255, h = e[i + 0], c = e[i + 1], l = e[i + 2], u = e[i + 3] / 255;
            t[i + 0] = h + n * (1 - u), t[i + 1] = c + a * (1 - u), t[i + 2] = l + o * (1 - u), 
            t[i + 3] = 255 * (u + s * (1 - u));
        }
    }
    function y(t, e, i) {
        return t * (1 - i) + e * i;
    }
    function g(t, e, i, r, n, a, s, h, c, l, u, p) {
        var d;
        d = w ? new Uint8ClampedArray(t.length) : new Array(t.length);
        for (var f, $, g = r[3], v = 0, b = 0, m = h * Math.cos(s), x = h * Math.sin(s), T = 3.141592653589793, D = n / 7, O = a / 7, E = 0; e > E; E++) for (var S = 0; i > S; S++) {
            for (var R = S * e * 4 + 4 * E, F = 0, P = 0, C = t[R + 0] / 255, _ = t[R + 1] / 255, M = t[R + 2] / 255, N = t[R + 3] / 255, j = 0; 2 * T >= j; j += 2 * T / 12) {
                f = Math.cos(j + 0), $ = Math.sin(j + 0);
                for (var A = 0; 7 > A; A++) {
                    v = A * D * f, b = A * O * $;
                    var B = Math.round(E + v - m), k = Math.round(S + b - x);
                    F += (7 - A) * (B >= e || 0 > B || 0 > k || k >= i ? 0 : t[k * e * 4 + 4 * B + 3] / 255), 
                    P += 7 - A;
                }
            }
            N = Math.max(N, 1e-4);
            var L = F / P * c * g * (1 - l) * Math.max(Math.min(p, u), 1 - N), I = (P - F) / P * c * g * l * N, U = I / (I + (N = Math.max(N * u * (1 - p), 1e-4))), X = y(C, r[0], U), H = y(_, r[1], U), Y = y(M, r[2], U), W = L / (I + N + L), G = y(X, r[0], W), z = y(H, r[1], W), V = y(Y, r[2], W), q = Math.min(N + L + I, 1);
            d[R + 0] = 255 * G, d[R + 1] = 255 * z, d[R + 2] = 255 * V, d[R + 3] = 255 * q;
        }
        w ? t.set(d) : o(t, d);
    }
    var v = [ "source-over", "lighter", "destination-out" ], b = "source-over", m = "#000000", x = {
        none: "butt",
        square: "square",
        round: "round"
    }, T = [], D = [], O = function() {
        function t() {
            this.nestLevel = 0, this.renderingMask = !1;
        }
        return t.prototype.render = function(t, e, r, n) {
            this.nestLevel++;
            var a = e.context;
            a.transform(r.a, r.b, r.c, r.d, 0, 0);
            var o = this.drawDisplayObject(t, a, r.tx, r.ty, !0), s = i.Matrix.create();
            if (r.$invertInto(s), a.transform(s.a, s.b, s.c, s.d, 0, 0), i.Matrix.release(s), 
            0 === --this.nestLevel) {
                T.length > 6 && (T.length = 6);
                for (var h = T.length, c = 0; h > c; c++) T[c].resize(0, 0);
            }
            return o;
        }, t.prototype.drawDisplayObject = function(t, e, r, n, a) {
            var o, s = 0, h = t.$displayList;
            if (h && !a ? ((t.$cacheDirty || t.$renderDirty || h.$canvasScaleX != i.sys.DisplayList.$canvasScaleX || h.$canvasScaleY != i.sys.DisplayList.$canvasScaleY) && (s += h.drawToSurface()), 
            o = h.$renderNode) : o = t.$renderDirty ? t.$getRenderNode() : t.$renderNode, t.$cacheDirty = !1, 
            o) {
                switch (s++, e.$offsetX = r, e.$offsetY = n, o.type) {
                  case 1:
                    this.renderBitmap(o, e);
                    break;

                  case 2:
                    this.renderText(o, e);
                    break;

                  case 3:
                    this.renderGraphics(o, e);
                    break;

                  case 4:
                    this.renderGroup(o, e);
                    break;

                  case 5:
                    this.renderMesh(o, e);
                    break;

                  case 6:
                    this.renderNormalBitmap(o, e);
                }
                e.$offsetX = 0, e.$offsetY = 0;
            }
            if (h && !a) return s;
            var c = t.$children;
            if (c) for (var l = c.length, u = 0; l > u; u++) {
                var p = c[u], d = void 0, f = void 0;
                if (p.$useTranslate) {
                    var $ = p.$getMatrix();
                    d = r + p.$x, f = n + p.$y, e.save(), e.transform($.a, $.b, $.c, $.d, d, f), d = -p.$anchorOffsetX, 
                    f = -p.$anchorOffsetY;
                } else d = r + p.$x - p.$anchorOffsetX, f = n + p.$y - p.$anchorOffsetY;
                var y = void 0;
                switch (1 != p.$alpha && (y = e.globalAlpha, e.globalAlpha *= p.$alpha), p.$renderMode) {
                  case 1:
                    break;

                  case 2:
                    s += this.drawWithFilter(p, e, d, f);
                    break;

                  case 3:
                    s += this.drawWithClip(p, e, d, f);
                    break;

                  case 4:
                    s += this.drawWithScrollRect(p, e, d, f);
                    break;

                  default:
                    s += this.drawDisplayObject(p, e, d, f);
                }
                p.$useTranslate ? e.restore() : y && (e.globalAlpha = y);
            }
            return s;
        }, t.prototype.drawWithFilter = function(t, e, i, r) {
            if (t.$children && 0 == t.$children.length && (!t.$renderNode || 0 == t.$renderNode.$getRenderCount())) return 0;
            var n, a = 0, o = t.$filters, c = o.length, l = 0 !== t.$blendMode;
            l && ((n = v[t.$blendMode]) || (n = b));
            var p = t.$getOriginalBounds(), d = p.x, f = p.y, $ = p.width, y = p.height;
            if (0 >= $ || 0 >= y) return a;
            var m = this.createRenderBuffer($ - d, y - f, !0), x = m.context;
            if ((a += t.$mask ? this.drawWithClip(t, x, -d, -f) : t.$scrollRect || t.$maskRect ? this.drawWithScrollRect(t, x, -d, -f) : this.drawDisplayObject(t, x, -d, -f)) > 0) {
                l && (e.globalCompositeOperation = n), a++;
                for (var T = x.getImageData(0, 0, m.surface.width, m.surface.height), O = 0; c > O; O++) {
                    var w = o[O];
                    if ("colorTransform" == w.type) s(T.data, m.surface.width, m.surface.height, w.$matrix); else if ("blur" == w.type) h(T.data, m.surface.width, m.surface.height, w.$blurX, w.$blurY); else if ("glow" == w.type) {
                        var E = w.$red, S = w.$green, R = w.$blue, F = w.$alpha;
                        w.$inner || w.$knockout || w.$hideObject ? g(T.data, m.surface.width, m.surface.height, [ E / 255, S / 255, R / 255, F ], w.$blurX, w.$blurY, w.$angle ? w.$angle / 180 * Math.PI : 0, w.$distance || 0, w.$strength, w.$inner ? 1 : 0, w.$knockout ? 0 : 1, w.$hideObject ? 1 : 0) : u(T.data, m.surface.width, m.surface.height, [ E / 255, S / 255, R / 255, F ], w.$blurX, w.$blurY, w.$angle ? w.$angle / 180 * Math.PI : 0, w.$distance || 0, w.$strength);
                    } else w.type;
                }
                x.putImageData(T, 0, 0), e.drawImage(m.surface, i + d, r + f), l && (e.globalCompositeOperation = b);
            }
            return D.push(m), a;
        }, t.prototype.drawWithClip = function(t, e, r, n) {
            var a, o = 0, s = 0 !== t.$blendMode;
            s && ((a = v[t.$blendMode]) || (a = b));
            var h = t.$scrollRect ? t.$scrollRect : t.$maskRect, c = t.$mask;
            if (c) {
                var l = c.$getMatrix();
                if (0 == l.a && 0 == l.b || 0 == l.c && 0 == l.d) return o;
            }
            if (!(c || t.$children && 0 != t.$children.length)) return h && (e.save(), e.beginPath(), 
            e.rect(h.x + r, h.y + n, h.width, h.height), e.clip()), s && (e.globalCompositeOperation = a), 
            o += this.drawDisplayObject(t, e, r, n), s && (e.globalCompositeOperation = b), 
            h && e.restore(), o;
            if (c) {
                x = c.$getRenderNode();
                if ((!c.$children || 0 == c.$children.length) && x && 3 == x.type && 1 == x.drawData.length && 1 == x.drawData[0].type && 1 == x.drawData[0].fillAlpha) {
                    this.renderingMask = !0, e.save(), (D = i.Matrix.create()).copyFrom(c.$getConcatenatedMatrix()), 
                    c.$getConcatenatedMatrixAt(t, D), e.transform(D.a, D.b, D.c, D.d, D.tx, D.ty);
                    var u = this.drawDisplayObject(c, e, r, n);
                    return this.renderingMask = !1, D.$invertInto(D), e.transform(D.a, D.b, D.c, D.d, D.tx, D.ty), 
                    i.Matrix.release(D), h && (e.beginPath(), e.rect(h.x + r, h.y + n, h.width, h.height), 
                    e.clip()), u += this.drawDisplayObject(t, e, r, n), e.restore(), u;
                }
            }
            var p = t.$getOriginalBounds(), d = p.x, f = p.y, $ = p.width, y = p.height, g = this.createRenderBuffer($, y), m = g.context;
            if (!m) return o += this.drawDisplayObject(t, e, r, n);
            if (o += this.drawDisplayObject(t, m, -d, -f), c) {
                var x = c.$getRenderNode(), D = i.Matrix.create();
                if (D.copyFrom(c.$getConcatenatedMatrix()), c.$getConcatenatedMatrixAt(t, D), D.translate(-d, -f), 
                x && 1 == x.$getRenderCount() || c.$displayList) m.globalCompositeOperation = "destination-in", 
                m.save(), m.setTransform(D.a, D.b, D.c, D.d, D.tx, D.ty), o += this.drawDisplayObject(c, m, 0, 0), 
                m.restore(); else {
                    var O = this.createRenderBuffer($, y), w = O.context;
                    w.setTransform(D.a, D.b, D.c, D.d, D.tx, D.ty), o += this.drawDisplayObject(c, w, 0, 0), 
                    m.globalCompositeOperation = "destination-in", m.drawImage(O.surface, 0, 0), T.push(O);
                }
                i.Matrix.release(D);
            }
            return o > 0 && (o++, s && (e.globalCompositeOperation = a), h && (e.save(), e.beginPath(), 
            e.rect(h.x + r, h.y + n, h.width, h.height), e.clip()), e.drawImage(g.surface, r + d, n + f), 
            h && e.restore(), s && (e.globalCompositeOperation = b)), T.push(g), o;
        }, t.prototype.drawWithScrollRect = function(t, e, i, r) {
            var n = 0, a = t.$scrollRect ? t.$scrollRect : t.$maskRect;
            return a.isEmpty() ? n : (t.$scrollRect && (i -= a.x, r -= a.y), e.save(), e.beginPath(), 
            e.rect(a.x + i, a.y + r, a.width, a.height), e.clip(), n += this.drawDisplayObject(t, e, i, r), 
            e.restore(), n);
        }, t.prototype.drawNodeToBuffer = function(t, e, i, r) {
            var n = e.context;
            n.setTransform(i.a, i.b, i.c, i.d, i.tx, i.ty), this.renderNode(t, n, r);
        }, t.prototype.drawDisplayToBuffer = function(t, e, i) {
            var r = e.context;
            i && r.setTransform(i.a, i.b, i.c, i.d, i.tx, i.ty);
            var n, a = 0;
            if (n = t.$renderDirty ? t.$getRenderNode() : t.$renderNode) switch (a++, n.type) {
              case 1:
                this.renderBitmap(n, r);
                break;

              case 2:
                this.renderText(n, r);
                break;

              case 3:
                this.renderGraphics(n, r);
                break;

              case 4:
                this.renderGroup(n, r);
                break;

              case 5:
                this.renderMesh(n, r);
                break;

              case 6:
                this.renderNormalBitmap(n, r);
            }
            var o = t.$children;
            if (o) for (var s = o.length, h = 0; s > h; h++) {
                var c = o[h];
                switch (c.$renderMode) {
                  case 1:
                    break;

                  case 2:
                    a += this.drawWithFilter(c, r, 0, 0);
                    break;

                  case 3:
                    a += this.drawWithClip(c, r, 0, 0);
                    break;

                  case 4:
                    a += this.drawWithScrollRect(c, r, 0, 0);
                    break;

                  default:
                    a += this.drawDisplayObject(c, r, 0, 0);
                }
            }
            return a;
        }, t.prototype.renderNode = function(t, e, i) {
            var r = 0;
            switch (t.type) {
              case 1:
                r = this.renderBitmap(t, e);
                break;

              case 2:
                r = 1, this.renderText(t, e);
                break;

              case 3:
                r = this.renderGraphics(t, e, i);
                break;

              case 4:
                r = this.renderGroup(t, e);
                break;

              case 5:
                r = this.renderMesh(t, e);
                break;

              case 6:
                r += this.renderNormalBitmap(t, e);
            }
            return r;
        }, t.prototype.renderNormalBitmap = function(t, e) {
            var i = t.image;
            if (!i || !i.source) return 0;
            if (e.$imageSmoothingEnabled != t.smoothing && (e.imageSmoothingEnabled = t.smoothing, 
            e.$imageSmoothingEnabled = t.smoothing), t.rotated) {
                var r = t.sourceX, n = t.sourceY, a = t.sourceW, o = t.sourceH, s = t.drawX, h = t.drawY, c = t.drawW, l = t.drawH;
                e.save(), e.transform(0, -1, 1, 0, 0, l), e.drawImage(i.source, r, n, o, a, s + e.$offsetX, h + e.$offsetY, l, c), 
                e.restore();
            } else e.drawImage(i.source, t.sourceX, t.sourceY, t.sourceW, t.sourceH, t.drawX + e.$offsetX, t.drawY + e.$offsetY, t.drawW, t.drawH);
            return 1;
        }, t.prototype.renderBitmap = function(t, e) {
            var i = t.image;
            if (!i || !i.source) return 0;
            e.$imageSmoothingEnabled != t.smoothing && (e.imageSmoothingEnabled = t.smoothing, 
            e.$imageSmoothingEnabled = t.smoothing);
            var r, n, a = t.drawData, o = a.length, h = 0, c = t.matrix, l = t.blendMode, u = t.alpha, p = !1;
            c && (e.save(), p = !0, (0 != e.$offsetX || 0 != e.$offsetY) && (e.translate(e.$offsetX, e.$offsetY), 
            r = e.$offsetX, n = e.$offsetY, e.$offsetX = e.$offsetY = 0), e.transform(c.a, c.b, c.c, c.d, c.tx, c.ty)), 
            l && (e.globalCompositeOperation = v[l]);
            var d;
            u == u && (d = e.globalAlpha, e.globalAlpha *= u);
            var f = 0, $ = t.filter;
            if ($ && 8 == o) {
                var y = a[0], g = a[1], m = a[2], x = a[3], D = a[4], O = a[5], w = a[6], E = a[7];
                t.rotated && (m = a[3], x = a[2], w = a[7], E = a[6]);
                var S = this.createRenderBuffer(w, E), R = S.context;
                f++, t.rotated && e.transform(0, -1, 1, 0, 0, w), R.drawImage(i.source, y, g, m, x, 0, 0, w, E), 
                f++;
                var F = R.getImageData(0, 0, w, E);
                s(F.data, w, E, $.$matrix), R.putImageData(F, 0, 0), e.drawImage(S.surface, 0, 0, w, E, D + e.$offsetX, O + e.$offsetY, w, E), 
                T.push(S);
            } else for (;o > h; ) if (f++, t.rotated) {
                var y = a[h++], g = a[h++], x = a[h++], m = a[h++], P = a[h++], C = a[h++], E = a[h++], w = a[h++];
                e.save(), e.transform(0, -1, 1, 0, 0, w), e.drawImage(i.source, y, g, m, x, P + e.$offsetX, C + e.$offsetY, w, E), 
                e.restore();
            } else e.drawImage(i.source, a[h++], a[h++], a[h++], a[h++], a[h++] + e.$offsetX, a[h++] + e.$offsetY, a[h++], a[h++]);
            return p ? e.restore() : (l && (e.globalCompositeOperation = b), u == u && (e.globalAlpha = d)), 
            r && (e.$offsetX = r), n && (e.$offsetY = n), f;
        }, t.prototype.renderMesh = function(t, e) {
            return 0;
        }, t.prototype.renderText = function(t, e) {
            e.textAlign = "left", e.textBaseline = "middle", e.lineJoin = "round";
            for (var n = t.drawData, a = n.length, o = 0; a > o; ) {
                var s = n[o++], h = n[o++], c = n[o++], l = n[o++];
                e.font = r(t, l);
                var u = null == l.textColor ? t.textColor : l.textColor, p = null == l.strokeColor ? t.strokeColor : l.strokeColor, d = null == l.stroke ? t.stroke : l.stroke;
                e.fillStyle = i.toColorString(u), e.strokeStyle = i.toColorString(p), d && (e.lineWidth = 2 * d, 
                e.strokeText(c, s + e.$offsetX, h + e.$offsetY)), e.fillText(c, s + e.$offsetX, h + e.$offsetY);
            }
        }, t.prototype.renderGraphics = function(t, e, i) {
            var r = t.drawData, o = r.length;
            i = !!i;
            for (var s = 0; o > s; s++) {
                var h = r[s];
                switch (h.type) {
                  case 1:
                    var c = h;
                    e.fillStyle = i ? m : n(c.fillColor, c.fillAlpha), this.renderPath(h, e), this.renderingMask ? e.clip() : e.fill();
                    break;

                  case 2:
                    var l = h;
                    e.fillStyle = i ? m : a(e, l.gradientType, l.colors, l.alphas, l.ratios, l.matrix), 
                    e.save();
                    var u = l.matrix;
                    this.renderPath(h, e), e.transform(u.a, u.b, u.c, u.d, u.tx, u.ty), e.fill(), e.restore();
                    break;

                  case 3:
                    var p = h, d = p.lineWidth;
                    e.lineWidth = d, e.strokeStyle = i ? m : n(p.lineColor, p.lineAlpha), e.lineCap = x[p.caps], 
                    e.lineJoin = p.joints, e.miterLimit = p.miterLimit, e.setLineDash && e.setLineDash(p.lineDash);
                    var f = 1 === d || 3 === d;
                    f && e.translate(.5, .5), this.renderPath(h, e), e.stroke(), f && e.translate(-.5, -.5);
                }
            }
            return 0 == o ? 0 : 1;
        }, t.prototype.renderPath = function(t, e) {
            e.beginPath();
            for (var i = t.$data, r = t.$commands, n = r.length, a = 0, o = 0; n > o; o++) switch (r[o]) {
              case 4:
                e.bezierCurveTo(i[a++] + e.$offsetX, i[a++] + e.$offsetY, i[a++] + e.$offsetX, i[a++] + e.$offsetY, i[a++] + e.$offsetX, i[a++] + e.$offsetY);
                break;

              case 3:
                e.quadraticCurveTo(i[a++] + e.$offsetX, i[a++] + e.$offsetY, i[a++] + e.$offsetX, i[a++] + e.$offsetY);
                break;

              case 2:
                e.lineTo(i[a++] + e.$offsetX, i[a++] + e.$offsetY);
                break;

              case 1:
                e.moveTo(i[a++] + e.$offsetX, i[a++] + e.$offsetY);
            }
        }, t.prototype.renderGroup = function(t, e) {
            var i, r, n = t.matrix, a = !1;
            n && (e.save(), a = !0, (0 != e.$offsetX || 0 != e.$offsetY) && (e.translate(e.$offsetX, e.$offsetY), 
            i = e.$offsetX, r = e.$offsetY, e.$offsetX = e.$offsetY = 0), e.transform(n.a, n.b, n.c, n.d, n.tx, n.ty));
            for (var o = 0, s = t.drawData, h = s.length, c = 0; h > c; c++) {
                var l = s[c];
                o += this.renderNode(l, e);
            }
            return a && e.restore(), i && (e.$offsetX = i), r && (e.$offsetY = r), o;
        }, t.prototype.createRenderBuffer = function(t, e, r) {
            var n = r ? D.pop() : T.pop();
            return n ? n.resize(t, e, !0) : n = new i.sys.CanvasRenderBuffer(t, e), n;
        }, t;
    }();
    i.CanvasRenderer = O, e(O.prototype, "egret.CanvasRenderer"), i.getFontString = r, 
    i.getRGBAString = n;
    var w = !1;
    try {
        w = void 0 !== ("undefined" == typeof Uint8ClampedArray ? "undefined" : t(Uint8ClampedArray));
    } catch (t) {}
}(p || (p = {}));

(p || (p = {})).DeviceOrientation = null;

p || (p = {});

p || (p = {});

!function(t) {
    !function(t) {
        t.WEB = "web", t.NATIVE = "native", t.RUNTIME2 = "runtime2", t.WXGAME = "wxgame";
    }(t.RuntimeType || (t.RuntimeType = {}));
    var i = function() {
        function e() {}
        return e.language = "zh-CN", e.os = "Unknown", e.runtimeType = t.RuntimeType.WEB, 
        e.engineVersion = "5.2.6", e.renderMode = "Unknown", e.boundingClientWidth = 0, 
        e.boundingClientHeight = 0, e;
    }();
    t.Capabilities = i, e(i.prototype, "egret.Capabilities");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            return i.$graphics = new t.Graphics(), i.$graphics.$setTarget(i), i;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(8);
        }, Object.defineProperty(r.prototype, "graphics", {
            get: function() {
                return this.$graphics;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$measureContentBounds = function(t) {
            this.$graphics.$measureContentBounds(t);
        }, r.prototype.$hitTest = function(t, i) {
            var r = e.prototype.$hitTest.call(this, t, i);
            return r == this && (r = this.$graphics.$hitTest(t, i)), r;
        }, r.prototype.$onRemoveFromStage = function() {
            e.prototype.$onRemoveFromStage.call(this), this.$graphics && this.$graphics.$onRemoveFromStage();
        }, r;
    }(t.DisplayObject);
    t.Shape = r, e(r.prototype, "egret.Shape");
}(p || (p = {}));

!function(t) {
    var e = {};
    t.registerImplementation = function(t, i) {
        e[t] = i;
    }, t.getImplementation = function(t) {
        return e[t];
    };
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            return i.$graphics = new t.Graphics(), i.$graphics.$setTarget(i), i;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(9);
        }, Object.defineProperty(r.prototype, "graphics", {
            get: function() {
                return this.$graphics;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$hitTest = function(e, i) {
            if (!this.$visible) return null;
            var r = this.$getInvertedConcatenatedMatrix(), n = r.a * e + r.c * i + r.tx, a = r.b * e + r.d * i + r.ty, o = this.$scrollRect ? this.$scrollRect : this.$maskRect;
            if (o && !o.contains(n, a)) return null;
            if (this.$mask && !this.$mask.$hitTest(e, i)) return null;
            for (var s = this.$children, h = !1, c = null, l = s.length - 1; l >= 0; l--) {
                var u = s[l];
                if (!u.$maskedObject && (c = u.$hitTest(e, i))) {
                    if (h = !0, c.$touchEnabled) break;
                    c = null;
                }
            }
            return c ? this.$touchChildren ? c : this : h ? this : ((c = t.DisplayObject.prototype.$hitTest.call(this, e, i)) && (c = this.$graphics.$hitTest(e, i)), 
            c);
        }, r.prototype.$measureContentBounds = function(t) {
            this.$graphics.$measureContentBounds(t);
        }, r.prototype.$onRemoveFromStage = function() {
            e.prototype.$onRemoveFromStage.call(this), this.$graphics && this.$graphics.$onRemoveFromStage();
        }, r;
    }(t.DisplayObjectContainer);
    t.Sprite = r, e(r.prototype, "egret.Sprite");
}(p || (p = {}));

!function(t) {
    var r = function(t) {
        function e(e, i) {
            var r = t.call(this, e) || this;
            return r.firstCharHeight = 0, "string" == typeof i ? r.charList = r.parseConfig(i) : i && i.hasOwnProperty("frames") ? r.charList = i.frames : r.charList = {}, 
            r;
        }
        return i(e, t), e.prototype.getTexture = function(t) {
            var e = this._textureMap[t];
            if (!e) {
                var i = this.charList[t];
                if (!i) return null;
                e = this.createTexture(t, i.x, i.y, i.w, i.h, i.offX, i.offY, i.sourceW, i.sourceH), 
                this._textureMap[t] = e;
            }
            return e;
        }, e.prototype.getConfig = function(t, e) {
            return this.charList[t] ? this.charList[t][e] : 0;
        }, e.prototype._getFirstCharHeight = function() {
            if (0 == this.firstCharHeight) for (var t in this.charList) {
                var e = this.charList[t];
                if (e) {
                    var i = e.sourceH;
                    if (void 0 === i) {
                        var r = e.h;
                        void 0 === r && (r = 0);
                        var n = e.offY;
                        void 0 === n && (n = 0), i = r + n;
                    }
                    if (0 >= i) continue;
                    this.firstCharHeight = i;
                    break;
                }
            }
            return this.firstCharHeight;
        }, e.prototype.parseConfig = function(t) {
            for (var e = (t = t.split("\r\n").join("\n")).split("\n"), i = this.getConfigByKey(e[3], "count"), r = {}, n = 4; 4 + i > n; n++) {
                var a = e[n], o = {};
                r[String.fromCharCode(this.getConfigByKey(a, "id"))] = o, o.x = this.getConfigByKey(a, "x"), 
                o.y = this.getConfigByKey(a, "y"), o.w = this.getConfigByKey(a, "width"), o.h = this.getConfigByKey(a, "height"), 
                o.offX = this.getConfigByKey(a, "xoffset"), o.offY = this.getConfigByKey(a, "yoffset"), 
                o.xadvance = this.getConfigByKey(a, "xadvance");
            }
            return r;
        }, e.prototype.getConfigByKey = function(t, e) {
            for (var i = t.split(" "), r = 0, n = i.length; n > r; r++) {
                var a = i[r];
                if (e == a.substring(0, e.length)) {
                    var o = a.substring(e.length + 1);
                    return parseInt(o);
                }
            }
            return 0;
        }, e;
    }(t.SpriteSheet);
    t.BitmapFont = r, e(r.prototype, "egret.BitmapFont");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            return i.$smoothing = t.Bitmap.defaultSmoothing, i.$text = "", i.$textFieldWidth = NaN, 
            i.$textLinesChanged = !1, i.$textFieldHeight = NaN, i.$font = null, i.$fontStringChanged = !1, 
            i.$lineSpacing = 0, i.$letterSpacing = 0, i.$textAlign = t.HorizontalAlign.LEFT, 
            i.$verticalAlign = t.VerticalAlign.TOP, i.$textWidth = NaN, i.$textHeight = NaN, 
            i.$textOffsetX = 0, i.$textOffsetY = 0, i.$textStartX = 0, i.$textStartY = 0, i.textLines = [], 
            i.$lineHeights = [], t.nativeRender || (i.$renderNode = new t.sys.BitmapNode()), 
            i;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(11);
        }, Object.defineProperty(r.prototype, "smoothing", {
            get: function() {
                return this.$smoothing;
            },
            set: function(t) {
                var e = this;
                t != e.$smoothing && (e.$smoothing = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "text", {
            get: function() {
                return this.$text;
            },
            set: function(t) {
                this.$setText(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setText = function(t) {
            var e = this;
            return (t = null == t ? "" : String(t)) != e.$text && (e.$text = t, e.$invalidateContentBounds(), 
            !0);
        }, r.prototype.$getWidth = function() {
            var t = this, e = t.$textFieldWidth;
            return isNaN(e) ? t.$getContentBounds().width : e;
        }, r.prototype.$setWidth = function(t) {
            var e = this;
            return !(0 > t || t == e.$textFieldWidth) && (e.$textFieldWidth = t, e.$invalidateContentBounds(), 
            !0);
        }, r.prototype.$invalidateContentBounds = function() {
            this.$renderDirty = !0, this.$textLinesChanged = !0, this.$updateRenderNode();
        }, r.prototype.$getHeight = function() {
            var t = this, e = t.$textFieldHeight;
            return isNaN(e) ? t.$getContentBounds().height : e;
        }, r.prototype.$setHeight = function(t) {
            var e = this;
            return !(0 > t || t == e.$textFieldHeight) && (e.$textFieldHeight = t, e.$invalidateContentBounds(), 
            !0);
        }, Object.defineProperty(r.prototype, "font", {
            get: function() {
                return this.$font;
            },
            set: function(t) {
                this.$setFont(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setFont = function(t) {
            var e = this;
            return e.$font != t && (e.$font = t, e.$fontStringChanged = !0, this.$invalidateContentBounds(), 
            !0);
        }, Object.defineProperty(r.prototype, "lineSpacing", {
            get: function() {
                return this.$lineSpacing;
            },
            set: function(t) {
                this.$setLineSpacing(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setLineSpacing = function(t) {
            var e = this;
            return e.$lineSpacing != t && (e.$lineSpacing = t, e.$invalidateContentBounds(), 
            !0);
        }, Object.defineProperty(r.prototype, "letterSpacing", {
            get: function() {
                return this.$letterSpacing;
            },
            set: function(t) {
                this.$setLetterSpacing(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setLetterSpacing = function(t) {
            var e = this;
            return e.$letterSpacing != t && (e.$letterSpacing = t, e.$invalidateContentBounds(), 
            !0);
        }, Object.defineProperty(r.prototype, "textAlign", {
            get: function() {
                return this.$textAlign;
            },
            set: function(t) {
                this.$setTextAlign(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setTextAlign = function(t) {
            var e = this;
            return e.$textAlign != t && (e.$textAlign = t, e.$invalidateContentBounds(), !0);
        }, Object.defineProperty(r.prototype, "verticalAlign", {
            get: function() {
                return this.$verticalAlign;
            },
            set: function(t) {
                this.$setVerticalAlign(t);
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$setVerticalAlign = function(t) {
            var e = this;
            return e.$verticalAlign != t && (e.$verticalAlign = t, e.$invalidateContentBounds(), 
            !0);
        }, r.prototype.$updateRenderNode = function() {
            var e = this, i = this.$getTextLines(), n = i.length;
            if (0 != n) {
                var a, o = [], s = this.$textLinesWidth, h = e.$font;
                t.nativeRender || (a = this.$renderNode, h.$texture && (a.image = h.$texture.$bitmapData), 
                a.smoothing = e.$smoothing);
                for (var c = h._getFirstCharHeight(), l = Math.ceil(c * r.EMPTY_FACTOR), u = !isNaN(e.$textFieldHeight), p = e.$textWidth, d = e.$textFieldWidth, f = e.$textFieldHeight, $ = e.$textAlign, y = this.$textOffsetY + this.$textStartY, g = this.$lineHeights, v = 0; n > v; v++) {
                    var b = g[v];
                    if (u && v > 0 && y + b > f) break;
                    var m = i[v], x = m.length, T = this.$textOffsetX;
                    if ($ != t.HorizontalAlign.LEFT) {
                        var D = d > p ? d : p;
                        $ == t.HorizontalAlign.RIGHT ? T += D - s[v] : $ == t.HorizontalAlign.CENTER && (T += Math.floor((D - s[v]) / 2));
                    }
                    for (var O = 0; x > O; O++) {
                        var w = m.charAt(O), E = h.getTexture(w);
                        if (E) {
                            var S = E.$bitmapWidth, R = E.$bitmapHeight;
                            t.nativeRender ? o.push(E.$bitmapX, E.$bitmapY, S, R, T + E.$offsetX, y + E.$offsetY, E.$getScaleBitmapWidth(), E.$getScaleBitmapHeight(), E.$sourceWidth, E.$sourceHeight) : (a.imageWidth = E.$sourceWidth, 
                            a.imageHeight = E.$sourceHeight, a.drawImage(E.$bitmapX, E.$bitmapY, S, R, T + E.$offsetX, y + E.$offsetY, E.$getScaleBitmapWidth(), E.$getScaleBitmapHeight())), 
                            T += (h.getConfig(w, "xadvance") || E.$getTextureWidth()) + e.$letterSpacing;
                        } else " " == w ? T += l : t.$warn(1046, w);
                    }
                    y += b + e.$lineSpacing;
                }
                if (t.nativeRender) {
                    e.$nativeDisplayObject.setDataToBitmapNode(e.$nativeDisplayObject.id, h.$texture, o);
                    var F = e.$getContentBounds();
                    e.$nativeDisplayObject.setWidth(F.width), e.$nativeDisplayObject.setHeight(F.height);
                }
            } else t.nativeRender && (e.$nativeDisplayObject.setDataToBitmapNode(e.$nativeDisplayObject.id, e.$font.$texture, []), 
            e.$nativeDisplayObject.setWidth(0), e.$nativeDisplayObject.setHeight(0));
        }, r.prototype.$measureContentBounds = function(t) {
            0 == this.$getTextLines().length ? t.setEmpty() : t.setTo(this.$textOffsetX + this.$textStartX, this.$textOffsetY + this.$textStartY, this.$textWidth - this.$textOffsetX, this.$textHeight - this.$textOffsetY);
        }, Object.defineProperty(r.prototype, "textWidth", {
            get: function() {
                return this.$getTextLines(), this.$textWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "textHeight", {
            get: function() {
                return this.$getTextLines(), this.$textHeight;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.$getTextLines = function() {
            function e(t) {
                return !(b && n.length > 0 && f > b) && (f += c + u, s || h || (l -= p), n.push(t), 
                o.push(c), a.push(l), d = Math.max(l, d), !0);
            }
            var i = this;
            if (!i.$textLinesChanged) return i.textLines;
            var n = [];
            i.textLines = n;
            var a = [];
            i.$textLinesWidth = a, i.$textLinesChanged = !1;
            var o = [];
            if (i.$lineHeights = o, !i.$text || !i.$font) return i.$textWidth = 0, i.$textHeight = 0, 
            n;
            for (var s, h, c, l, u = i.$lineSpacing, p = i.$letterSpacing, d = 0, f = 0, $ = 0, y = 0, g = !isNaN(i.$textFieldWidth), v = i.$textFieldWidth, b = i.$textFieldHeight, m = i.$font, x = m._getFirstCharHeight(), T = Math.ceil(x * r.EMPTY_FACTOR), D = i.$text.split(/(?:\r\n|\r|\n)/), O = D.length, w = !0, E = 0; O > E; E++) {
                var S = D[E], R = S.length;
                c = 0, l = 0, s = !0, h = !1;
                for (var F = 0; R > F; F++) {
                    s || (l += p);
                    var P = S.charAt(F), C = void 0, _ = void 0, M = 0, N = 0, j = m.getTexture(P);
                    if (j) C = j.$getTextureWidth(), _ = j.$getTextureHeight(), M = j.$offsetX, N = j.$offsetY; else {
                        if (" " != P) {
                            t.$warn(1046, P), s && (s = !1);
                            continue;
                        }
                        C = T, _ = x;
                    }
                    if (s && (s = !1, $ = Math.min(M, $)), w && (w = !1, y = Math.min(N, y)), g && F > 0 && l + C > v) {
                        if (!e(S.substring(0, F))) break;
                        R = (S = S.substring(F)).length, l = (F = 0) == R - 1 ? C : m.getConfig(P, "xadvance") || C, 
                        c = _;
                    } else l += F == R - 1 ? C : m.getConfig(P, "xadvance") || C, c = Math.max(_, c);
                }
                if (b && E > 0 && f > b) break;
                if (h = !0, !e(S)) break;
            }
            f -= u, i.$textWidth = d, i.$textHeight = f, this.$textOffsetX = $, this.$textOffsetY = y, 
            this.$textStartX = 0, this.$textStartY = 0;
            var A;
            return v > d && ((A = i.$textAlign) == t.HorizontalAlign.RIGHT ? this.$textStartX = v - d : A == t.HorizontalAlign.CENTER && (this.$textStartX = Math.floor((v - d) / 2))), 
            b > f && ((A = i.$verticalAlign) == t.VerticalAlign.BOTTOM ? this.$textStartY = b - f : A == t.VerticalAlign.MIDDLE && (this.$textStartY = Math.floor((b - f) / 2))), 
            n;
        }, r.EMPTY_FACTOR = .33, r;
    }(t.DisplayObject);
    t.BitmapText = r, e(r.prototype, "egret.BitmapText");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.LEFT = "left", t.RIGHT = "right", t.CENTER = "center", t.JUSTIFY = "justify", 
        t.CONTENT_JUSTIFY = "contentJustify", t;
    }();
    t.HorizontalAlign = i, e(i.prototype, "egret.HorizontalAlign");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function e() {
            this.replaceArr = [], this.resutlArr = [], this.initReplaceArr();
        }
        return e.prototype.initReplaceArr = function() {
            this.replaceArr = [], this.replaceArr.push([ /&lt;/g, "<" ]), this.replaceArr.push([ /&gt;/g, ">" ]), 
            this.replaceArr.push([ /&amp;/g, "&" ]), this.replaceArr.push([ /&quot;/g, '"' ]), 
            this.replaceArr.push([ /&apos;/g, "'" ]);
        }, e.prototype.replaceSpecial = function(t) {
            for (var e = 0; e < this.replaceArr.length; e++) {
                var i = this.replaceArr[e][0], r = this.replaceArr[e][1];
                t = t.replace(i, r);
            }
            return t;
        }, e.prototype.parse = function(e) {
            this.stackArray = [], this.resutlArr = [];
            for (var i = 0, r = e.length; r > i; ) {
                var n = e.indexOf("<", i);
                if (0 > n) this.addToResultArr(e.substring(i)), i = r; else {
                    this.addToResultArr(e.substring(i, n));
                    var a = e.indexOf(">", n);
                    -1 == a ? (t.$error(1038), a = n) : "/" == e.charAt(n + 1) ? this.stackArray.pop() : this.addToArray(e.substring(n + 1, a)), 
                    i = a + 1;
                }
            }
            return this.resutlArr;
        }, e.prototype.parser = function(t) {
            return this.parse(t);
        }, e.prototype.addToResultArr = function(t) {
            "" != t && (t = this.replaceSpecial(t), this.stackArray.length > 0 ? this.resutlArr.push({
                text: t,
                style: this.stackArray[this.stackArray.length - 1]
            }) : this.resutlArr.push({
                text: t
            }));
        }, e.prototype.changeStringToObject = function(t) {
            var e = {}, i = [];
            if ("i" == (t = t.trim()).charAt(0) || "b" == t.charAt(0) || "u" == t.charAt(0)) this.addProperty(e, t, "true"); else if (i = t.match(/^(font|a)\s/)) {
                t = t.substring(i[0].length).trim();
                for (var r = 0, n = void 0; n = t.match(this.getHeadReg()); ) {
                    var a = n[0], o = "";
                    '"' == (t = t.substring(a.length).trim()).charAt(0) ? (r = t.indexOf('"', 1), o = t.substring(1, r), 
                    r += 1) : "'" == t.charAt(0) ? (r = t.indexOf("'", 1), o = t.substring(1, r), r += 1) : (o = t.match(/(\S)+/)[0], 
                    r = o.length), this.addProperty(e, a.substring(0, a.length - 1).trim(), o.trim()), 
                    t = t.substring(r).trim();
                }
            }
            return e;
        }, e.prototype.getHeadReg = function() {
            return /^(color|textcolor|strokecolor|stroke|b|bold|i|italic|u|size|fontfamily|href|target)(\s)*=/;
        }, e.prototype.addProperty = function(t, e, i) {
            switch (e.toLowerCase()) {
              case "color":
              case "textcolor":
                i = i.replace(/#/, "0x"), t.textColor = parseInt(i);
                break;

              case "strokecolor":
                i = i.replace(/#/, "0x"), t.strokeColor = parseInt(i);
                break;

              case "stroke":
                t.stroke = parseInt(i);
                break;

              case "b":
              case "bold":
                t.bold = "true" == i;
                break;

              case "u":
                t.underline = "true" == i;
                break;

              case "i":
              case "italic":
                t.italic = "true" == i;
                break;

              case "size":
                t.size = parseInt(i);
                break;

              case "fontfamily":
                t.fontFamily = i;
                break;

              case "href":
                t.href = this.replaceSpecial(i);
                break;

              case "target":
                t.target = this.replaceSpecial(i);
            }
        }, e.prototype.addToArray = function(t) {
            var e = this.changeStringToObject(t);
            if (0 == this.stackArray.length) this.stackArray.push(e); else {
                var i = this.stackArray[this.stackArray.length - 1];
                for (var r in i) null == e[r] && (e[r] = i[r]);
                this.stackArray.push(e);
            }
        }, e;
    }();
    t.HtmlTextParser = i, e(i.prototype, "egret.HtmlTextParser");
}(p || (p = {}));

!function(t) {
    var r = function(e) {
        function r() {
            var t = e.call(this) || this;
            return t.stageTextAdded = !1, t._text = null, t._isFocus = !1, t;
        }
        return i(r, e), r.prototype.init = function(e) {
            this._text = e, this.stageText = new t.StageText(), this.stageText.$setTextField(this._text);
        }, r.prototype._addStageText = function() {
            this.stageTextAdded || (this._text.$inputEnabled || (this._text.$touchEnabled = !0), 
            this.tempStage = this._text.stage, this.stageText.$addToStage(), this.stageText.addEventListener("updateText", this.updateTextHandler, this), 
            this._text.addEventListener(t.TouchEvent.TOUCH_BEGIN, this.onMouseDownHandler, this), 
            this.stageText.addEventListener("blur", this.blurHandler, this), this.stageText.addEventListener("focus", this.focusHandler, this), 
            this.stageTextAdded = !0);
        }, r.prototype._removeStageText = function() {
            this.stageTextAdded && (this._text.$inputEnabled || (this._text.$touchEnabled = !1), 
            this.stageText.$removeFromStage(), this.stageText.removeEventListener("updateText", this.updateTextHandler, this), 
            this._text.removeEventListener(t.TouchEvent.TOUCH_BEGIN, this.onMouseDownHandler, this), 
            this.tempStage.removeEventListener(t.TouchEvent.TOUCH_BEGIN, this.onStageDownHandler, this), 
            this.stageText.removeEventListener("blur", this.blurHandler, this), this.stageText.removeEventListener("focus", this.focusHandler, this), 
            this.stageTextAdded = !1);
        }, r.prototype._getText = function() {
            return this.stageText.$getText();
        }, r.prototype._setText = function(t) {
            this.stageText.$setText(t);
        }, r.prototype._setColor = function(t) {
            this.stageText.$setColor(t);
        }, r.prototype.focusHandler = function(e) {
            this._isFocus || (this._isFocus = !0, e.showing || this._text.$setIsTyping(!0), 
            this._text.dispatchEvent(new t.FocusEvent(t.FocusEvent.FOCUS_IN, !0)));
        }, r.prototype.blurHandler = function(e) {
            this._isFocus && (this._isFocus = !1, this.tempStage.removeEventListener(t.TouchEvent.TOUCH_BEGIN, this.onStageDownHandler, this), 
            this._text.$setIsTyping(!1), this.stageText.$onBlur(), this._text.dispatchEvent(new t.FocusEvent(t.FocusEvent.FOCUS_OUT, !0)));
        }, r.prototype.onMouseDownHandler = function(t) {
            this.$onFocus();
        }, r.prototype.$onFocus = function() {
            var e = this;
            this._text.visible && (this._isFocus || (this.tempStage.removeEventListener(t.TouchEvent.TOUCH_BEGIN, this.onStageDownHandler, this), 
            t.callLater(function() {
                e.tempStage.addEventListener(t.TouchEvent.TOUCH_BEGIN, e.onStageDownHandler, e);
            }, this), t.nativeRender && this.stageText.$setText(this._text.$TextField[13]), 
            this.stageText.$show()));
        }, r.prototype.onStageDownHandler = function(t) {
            t.$target != this._text && this.stageText.$hide();
        }, r.prototype.updateTextHandler = function(e) {
            var i, r, n = this._text.$TextField, a = this.stageText.$getText(), o = !1;
            null != n[35] && (i = new RegExp("[" + n[35] + "]", "g"), r = a.match(i), a = r ? r.join("") : "", 
            o = !0), null != n[36] && (i = new RegExp("[^" + n[36] + "]", "g"), r = a.match(i), 
            a = r ? r.join("") : "", o = !0), o && this.stageText.$getText() != a && this.stageText.$setText(a), 
            this.resetText(), this._text.dispatchEvent(new t.Event(t.Event.CHANGE, !0));
        }, r.prototype.resetText = function() {
            this._text.$setBaseText(this.stageText.$getText());
        }, r.prototype._hideInput = function() {
            this.stageText.$removeFromStage();
        }, r.prototype.updateInput = function() {
            !this._text.$visible && this.stageText && this._hideInput();
        }, r.prototype._updateProperties = function() {
            return this._isFocus ? (this.stageText.$resetStageText(), void this.updateInput()) : (this.stageText.$setText(this._text.$TextField[13]), 
            this.stageText.$resetStageText(), void this.updateInput());
        }, r;
    }(t.HashObject);
    t.InputController = r, e(r.prototype, "egret.InputController");
}(p || (p = {}));

p || (p = {});

!function(t) {
    function r(e, i, r) {
        var n = null == (r = r || {}).italic ? i[16] : r.italic, o = null == r.bold ? i[15] : r.bold, s = null == r.size ? i[0] : r.size, h = r.fontFamily || i[8] || a.default_fontFamily;
        return t.sys.measureText(e, h, s, o, n);
    }
    var n = new RegExp("(?=[\\u00BF-\\u1FFF\\u2C00-\\uD7FF]|\\b|\\s)(?![。，！、》…）)}”】\\.\\,\\!\\?\\]\\:])"), a = function(e) {
        function a() {
            var i = e.call(this) || this;
            i.$inputEnabled = !1, i.inputUtils = null, i.$graphicsNode = null, i.isFlow = !1, 
            i.textArr = [], i.linesArr = [], i.$isTyping = !1;
            var r = new t.sys.TextNode();
            return r.fontFamily = a.default_fontFamily, i.textNode = r, i.$renderNode = r, i.$TextField = {
                0: a.default_size,
                1: 0,
                2: a.default_textColor,
                3: NaN,
                4: NaN,
                5: 0,
                6: 0,
                7: 0,
                8: a.default_fontFamily,
                9: "left",
                10: "top",
                11: "#ffffff",
                12: "",
                13: "",
                14: [],
                15: !1,
                16: !1,
                17: !0,
                18: !1,
                19: !1,
                20: !1,
                21: 0,
                22: 0,
                23: 0,
                24: t.TextFieldType.DYNAMIC,
                25: 0,
                26: "#000000",
                27: 0,
                28: -1,
                29: 0,
                30: !1,
                31: !1,
                32: 0,
                33: !1,
                34: 16777215,
                35: null,
                36: null,
                37: t.TextFieldInputType.TEXT,
                38: !1
            }, i;
        }
        return i(a, e), a.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(7);
        }, a.prototype.isInput = function() {
            return this.$TextField[24] == t.TextFieldType.INPUT;
        }, a.prototype.$setTouchEnabled = function(t) {
            e.prototype.$setTouchEnabled.call(this, t), this.isInput() && (this.$inputEnabled = !0);
        }, Object.defineProperty(a.prototype, "fontFamily", {
            get: function() {
                return this.$TextField[8];
            },
            set: function(t) {
                this.$setFontFamily(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setFontFamily = function(e) {
            var i = this.$TextField;
            return i[8] != e && (i[8] = e, this.invalidateFontString(), t.nativeRender && this.$nativeDisplayObject.setFontFamily(e), 
            !0);
        }, Object.defineProperty(a.prototype, "size", {
            get: function() {
                return this.$TextField[0];
            },
            set: function(t) {
                this.$setSize(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setSize = function(e) {
            var i = this.$TextField;
            return i[0] != e && (i[0] = e, this.invalidateFontString(), t.nativeRender && this.$nativeDisplayObject.setFontSize(e), 
            !0);
        }, Object.defineProperty(a.prototype, "bold", {
            get: function() {
                return this.$TextField[15];
            },
            set: function(t) {
                this.$setBold(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setBold = function(e) {
            var i = this.$TextField;
            return e != i[15] && (i[15] = e, this.invalidateFontString(), t.nativeRender && this.$nativeDisplayObject.setBold(e), 
            !0);
        }, Object.defineProperty(a.prototype, "italic", {
            get: function() {
                return this.$TextField[16];
            },
            set: function(t) {
                this.$setItalic(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setItalic = function(e) {
            var i = this.$TextField;
            return e != i[16] && (i[16] = e, this.invalidateFontString(), t.nativeRender && this.$nativeDisplayObject.setItalic(e), 
            !0);
        }, a.prototype.invalidateFontString = function() {
            this.$TextField[17] = !0, this.$invalidateTextField();
        }, Object.defineProperty(a.prototype, "textAlign", {
            get: function() {
                return this.$TextField[9];
            },
            set: function(t) {
                this.$setTextAlign(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setTextAlign = function(e) {
            var i = this.$TextField;
            return i[9] != e && (i[9] = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setTextAlign(e), 
            !0);
        }, Object.defineProperty(a.prototype, "verticalAlign", {
            get: function() {
                return this.$TextField[10];
            },
            set: function(t) {
                this.$setVerticalAlign(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setVerticalAlign = function(e) {
            var i = this.$TextField;
            return i[10] != e && (i[10] = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setVerticalAlign(e), 
            !0);
        }, Object.defineProperty(a.prototype, "lineSpacing", {
            get: function() {
                return this.$TextField[1];
            },
            set: function(t) {
                this.$setLineSpacing(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setLineSpacing = function(e) {
            var i = this.$TextField;
            return i[1] != e && (i[1] = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setLineSpacing(e), 
            !0);
        }, Object.defineProperty(a.prototype, "textColor", {
            get: function() {
                return this.$TextField[2];
            },
            set: function(t) {
                this.$setTextColor(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setTextColor = function(e) {
            var i = this.$TextField;
            return i[2] != e && (i[2] = e, this.inputUtils && this.inputUtils._setColor(this.$TextField[2]), 
            this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setTextColor(e), 
            !0);
        }, Object.defineProperty(a.prototype, "wordWrap", {
            get: function() {
                return this.$TextField[19];
            },
            set: function(t) {
                this.$setWordWrap(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setWordWrap = function(e) {
            var i = this.$TextField;
            e != i[19] && (i[20] || (i[19] = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setWordWrap(e)));
        }, Object.defineProperty(a.prototype, "type", {
            get: function() {
                return this.$TextField[24];
            },
            set: function(t) {
                this.$setType(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setType = function(e) {
            var i = this.$TextField;
            return i[24] != e && (i[24] = e, t.nativeRender && this.$nativeDisplayObject.setType(e), 
            e == t.TextFieldType.INPUT ? (isNaN(i[3]) && this.$setWidth(100), isNaN(i[4]) && this.$setHeight(30), 
            this.$setTouchEnabled(!0), null == this.inputUtils && (this.inputUtils = new t.InputController()), 
            this.inputUtils.init(this), this.$invalidateTextField(), this.$stage && this.inputUtils._addStageText()) : (this.inputUtils && (this.inputUtils._removeStageText(), 
            this.inputUtils = null), this.$setTouchEnabled(!1)), !0);
        }, Object.defineProperty(a.prototype, "inputType", {
            get: function() {
                return this.$TextField[37];
            },
            set: function(e) {
                this.$TextField[37] = e, t.nativeRender && this.$nativeDisplayObject.setInputType(e);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "text", {
            get: function() {
                return this.$getText();
            },
            set: function(t) {
                this.$setText(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$getText = function() {
            return this.$TextField[24] == t.TextFieldType.INPUT ? this.inputUtils._getText() : this.$TextField[13];
        }, a.prototype.$setBaseText = function(e) {
            e = null == e ? "" : e.toString(), this.isFlow = !1;
            var i = this.$TextField;
            if (i[13] != e) {
                this.$invalidateTextField(), i[13] = e;
                var r = "";
                return r = i[20] ? this.changeToPassText(e) : e, t.nativeRender && this.$nativeDisplayObject.setText(r), 
                this.setMiddleStyle([ {
                    text: r
                } ]), !0;
            }
            return !1;
        }, a.prototype.$setText = function(t) {
            null == t && (t = "");
            var e = this.$setBaseText(t);
            return this.inputUtils && this.inputUtils._setText(this.$TextField[13]), e;
        }, Object.defineProperty(a.prototype, "displayAsPassword", {
            get: function() {
                return this.$TextField[20];
            },
            set: function(t) {
                this.$setDisplayAsPassword(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setDisplayAsPassword = function(e) {
            var i = this.$TextField;
            if (i[20] != e) {
                i[20] = e, this.$invalidateTextField();
                var r = "";
                return r = e ? this.changeToPassText(i[13]) : i[13], t.nativeRender && this.$nativeDisplayObject.setText(r), 
                this.setMiddleStyle([ {
                    text: r
                } ]), !0;
            }
            return !1;
        }, Object.defineProperty(a.prototype, "strokeColor", {
            get: function() {
                return this.$TextField[25];
            },
            set: function(t) {
                this.$setStrokeColor(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setStrokeColor = function(e) {
            var i = this.$TextField;
            return i[25] != e && (this.$invalidateTextField(), i[25] = e, t.nativeRender && this.$nativeDisplayObject.setStrokeColor(e), 
            i[26] = t.toColorString(e), !0);
        }, Object.defineProperty(a.prototype, "stroke", {
            get: function() {
                return this.$TextField[27];
            },
            set: function(t) {
                this.$setStroke(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setStroke = function(e) {
            return this.$TextField[27] != e && (this.$invalidateTextField(), this.$TextField[27] = e, 
            t.nativeRender && this.$nativeDisplayObject.setStroke(e), !0);
        }, Object.defineProperty(a.prototype, "maxChars", {
            get: function() {
                return this.$TextField[21];
            },
            set: function(t) {
                this.$setMaxChars(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setMaxChars = function(e) {
            return this.$TextField[21] != e && (this.$TextField[21] = e, t.nativeRender && this.$nativeDisplayObject.setMaxChars(e), 
            !0);
        }, Object.defineProperty(a.prototype, "scrollV", {
            get: function() {
                return Math.min(Math.max(this.$TextField[28], 1), this.maxScrollV);
            },
            set: function(e) {
                this.$TextField[28] = Math.max(e, 1), t.nativeRender && this.$nativeDisplayObject.setScrollV(e), 
                this.$invalidateTextField();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "maxScrollV", {
            get: function() {
                return this.$getLinesArr(), Math.max(this.$TextField[29] - t.TextFieldUtils.$getScrollNum(this) + 1, 1);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "selectionBeginIndex", {
            get: function() {
                return 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "selectionEndIndex", {
            get: function() {
                return 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "caretIndex", {
            get: function() {
                return 0;
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setSelection = function(t, e) {
            return !1;
        }, a.prototype.$getLineHeight = function() {
            return this.$TextField[1] + this.$TextField[0];
        }, Object.defineProperty(a.prototype, "numLines", {
            get: function() {
                return this.$getLinesArr(), this.$TextField[29];
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "multiline", {
            get: function() {
                return this.$TextField[30];
            },
            set: function(t) {
                this.$setMultiline(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setMultiline = function(e) {
            return this.$TextField[30] = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setMultiline(e), 
            !0;
        }, Object.defineProperty(a.prototype, "restrict", {
            get: function() {
                var t = this.$TextField, e = null;
                return null != t[35] && (e = t[35]), null != t[36] && (null == e && (e = ""), e += "^" + t[36]), 
                e;
            },
            set: function(t) {
                var e = this.$TextField;
                if (null == t) e[35] = null, e[36] = null; else {
                    for (var i = -1; i < t.length && 0 != (i = t.indexOf("^", i)) && i > 0 && "\\" == t.charAt(i - 1); ) i++;
                    0 == i ? (e[35] = null, e[36] = t.substring(i + 1)) : i > 0 ? (e[35] = t.substring(0, i), 
                    e[36] = t.substring(i + 1)) : (e[35] = t, e[36] = null);
                }
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setWidth = function(e) {
            t.nativeRender && this.$nativeDisplayObject.setTextFieldWidth(e);
            var i = this.$TextField;
            if (isNaN(e)) {
                if (isNaN(i[3])) return !1;
                i[3] = NaN;
            } else {
                if (i[3] == e) return !1;
                i[3] = e;
            }
            return !(0 > (e = +e) || (this.$invalidateTextField(), 0));
        }, a.prototype.$setHeight = function(e) {
            t.nativeRender && this.$nativeDisplayObject.setTextFieldHeight(e);
            var i = this.$TextField;
            if (isNaN(e)) {
                if (isNaN(i[4])) return !1;
                i[4] = NaN;
            } else {
                if (i[4] == e) return !1;
                i[4] = e;
            }
            return !(0 > (e = +e) || (this.$invalidateTextField(), 0));
        }, a.prototype.$getWidth = function() {
            var t = this.$TextField;
            return isNaN(t[3]) ? this.$getContentBounds().width : t[3];
        }, a.prototype.$getHeight = function() {
            var t = this.$TextField;
            return isNaN(t[4]) ? this.$getContentBounds().height : t[4];
        }, Object.defineProperty(a.prototype, "border", {
            get: function() {
                return this.$TextField[31];
            },
            set: function(t) {
                this.$setBorder(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setBorder = function(e) {
            e = !!e, this.$TextField[31] = e, t.nativeRender && this.$nativeDisplayObject.setBorder(e);
        }, Object.defineProperty(a.prototype, "borderColor", {
            get: function() {
                return this.$TextField[32];
            },
            set: function(t) {
                this.$setBorderColor(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setBorderColor = function(e) {
            e = +e || 0, this.$TextField[32] = e, t.nativeRender && this.$nativeDisplayObject.setBorderColor(e);
        }, Object.defineProperty(a.prototype, "background", {
            get: function() {
                return this.$TextField[33];
            },
            set: function(t) {
                this.$setBackground(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setBackground = function(e) {
            this.$TextField[33] = e, t.nativeRender && this.$nativeDisplayObject.setBackground(e);
        }, Object.defineProperty(a.prototype, "backgroundColor", {
            get: function() {
                return this.$TextField[34];
            },
            set: function(t) {
                this.$setBackgroundColor(t);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.$setBackgroundColor = function(e) {
            this.$TextField[34] = e, t.nativeRender && this.$nativeDisplayObject.setBackgroundColor(e);
        }, a.prototype.fillBackground = function(e) {
            var i = this.$graphicsNode;
            i && i.clear();
            var r = this.$TextField;
            if (r[33] || r[31] || e && e.length > 0) {
                if (!i) if (i = this.$graphicsNode = new t.sys.GraphicsNode(), t.nativeRender) this.$renderNode = this.textNode; else {
                    var n = new t.sys.GroupNode();
                    n.addNode(i), n.addNode(this.textNode), this.$renderNode = n;
                }
                var a = void 0;
                if (r[33] && i.beginFill(r[34]).drawRect(0, 0, this.$getWidth(), this.$getHeight()), 
                r[31] && (a = i.lineStyle(1, r[32])).drawRect(0, 0, this.$getWidth() - 1, this.$getHeight() - 1), 
                e && e.length > 0) for (var o = r[2], s = -1, h = e.length, c = 0; h > c; c += 4) {
                    var l = e[c], u = e[c + 1], p = e[c + 2], d = e[c + 3] || o;
                    (0 > s || s != d) && (s = d, a = i.lineStyle(2, d, 1, t.CapsStyle.NONE)), a.moveTo(l, u), 
                    a.lineTo(l + p, u);
                }
            }
            if (i) {
                var f = this.$getRenderBounds();
                i.x = f.x, i.y = f.y, i.width = f.width, i.height = f.height, t.Rectangle.release(f);
            }
        }, a.prototype.setFocus = function() {
            this.type == t.TextFieldType.INPUT && this.$stage && this.inputUtils.$onFocus();
        }, a.prototype.$onRemoveFromStage = function() {
            e.prototype.$onRemoveFromStage.call(this), this.removeEvent(), this.$TextField[24] == t.TextFieldType.INPUT && this.inputUtils._removeStageText(), 
            this.textNode && (this.textNode.clean(), t.nativeRender && egret_native.NativeDisplayObject.disposeTextData(this));
        }, a.prototype.$onAddToStage = function(i, r) {
            e.prototype.$onAddToStage.call(this, i, r), this.addEvent(), this.$TextField[24] == t.TextFieldType.INPUT && this.inputUtils._addStageText();
        }, a.prototype.$invalidateTextField = function() {
            var e = this;
            if (e.$renderDirty = !0, e.$TextField[18] = !0, e.$TextField[38] = !0, t.nativeRender) ; else {
                var i = e.$parent;
                i && !i.$cacheDirty && (i.$cacheDirty = !0, i.$cacheDirtyUp());
                var r = e.$maskedObject;
                r && !r.$cacheDirty && (r.$cacheDirty = !0, r.$cacheDirtyUp());
            }
        }, a.prototype.$getRenderBounds = function() {
            var e = this.$getContentBounds(), i = t.Rectangle.create();
            i.copyFrom(e), this.$TextField[31] && (i.width += 2, i.height += 2);
            var r = 2 * this.$TextField[27];
            return r > 0 && (i.width += 2 * r, i.height += 2 * r), i.x -= r + 2, i.y -= r + 2, 
            i.width = Math.ceil(i.width) + 4, i.height = Math.ceil(i.height) + 4, i;
        }, a.prototype.$measureContentBounds = function(e) {
            this.$getLinesArr();
            var i = 0, r = 0;
            t.nativeRender ? (i = egret_native.nrGetTextFieldWidth(this.$nativeDisplayObject.id), 
            r = egret_native.nrGetTextFieldHeight(this.$nativeDisplayObject.id)) : (i = isNaN(this.$TextField[3]) ? this.$TextField[5] : this.$TextField[3], 
            r = isNaN(this.$TextField[4]) ? t.TextFieldUtils.$getTextHeight(this) : this.$TextField[4]), 
            e.setTo(0, 0, i, r);
        }, a.prototype.$updateRenderNode = function() {
            if (this.$TextField[24] == t.TextFieldType.INPUT) {
                if (this.inputUtils._updateProperties(), this.$isTyping) return void this.fillBackground();
            } else if (0 == this.$TextField[3]) {
                var e = this.$graphicsNode;
                return void (e && e.clear());
            }
            var i = this.drawText();
            this.fillBackground(i);
            var r = this.$getRenderBounds(), n = this.textNode;
            n.x = r.x, n.y = r.y, n.width = Math.ceil(r.width), n.height = Math.ceil(r.height), 
            t.Rectangle.release(r);
        }, Object.defineProperty(a.prototype, "textFlow", {
            get: function() {
                return this.textArr;
            },
            set: function(e) {
                this.isFlow = !0;
                var i = "";
                null == e && (e = []);
                for (var r = 0; r < e.length; r++) i += e[r].text;
                this.$TextField[20] ? this.$setBaseText(i) : (this.$TextField[13] = i, this.setMiddleStyle(e), 
                t.nativeRender && this.$nativeDisplayObject.setTextFlow(e));
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.changeToPassText = function(t) {
            if (this.$TextField[20]) {
                for (var e = "", i = 0, r = t.length; r > i; i++) switch (t.charAt(i)) {
                  case "\n":
                    e += "\n";
                    break;

                  case "\r":
                    break;

                  default:
                    e += "*";
                }
                return e;
            }
            return t;
        }, a.prototype.setMiddleStyle = function(t) {
            this.$TextField[18] = !0, this.$TextField[38] = !0, this.textArr = t, this.$invalidateTextField();
        }, Object.defineProperty(a.prototype, "textWidth", {
            get: function() {
                return this.$getLinesArr(), t.nativeRender ? egret_native.nrGetTextWidth(this.$nativeDisplayObject.id) : this.$TextField[5];
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "textHeight", {
            get: function() {
                return this.$getLinesArr(), t.nativeRender ? egret_native.nrGetTextHeight(this.$nativeDisplayObject.id) : t.TextFieldUtils.$getTextHeight(this);
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.appendText = function(t) {
            this.appendElement({
                text: t
            });
        }, a.prototype.appendElement = function(e) {
            var i = this.$TextField[13] + e.text;
            return t.nativeRender ? (this.textArr.push(e), this.$TextField[13] = i, this.$TextField[18] = !0, 
            this.$TextField[38] = !0, void this.$nativeDisplayObject.setTextFlow(this.textArr)) : void (this.$TextField[20] ? this.$setBaseText(i) : (this.$TextField[13] = i, 
            this.textArr.push(e), this.setMiddleStyle(this.textArr)));
        }, a.prototype.$getLinesArr = function() {
            var e = this.$TextField;
            return t.nativeRender && e[38] ? (egret_native.updateNativeRender(), void (e[38] = !1)) : this.$getLinesArr2();
        }, a.prototype.$getLinesArr2 = function() {
            var e = this.$TextField;
            if (!e[18]) return this.linesArr;
            e[18] = !1;
            var i = this.textArr;
            this.linesArr.length = 0, e[6] = 0, e[5] = 0;
            var a = e[3];
            if (!isNaN(a) && 0 == a) return e[29] = 0, [ {
                width: 0,
                height: 0,
                charNum: 0,
                elements: [],
                hasNextLine: !1
            } ];
            for (var o, s = this.linesArr, h = 0, c = 0, l = 0, u = 0, p = 0, d = i.length; d > p; p++) {
                var f = i[p];
                if (f.text) {
                    f.style = f.style || {};
                    for (var $ = f.text.toString().split(/(?:\r\n|\r|\n)/), y = 0, g = $.length; g > y; y++) {
                        null == s[u] && (o = {
                            width: 0,
                            height: 0,
                            elements: [],
                            charNum: 0,
                            hasNextLine: !1
                        }, s[u] = o, h = 0, l = 0, c = 0), l = e[24] == t.TextFieldType.INPUT ? e[0] : Math.max(l, f.style.size || e[0]);
                        var v = !0;
                        if ("" == $[y]) y == g - 1 && (v = !1); else {
                            var b = r($[y], e, f.style);
                            if (isNaN(a)) h += b, c += $[y].length, o.elements.push({
                                width: b,
                                text: $[y],
                                style: f.style
                            }), y == g - 1 && (v = !1); else if (a >= h + b) o.elements.push({
                                width: b,
                                text: $[y],
                                style: f.style
                            }), h += b, c += $[y].length, y == g - 1 && (v = !1); else {
                                for (var m = 0, x = 0, T = $[y], D = void 0, O = (D = e[19] ? T.split(n) : T.match(/./g)).length, w = 0; O > m; m++) {
                                    var E = D[m].length, S = !1;
                                    if (1 == E && O - 1 > m) {
                                        var R = D[m].charCodeAt(0), F = D[m + 1].charCodeAt(0);
                                        R >= 55296 && 56319 >= R && 56320 == (64512 & F) ? (E = 2, S = !0, b = r(N = D[m] + D[m + 1], e, f.style)) : b = r(D[m], e, f.style);
                                    } else b = r(D[m], e, f.style);
                                    if (0 != h && h + b > a && h + m != 0) break;
                                    if (x + b > a) for (var P = D[m].match(/./g), C = 0, _ = P.length; _ > C; C++) {
                                        var M = !1;
                                        if (1 == (E = P[C].length) && _ - 1 > C) {
                                            var R = P[C].charCodeAt(0), F = P[C + 1].charCodeAt(0);
                                            if (R >= 55296 && 56319 >= R && 56320 == (64512 & F)) {
                                                var N = P[C] + P[C + 1];
                                                E = 2, M = !0, b = r(N, e, f.style);
                                            } else b = r(P[C], e, f.style);
                                        } else b = r(P[C], e, f.style);
                                        if (C > 0 && h + b > a) break;
                                        x += b, h += b, c += w += E, M && C++;
                                    } else w += E, x += b, h += b, c += w;
                                    S && m++;
                                }
                                if (m > 0) {
                                    o.elements.push({
                                        width: x,
                                        text: T.substring(0, w),
                                        style: f.style
                                    });
                                    var j = T.substring(w), A = void 0, B = j.length;
                                    for (A = 0; B > A && " " == j.charAt(A); A++) ;
                                    $[y] = j.substring(A);
                                }
                                "" != $[y] && (y--, v = !1);
                            }
                        }
                        v && (c++, o.hasNextLine = !0), y < $.length - 1 && (o.width = h, o.height = l, 
                        o.charNum = c, e[5] = Math.max(e[5], h), e[6] += l, u++);
                    }
                    p == i.length - 1 && o && (o.width = h, o.height = l, o.charNum = c, e[5] = Math.max(e[5], h), 
                    e[6] += l);
                } else o && (o.width = h, o.height = l, o.charNum = c, e[5] = Math.max(e[5], h), 
                e[6] += l);
            }
            return e[29] = s.length, s;
        }, a.prototype.$setIsTyping = function(e) {
            this.$isTyping = e, this.$invalidateTextField(), t.nativeRender && this.$nativeDisplayObject.setIsTyping(e);
        }, a.prototype.drawText = function() {
            var e = this.textNode, i = this.$TextField;
            e.bold = i[15], e.fontFamily = i[8] || a.default_fontFamily, e.italic = i[16], e.size = i[0], 
            e.stroke = i[27], e.strokeColor = i[25], e.textColor = i[2];
            var r = this.$getLinesArr();
            if (0 == i[5]) return [];
            var n = isNaN(i[3]) ? i[5] : i[3], o = t.TextFieldUtils.$getTextHeight(this), s = 0, h = t.TextFieldUtils.$getStartLine(this), c = i[4];
            !isNaN(c) && c > o && (s += t.TextFieldUtils.$getValign(this) * (c - o)), s = Math.round(s);
            for (var l = t.TextFieldUtils.$getHalign(this), u = 0, p = [], d = h, f = i[29]; f > d; d++) {
                var $ = r[d], y = $.height;
                if (s += y / 2, d != h) {
                    if (i[24] == t.TextFieldType.INPUT && !i[30]) break;
                    if (!isNaN(c) && s > c) break;
                }
                u = Math.round((n - $.width) * l);
                for (var g = 0, v = $.elements.length; v > g; g++) {
                    var b = $.elements[g], m = b.style.size || i[0];
                    e.drawText(u, s + (y - m) / 2, b.text, b.style), b.style.underline && p.push(u, s + y / 2, b.width, b.style.textColor), 
                    u += b.width;
                }
                s += y / 2 + i[1];
            }
            return p;
        }, a.prototype.addEvent = function() {
            this.addEventListener(t.TouchEvent.TOUCH_TAP, this.onTapHandler, this);
        }, a.prototype.removeEvent = function() {
            this.removeEventListener(t.TouchEvent.TOUCH_TAP, this.onTapHandler, this);
        }, a.prototype.onTapHandler = function(e) {
            if (this.$TextField[24] != t.TextFieldType.INPUT) {
                var i = t.TextFieldUtils.$getTextElement(this, e.localX, e.localY);
                if (null != i) {
                    var r = i.style;
                    if (r && r.href) if (r.href.match(/^event:/)) {
                        var n = r.href.match(/^event:/)[0];
                        t.TextEvent.dispatchTextEvent(this, t.TextEvent.LINK, r.href.substring(n.length));
                    } else open(r.href, r.target || "_blank");
                }
            }
        }, a.default_fontFamily = "Arial", a.default_size = 30, a.default_textColor = 16777215, 
        a;
    }(t.DisplayObject);
    t.TextField = a, e(a.prototype, "egret.TextField");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.TEXT = "text", t.TEL = "tel", t.PASSWORD = "password", t;
    }();
    t.TextFieldInputType = i, e(i.prototype, "egret.TextFieldInputType");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.DYNAMIC = "dynamic", t.INPUT = "input", t;
    }();
    t.TextFieldType = i, e(i.prototype, "egret.TextFieldType");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function e() {}
        return e.$getStartLine = function(t) {
            var i = t.$TextField, r = e.$getTextHeight(t), n = 0, a = i[4];
            return isNaN(a) || (a > r || r > a && (n = Math.max(i[28] - 1, 0), n = Math.min(i[29] - 1, n)), 
            i[30] || (n = Math.max(i[28] - 1, 0), i[29] > 0 && (n = Math.min(i[29] - 1, n)))), 
            n;
        }, e.$getHalign = function(e) {
            var i = e.$getLinesArr2(), r = 0;
            return e.$TextField[9] == t.HorizontalAlign.CENTER ? r = .5 : e.$TextField[9] == t.HorizontalAlign.RIGHT && (r = 1), 
            e.$TextField[24] == t.TextFieldType.INPUT && !e.$TextField[30] && i.length > 1 && (r = 0), 
            r;
        }, e.$getTextHeight = function(e) {
            return t.TextFieldType.INPUT != e.$TextField[24] || e.$TextField[30] ? e.$TextField[6] + (e.$TextField[29] - 1) * e.$TextField[1] : e.$TextField[0];
        }, e.$getValign = function(i) {
            var r = e.$getTextHeight(i), n = i.$TextField[4];
            if (!isNaN(n) && n > r) {
                var a = 0;
                return i.$TextField[10] == t.VerticalAlign.MIDDLE ? a = .5 : i.$TextField[10] == t.VerticalAlign.BOTTOM && (a = 1), 
                a;
            }
            return 0;
        }, e.$getTextElement = function(t, i, r) {
            var n = e.$getHit(t, i, r), a = t.$getLinesArr2();
            return n && a[n.lineIndex] && a[n.lineIndex].elements[n.textElementIndex] ? a[n.lineIndex].elements[n.textElementIndex] : null;
        }, e.$getHit = function(t, i, r) {
            var n = t.$getLinesArr2();
            if (0 == t.$TextField[3]) return null;
            var a = 0, o = e.$getTextHeight(t), s = 0, h = t.$TextField[4];
            !isNaN(h) && h > o && 0 != (s = e.$getValign(t) * (h - o)) && (r -= s);
            for (var c = 0, l = e.$getStartLine(t); l < n.length; l++) {
                var u = n[l];
                if (c + u.height >= r) {
                    r > c && (a = l + 1);
                    break;
                }
                if ((c += u.height) + t.$TextField[1] > r) return null;
                c += t.$TextField[1];
            }
            if (0 == a) return null;
            var p = n[a - 1], d = t.$TextField[3];
            isNaN(d) && (d = t.textWidth), i -= e.$getHalign(t) * (d - p.width);
            for (var f = 0, l = 0; l < p.elements.length; l++) {
                var $ = p.elements[l];
                if (f + $.width <= i) f += $.width; else if (i > f) return {
                    lineIndex: a - 1,
                    textElementIndex: l
                };
            }
            return null;
        }, e.$getScrollNum = function(t) {
            var e = 1;
            if (t.$TextField[30]) {
                var i = t.height, r = t.size, n = t.lineSpacing;
                i - (r + n) * (e = Math.floor(i / (r + n))) > r / 2 && e++;
            }
            return e;
        }, e;
    }();
    t.TextFieldUtils = i, e(i.prototype, "egret.TextFieldUtils");
}(p || (p = {}));

!function(t) {
    t.sys || (t.sys = {});
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.TOP = "top", t.BOTTOM = "bottom", t.MIDDLE = "middle", t.JUSTIFY = "justify", 
        t.CONTENT_JUSTIFY = "contentJustify", t;
    }();
    t.VerticalAlign = i, e(i.prototype, "egret.VerticalAlign");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.encode = function(t) {
            for (var e = new Uint8Array(t), i = e.length, r = "", n = 0; i > n; n += 3) r += a[e[n] >> 2], 
            r += a[(3 & e[n]) << 4 | e[n + 1] >> 4], r += a[(15 & e[n + 1]) << 2 | e[n + 2] >> 6], 
            r += a[63 & e[n + 2]];
            return i % 3 == 2 ? r = r.substring(0, r.length - 1) + "=" : i % 3 == 1 && (r = r.substring(0, r.length - 2) + "=="), 
            r;
        }, t.decode = function(t) {
            var e = .75 * t.length, i = t.length, r = 0, n = 0, a = 0, s = 0, h = 0;
            "=" === t[t.length - 1] && (e--, "=" === t[t.length - 2] && e--);
            for (var c = new ArrayBuffer(e), l = new Uint8Array(c), u = 0; i > u; u += 4) n = o[t.charCodeAt(u)], 
            a = o[t.charCodeAt(u + 1)], s = o[t.charCodeAt(u + 2)], h = o[t.charCodeAt(u + 3)], 
            l[r++] = n << 2 | a >> 4, l[r++] = (15 & a) << 4 | s >> 2, l[r++] = (3 & s) << 6 | 63 & h;
            return c;
        }, t;
    }();
    t.Base64Util = i, e(i.prototype, "egret.Base64Util");
}(p || (p = {}));

for (var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", o = new Uint8Array(256), s = 0; s < a.length; s++) o[a.charCodeAt(s)] = s;

!function(t) {
    var i = function() {
        function t() {}
        return t.LITTLE_ENDIAN = "littleEndian", t.BIG_ENDIAN = "bigEndian", t;
    }();
    t.Endian = i, e(i.prototype, "egret.Endian");
    var r = function() {
        function e(t, e) {
            void 0 === e && (e = 0), this.bufferExtSize = 0, this.EOF_byte = -1, this.EOF_code_point = -1, 
            0 > e && (e = 0), this.bufferExtSize = e;
            var r, n = 0;
            if (t) {
                var a = void 0;
                if (t instanceof Uint8Array ? (a = t, n = t.length) : (n = t.byteLength, a = new Uint8Array(t)), 
                0 == e) r = new Uint8Array(n); else {
                    var o = 1 + (n / e | 0);
                    r = new Uint8Array(o * e);
                }
                r.set(a);
            } else r = new Uint8Array(e);
            this.write_position = n, this._position = 0, this._bytes = r, this.data = new DataView(r.buffer), 
            this.endian = i.BIG_ENDIAN;
        }
        return Object.defineProperty(e.prototype, "endian", {
            get: function() {
                return 0 == this.$endian ? i.LITTLE_ENDIAN : i.BIG_ENDIAN;
            },
            set: function(t) {
                this.$endian = t == i.LITTLE_ENDIAN ? 0 : 1;
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setArrayBuffer = function(t) {}, Object.defineProperty(e.prototype, "readAvailable", {
            get: function() {
                return this.write_position - this._position;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "buffer", {
            get: function() {
                return this.data.buffer.slice(0, this.write_position);
            },
            set: function(t) {
                var e, i = t.byteLength, r = new Uint8Array(t), n = this.bufferExtSize;
                if (0 == n) e = new Uint8Array(i); else {
                    var a = 1 + (i / n | 0);
                    e = new Uint8Array(a * n);
                }
                e.set(r), this.write_position = i, this._bytes = e, this.data = new DataView(e.buffer);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "rawBuffer", {
            get: function() {
                return this.data.buffer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "bytes", {
            get: function() {
                return this._bytes;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "dataView", {
            get: function() {
                return this.data;
            },
            set: function(t) {
                this.buffer = t.buffer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "bufferOffset", {
            get: function() {
                return this.data.byteOffset;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "position", {
            get: function() {
                return this._position;
            },
            set: function(t) {
                this._position = t, t > this.write_position && (this.write_position = t);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "length", {
            get: function() {
                return this.write_position;
            },
            set: function(t) {
                this.write_position = t, this.data.byteLength > t && (this._position = t), this._validateBuffer(t);
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype._validateBuffer = function(t) {
            if (this.data.byteLength < t) {
                var e = this.bufferExtSize, i = void 0;
                if (0 == e) i = new Uint8Array(t); else {
                    var r = (1 + (t / e >> 0)) * e;
                    i = new Uint8Array(r);
                }
                i.set(this._bytes), this._bytes = i, this.data = new DataView(i.buffer);
            }
        }, Object.defineProperty(e.prototype, "bytesAvailable", {
            get: function() {
                return this.data.byteLength - this._position;
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.clear = function() {
            var t = new ArrayBuffer(this.bufferExtSize);
            this.data = new DataView(t), this._bytes = new Uint8Array(t), this._position = 0, 
            this.write_position = 0;
        }, e.prototype.readBoolean = function() {
            return this.validate(1) ? !!this._bytes[this.position++] : void 0;
        }, e.prototype.readByte = function() {
            return this.validate(1) ? this.data.getInt8(this.position++) : void 0;
        }, e.prototype.readBytes = function(e, i, r) {
            if (void 0 === i && (i = 0), void 0 === r && (r = 0), e) {
                var n = this._position, a = this.write_position - n;
                if (0 > a) return void t.$error(1025);
                if (0 == r) r = a; else if (r > a) return void t.$error(1025);
                var o = e._position;
                e._position = 0, e.validateBuffer(i + r), e._position = o, e._bytes.set(this._bytes.subarray(n, n + r), i), 
                this.position += r;
            }
        }, e.prototype.readDouble = function() {
            if (this.validate(8)) {
                var t = this.data.getFloat64(this._position, 0 == this.$endian);
                return this.position += 8, t;
            }
        }, e.prototype.readFloat = function() {
            if (this.validate(4)) {
                var t = this.data.getFloat32(this._position, 0 == this.$endian);
                return this.position += 4, t;
            }
        }, e.prototype.readInt = function() {
            if (this.validate(4)) {
                var t = this.data.getInt32(this._position, 0 == this.$endian);
                return this.position += 4, t;
            }
        }, e.prototype.readShort = function() {
            if (this.validate(2)) {
                var t = this.data.getInt16(this._position, 0 == this.$endian);
                return this.position += 2, t;
            }
        }, e.prototype.readUnsignedByte = function() {
            return this.validate(1) ? this._bytes[this.position++] : void 0;
        }, e.prototype.readUnsignedInt = function() {
            if (this.validate(4)) {
                var t = this.data.getUint32(this._position, 0 == this.$endian);
                return this.position += 4, t;
            }
        }, e.prototype.readUnsignedShort = function() {
            if (this.validate(2)) {
                var t = this.data.getUint16(this._position, 0 == this.$endian);
                return this.position += 2, t;
            }
        }, e.prototype.readUTF = function() {
            var t = this.readUnsignedShort();
            return t > 0 ? this.readUTFBytes(t) : "";
        }, e.prototype.readUTFBytes = function(t) {
            if (this.validate(t)) {
                var e = this.data, i = new Uint8Array(e.buffer, e.byteOffset + this._position, t);
                return this.position += t, this.decodeUTF8(i);
            }
        }, e.prototype.writeBoolean = function(t) {
            this.validateBuffer(1), this._bytes[this.position++] = +t;
        }, e.prototype.writeByte = function(t) {
            this.validateBuffer(1), this._bytes[this.position++] = 255 & t;
        }, e.prototype.writeBytes = function(t, e, i) {
            void 0 === e && (e = 0), void 0 === i && (i = 0);
            var r;
            0 > e || 0 > i || (r = 0 == i ? t.length - e : Math.min(t.length - e, i)) > 0 && (this.validateBuffer(r), 
            this._bytes.set(t._bytes.subarray(e, e + r), this._position), this.position = this._position + r);
        }, e.prototype.writeDouble = function(t) {
            this.validateBuffer(8), this.data.setFloat64(this._position, t, 0 == this.$endian), 
            this.position += 8;
        }, e.prototype.writeFloat = function(t) {
            this.validateBuffer(4), this.data.setFloat32(this._position, t, 0 == this.$endian), 
            this.position += 4;
        }, e.prototype.writeInt = function(t) {
            this.validateBuffer(4), this.data.setInt32(this._position, t, 0 == this.$endian), 
            this.position += 4;
        }, e.prototype.writeShort = function(t) {
            this.validateBuffer(2), this.data.setInt16(this._position, t, 0 == this.$endian), 
            this.position += 2;
        }, e.prototype.writeUnsignedInt = function(t) {
            this.validateBuffer(4), this.data.setUint32(this._position, t, 0 == this.$endian), 
            this.position += 4;
        }, e.prototype.writeUnsignedShort = function(t) {
            this.validateBuffer(2), this.data.setUint16(this._position, t, 0 == this.$endian), 
            this.position += 2;
        }, e.prototype.writeUTF = function(t) {
            var e = this.encodeUTF8(t), i = e.length;
            this.validateBuffer(2 + i), this.data.setUint16(this._position, i, 0 == this.$endian), 
            this.position += 2, this._writeUint8Array(e, !1);
        }, e.prototype.writeUTFBytes = function(t) {
            this._writeUint8Array(this.encodeUTF8(t));
        }, e.prototype.toString = function() {
            return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable;
        }, e.prototype._writeUint8Array = function(t, e) {
            void 0 === e && (e = !0);
            var i = this._position, r = i + t.length;
            e && this.validateBuffer(r), this.bytes.set(t, i), this.position = r;
        }, e.prototype.validate = function(e) {
            var i = this._bytes.length;
            return i > 0 && this._position + e <= i || void t.$error(1025);
        }, e.prototype.validateBuffer = function(t) {
            this.write_position = t > this.write_position ? t : this.write_position, t += this._position, 
            this._validateBuffer(t);
        }, e.prototype.encodeUTF8 = function(t) {
            for (var e = 0, i = this.stringToCodePoints(t), r = []; i.length > e; ) {
                var n = i[e++];
                if (this.inRange(n, 55296, 57343)) this.encoderError(n); else if (this.inRange(n, 0, 127)) r.push(n); else {
                    var a = void 0, o = void 0;
                    for (this.inRange(n, 128, 2047) ? (a = 1, o = 192) : this.inRange(n, 2048, 65535) ? (a = 2, 
                    o = 224) : this.inRange(n, 65536, 1114111) && (a = 3, o = 240), r.push(this.div(n, Math.pow(64, a)) + o); a > 0; ) {
                        var s = this.div(n, Math.pow(64, a - 1));
                        r.push(128 + s % 64), a -= 1;
                    }
                }
            }
            return new Uint8Array(r);
        }, e.prototype.decodeUTF8 = function(t) {
            for (var e, i = 0, r = "", n = 0, a = 0, o = 0, s = 0; t.length > i; ) {
                var h = t[i++];
                if (h == this.EOF_byte) e = 0 != a ? this.decoderError(!1) : this.EOF_code_point; else if (0 == a) this.inRange(h, 0, 127) ? e = h : (this.inRange(h, 194, 223) ? (a = 1, 
                s = 128, n = h - 192) : this.inRange(h, 224, 239) ? (a = 2, s = 2048, n = h - 224) : this.inRange(h, 240, 244) ? (a = 3, 
                s = 65536, n = h - 240) : this.decoderError(!1), n *= Math.pow(64, a), e = null); else if (this.inRange(h, 128, 191)) if (o += 1, 
                n += (h - 128) * Math.pow(64, a - o), o !== a) e = null; else {
                    var c = n, l = s;
                    n = 0, a = 0, o = 0, s = 0, e = this.inRange(c, l, 1114111) && !this.inRange(c, 55296, 57343) ? c : this.decoderError(!1, h);
                } else n = 0, a = 0, o = 0, s = 0, i--, e = this.decoderError(!1, h);
                null !== e && e !== this.EOF_code_point && (65535 >= e ? e > 0 && (r += String.fromCharCode(e)) : (e -= 65536, 
                r += String.fromCharCode(55296 + (e >> 10 & 1023)), r += String.fromCharCode(56320 + (1023 & e))));
            }
            return r;
        }, e.prototype.encoderError = function(e) {
            t.$error(1026, e);
        }, e.prototype.decoderError = function(e, i) {
            return e && t.$error(1027), i || 65533;
        }, e.prototype.inRange = function(t, e, i) {
            return t >= e && i >= t;
        }, e.prototype.div = function(t, e) {
            return Math.floor(t / e);
        }, e.prototype.stringToCodePoints = function(t) {
            for (var e = [], i = 0, r = t.length; i < t.length; ) {
                var n = t.charCodeAt(i);
                if (this.inRange(n, 55296, 57343)) if (this.inRange(n, 56320, 57343)) e.push(65533); else if (i == r - 1) e.push(65533); else {
                    var a = t.charCodeAt(i + 1);
                    if (this.inRange(a, 56320, 57343)) {
                        var o = 1023 & n, s = 1023 & a;
                        i += 1, e.push(65536 + (o << 10) + s);
                    } else e.push(65533);
                } else e.push(n);
                i += 1;
            }
            return e;
        }, e;
    }();
    t.ByteArray = r, e(r.prototype, "egret.ByteArray");
}(p || (p = {}));

(p || (p = {})).BitmapFillMode = {
    REPEAT: "repeat",
    SCALE: "scale",
    CLIP: "clip"
};

!function(t) {
    (p || (p = {})).registerClass = function(t, e, i) {
        var r = t.prototype;
        r.__class__ = e;
        var n = [ e ];
        i && (n = n.concat(i));
        var a = r.__types__;
        if (r.__types__) for (var o = a.length, s = 0; o > s; s++) {
            var h = a[s];
            -1 == n.indexOf(h) && n.push(h);
        }
        r.__types__ = n;
    };
}();

!function(t) {
    var r = function(e) {
        function r() {
            var i = e.call(this) || this;
            return i.$stageWidth = 0, i.$stageHeight = 0, i.$scaleMode = t.StageScaleMode.SHOW_ALL, 
            i.$orientation = t.OrientationMode.AUTO, i.$maxTouches = 99, i.$stage = i, i.$nestLevel = 1, 
            i;
        }
        return i(r, e), r.prototype.createNativeDisplayObject = function() {
            this.$nativeDisplayObject = new egret_native.NativeDisplayObject(13);
        }, Object.defineProperty(r.prototype, "frameRate", {
            get: function() {
                return t.ticker.$frameRate;
            },
            set: function(e) {
                t.ticker.$setFrameRate(e);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "stageWidth", {
            get: function() {
                return this.$stageWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "stageHeight", {
            get: function() {
                return this.$stageHeight;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.invalidate = function() {
            t.sys.$invalidateRenderFlag = !0;
        }, r.prototype.registerImplementation = function(e, i) {
            t.registerImplementation(e, i);
        }, r.prototype.getImplementation = function(e) {
            return t.getImplementation(e);
        }, Object.defineProperty(r.prototype, "scaleMode", {
            get: function() {
                return this.$scaleMode;
            },
            set: function(t) {
                this.$scaleMode != t && (this.$scaleMode = t, this.$screen.updateScreenSize());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "orientation", {
            get: function() {
                return this.$orientation;
            },
            set: function(t) {
                this.$orientation != t && (this.$orientation = t, this.$screen.updateScreenSize());
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "textureScaleFactor", {
            get: function() {
                return t.$TextureScaleFactor;
            },
            set: function(e) {
                t.$TextureScaleFactor = e;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "maxTouches", {
            get: function() {
                return this.$maxTouches;
            },
            set: function(t) {
                this.$maxTouches != t && (this.$maxTouches = t, this.$screen.updateMaxTouches());
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.setContentSize = function(t, e) {
            this.$screen.setContentSize(t, e);
        }, r;
    }(t.DisplayObjectContainer);
    t.Stage = r, e(r.prototype, "egret.Stage");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return Object.defineProperty(t, "logLevel", {
            set: function(t) {},
            enumerable: !0,
            configurable: !0
        }), t.ALL = "all", t.DEBUG = "debug", t.INFO = "info", t.WARN = "warn", t.ERROR = "error", 
        t.OFF = "off", t;
    }();
    t.Logger = i, e(i.prototype, "egret.Logger");
}(p || (p = {}));

!function(t) {
    var i = function() {
        function t() {}
        return t.isNumber = function(t) {
            return "number" == typeof t && !isNaN(t);
        }, t.sin = function(e) {
            var i = Math.floor(e), r = i + 1, n = t.sinInt(i);
            return i == e ? n : (e - i) * t.sinInt(r) + (r - e) * n;
        }, t.sinInt = function(t) {
            return 0 > (t %= 360) && (t += 360), h[t];
        }, t.cos = function(e) {
            var i = Math.floor(e), r = i + 1, n = t.cosInt(i);
            return i == e ? n : (e - i) * t.cosInt(r) + (r - e) * n;
        }, t.cosInt = function(t) {
            return 0 > (t %= 360) && (t += 360), c[t];
        }, t;
    }();
    t.NumberUtils = i, e(i.prototype, "egret.NumberUtils");
}(p || (p = {}));

for (var h = {}, c = {}, l = Math.PI / 180, u = 0; 360 > u; u++) h[u] = Math.sin(u * l), 
c[u] = Math.cos(u * l);

h[90] = 1, c[90] = 0, h[180] = 0, c[180] = -1, h[270] = -1, c[270] = 0, Function.prototype.bind || (Function.prototype.bind = function(t) {
    "function" != typeof this && p.$error(1029);
    var e = Array.prototype.slice.call(arguments, 1), i = this, r = function() {}, n = function() {
        return i.apply(this instanceof r && t ? this : t, e.concat(Array.prototype.slice.call(arguments)));
    };
    return r.prototype = this.prototype, n.prototype = new r(), n;
});

!function(t) {
    var r = function(e) {
        function r(t, i) {
            void 0 === i && (i = 0);
            var r = e.call(this) || this;
            return r._delay = 0, r._currentCount = 0, r._running = !1, r.updateInterval = 1e3, 
            r.lastCount = 1e3, r.lastTimeStamp = 0, r.delay = t, r.repeatCount = 0 | +i, r;
        }
        return i(r, e), Object.defineProperty(r.prototype, "delay", {
            get: function() {
                return this._delay;
            },
            set: function(t) {
                1 > t && (t = 1), this._delay != t && (this._delay = t, this.lastCount = this.updateInterval = Math.round(60 * t));
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "currentCount", {
            get: function() {
                return this._currentCount;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(r.prototype, "running", {
            get: function() {
                return this._running;
            },
            enumerable: !0,
            configurable: !0
        }), r.prototype.reset = function() {
            this.stop(), this._currentCount = 0;
        }, r.prototype.start = function() {
            this._running || (this.lastCount = this.updateInterval, this.lastTimeStamp = t.getTimer(), 
            t.ticker.$startTick(this.$update, this), this._running = !0);
        }, r.prototype.stop = function() {
            this._running && (t.stopTick(this.$update, this), this._running = !1);
        }, r.prototype.$update = function(e) {
            if (e - this.lastTimeStamp >= this._delay) this.lastCount = this.updateInterval; else {
                if (this.lastCount -= 1e3, this.lastCount > 0) return !1;
                this.lastCount += this.updateInterval;
            }
            this.lastTimeStamp = e, this._currentCount++;
            var i = this.repeatCount > 0 && this._currentCount >= this.repeatCount;
            return t.TimerEvent.dispatchTimerEvent(this, t.TimerEvent.TIMER), i && (this.stop(), 
            t.TimerEvent.dispatchTimerEvent(this, t.TimerEvent.TIMER_COMPLETE)), !1;
        }, r;
    }(t.EventDispatcher);
    t.Timer = r, e(r.prototype, "egret.Timer");
}(p || (p = {}));

p || (p = {});

!function(t) {
    t.$callLaterFunctionList = [], t.$callLaterThisList = [], t.$callLaterArgsList = [], 
    t.callLater = function(e, i) {
        for (var r = [], n = 2; n < arguments.length; n++) r[n - 2] = arguments[n];
        t.$callLaterFunctionList.push(e), t.$callLaterThisList.push(i), t.$callLaterArgsList.push(r);
    }, t.$callAsyncFunctionList = [], t.$callAsyncThisList = [], t.$callAsyncArgsList = [], 
    t.$callAsync = function(e, i) {
        for (var r = [], n = 2; n < arguments.length; n++) r[n - 2] = arguments[n];
        t.$callAsyncFunctionList.push(e), t.$callAsyncThisList.push(i), t.$callAsyncArgsList.push(r);
    };
}(p || (p = {}));

!function(t) {
    t.superSetter = function(t, e, i) {
        for (var r = [], n = 3; n < arguments.length; n++) r[n - 3] = arguments[n];
        var a, o = t.prototype;
        t.hasOwnProperty("__sets__") || Object.defineProperty(t, "__sets__", {
            value: {}
        });
        var s = (a = t.__sets__)[i];
        if (s) return s.apply(e, r);
        var h = Object.getPrototypeOf(o);
        if (null != h) {
            for (;!h.hasOwnProperty(i); ) if (null == (h = Object.getPrototypeOf(h))) return;
            s = Object.getOwnPropertyDescriptor(h, i).set, a[i] = s, s.apply(e, r);
        }
    }, t.superGetter = function(t, e, i) {
        var r, n = t.prototype;
        t.hasOwnProperty("__gets__") || Object.defineProperty(t, "__gets__", {
            value: {}
        });
        var a = (r = t.__gets__)[i];
        if (a) return a.call(e);
        var o = Object.getPrototypeOf(n);
        if (null != o) {
            for (;!o.hasOwnProperty(i); ) if (null == (o = Object.getPrototypeOf(o))) return;
            return a = Object.getOwnPropertyDescriptor(o, i).get, r[i] = a, a.call(e);
        }
    };
}(p || (p = {}));

!function(t) {
    var e = {};
    (p || (p = {})).getDefinitionByName = function(t) {
        if (!t) return null;
        var i = e[t];
        if (i) return i;
        var n = t.split("."), a = n.length;
        i = r;
        for (var o = 0; a > o; o++) if (!(i = i[n[o]])) return null;
        return e[t] = i, i;
    };
}();

p || (p = {});

!function(e) {
    (p || (p = {})).getQualifiedClassName = function(e) {
        var i = void 0 === e ? "undefined" : t(e);
        if (!e || "object" != i && !e.prototype) return i;
        var r = e.prototype ? e.prototype : Object.getPrototypeOf(e);
        if (r.hasOwnProperty("__class__")) return r.__class__;
        var n = r.constructor.toString().trim(), a = n.indexOf("("), o = n.substring(9, a);
        return Object.defineProperty(r, "__class__", {
            value: o,
            enumerable: !1,
            writable: !0
        }), o;
    };
}();

!function(e) {
    e.getQualifiedSuperclassName = function(i) {
        if (!i || "object" != (void 0 === i ? "undefined" : t(i)) && !i.prototype) return null;
        var r = i.prototype ? i.prototype : Object.getPrototypeOf(i), n = Object.getPrototypeOf(r);
        if (!n) return null;
        var a = e.getQualifiedClassName(n.constructor);
        return a || null;
    };
}(p || (p = {}));

!function(t) {
    t.getTimer = function() {
        return Date.now() - t.sys.$START_TIME;
    };
}(p || (p = {}));

!function(t) {
    t.hasDefinition = function(e) {
        return !!t.getDefinitionByName(e);
    };
}(p || (p = {}));

!function(e) {
    (p || (p = {})).is = function(e, i) {
        if (!e || "object" != (void 0 === e ? "undefined" : t(e))) return !1;
        var r = Object.getPrototypeOf(e), n = r ? r.__types__ : null;
        return !!n && -1 !== n.indexOf(i);
    };
}();

!function(t) {
    t.startTick = function(e, i) {
        t.ticker.$startTick(e, i);
    };
}(p || (p = {}));

!function(t) {
    t.stopTick = function(e, i) {
        t.ticker.$stopTick(e, i);
    };
}(p || (p = {}));

!function(t) {
    (p || (p = {})).toColorString = function(t) {
        0 > t && (t = 0), t > 16777215 && (t = 16777215);
        for (var e = t.toString(16).toUpperCase(); e.length > 6; ) e = e.slice(1, e.length);
        for (;e.length < 6; ) e = "0" + e;
        return "#" + e;
    };
}();

var p;

!function(t) {
    t.sys || (t.sys = {});
}(p || (p = {})), window.egret = p;