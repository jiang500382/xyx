var t = function(t, e, n) {
    t.__class__ = e, n ? n.push(e) : n = [ e ], t.__types__ = t.__types__ ? n.concat(t.__types__) : n;
}, e = function(t, e) {
    function n() {
        this.constructor = t;
    }
    for (var o in e) e.hasOwnProperty(o) && (t[o] = e[o]);
    n.prototype = e.prototype, t.prototype = new n();
};

(n = window.egret) || (n = {});

!function(n) {
    var o = function(t) {
        function o(e, i) {
            void 0 === e && (e = ""), void 0 === i && (i = 0);
            var s = t.call(this) || this;
            return s._writeMessage = "", s._readMessage = "", s._connected = !1, s._connecting = !1, 
            s._isReadySend = !1, s._bytesWrite = !1, s._type = o.TYPE_STRING, s._connected = !1, 
            s._writeMessage = "", s._readMessage = "", s.socket = new n.ISocket(), s.socket.addCallBacks(s.onConnect, s.onClose, s.onSocketData, s.onError, s), 
            s;
        }
        return e(o, t), o.prototype.connect = function(t, e) {
            this._connecting || this._connected || (this._connecting = !0, this.socket.connect(t, e));
        }, o.prototype.connectByUrl = function(t) {
            this._connecting || this._connected || (this._connecting = !0, this.socket.connectByUrl(t));
        }, o.prototype.close = function() {
            this._connected && this.socket.close();
        }, o.prototype.onConnect = function() {
            this._connected = !0, this._connecting = !1, this.dispatchEventWith(n.Event.CONNECT);
        }, o.prototype.onClose = function() {
            this._connected = !1, this.dispatchEventWith(n.Event.CLOSE);
        }, o.prototype.onError = function() {
            this._connecting && (this._connecting = !1), this.dispatchEventWith(n.IOErrorEvent.IO_ERROR);
        }, o.prototype.onSocketData = function(t) {
            "string" == typeof t ? this._readMessage += t : this._readByte._writeUint8Array(new Uint8Array(t)), 
            n.ProgressEvent.dispatchProgressEvent(this, n.ProgressEvent.SOCKET_DATA);
        }, o.prototype.flush = function() {
            return this._connected ? (this._writeMessage && (this.socket.send(this._writeMessage), 
            this._writeMessage = ""), this._bytesWrite && (this.socket.send(this._writeByte.buffer), 
            this._bytesWrite = !1, this._writeByte.clear()), void (this._isReadySend = !1)) : void n.$warn(3101);
        }, o.prototype.writeUTF = function(t) {
            return this._connected ? (this._type == o.TYPE_BINARY ? (this._bytesWrite = !0, 
            this._writeByte.writeUTF(t)) : this._writeMessage += t, void this.flush()) : void n.$warn(3101);
        }, o.prototype.readUTF = function() {
            var t;
            return this._type == o.TYPE_BINARY ? (this._readByte.position = 0, t = this._readByte.readUTF(), 
            this._readByte.clear()) : (t = this._readMessage, this._readMessage = ""), t;
        }, o.prototype.writeBytes = function(t, e, o) {
            return void 0 === e && (e = 0), void 0 === o && (o = 0), this._connected ? this._writeByte ? (this._bytesWrite = !0, 
            this._writeByte.writeBytes(t, e, o), void this.flush()) : void n.$warn(3102) : void n.$warn(3101);
        }, o.prototype.readBytes = function(t, e, o) {
            return void 0 === e && (e = 0), void 0 === o && (o = 0), this._readByte ? (this._readByte.position = 0, 
            this._readByte.readBytes(t, e, o), void this._readByte.clear()) : void n.$warn(3102);
        }, Object.defineProperty(o.prototype, "connected", {
            get: function() {
                return this._connected;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(o.prototype, "type", {
            get: function() {
                return this._type;
            },
            set: function(t) {
                this._type = t, t != o.TYPE_BINARY || this._writeByte || (this._readByte = new n.ByteArray(), 
                this._writeByte = new n.ByteArray());
            },
            enumerable: !0,
            configurable: !0
        }), o.TYPE_STRING = "webSocketTypeString", o.TYPE_BINARY = "webSocketTypeBinary", 
        o;
    }(n.EventDispatcher);
    n.WebSocket = o, t(o.prototype, "egret.WebSocket");
}(n || (n = {}));

var n;

!function(e) {
    !function(n) {
        var o = function() {
            function t() {
                this.host = "", this.port = 0, window.WebSocket || e.$error(3100);
            }
            return t.prototype.addCallBacks = function(t, e, n, o, i) {
                this.onConnect = t, this.onClose = e, this.onSocketData = n, this.onError = o, this.thisObject = i;
            }, t.prototype.connect = function(t, e) {
                this.host = t, this.port = e;
                var n = "ws://" + this.host + ":" + this.port;
                this.socket = new window.WebSocket(n), this.socket.binaryType = "arraybuffer", this._bindEvent();
            }, t.prototype.connectByUrl = function(t) {
                this.socket = new window.WebSocket(t), this.socket.binaryType = "arraybuffer", this._bindEvent();
            }, t.prototype._bindEvent = function() {
                var t = this, e = this.socket;
                e.onopen = function() {
                    t.onConnect && t.onConnect.call(t.thisObject);
                }, e.onclose = function(e) {
                    t.onClose && t.onClose.call(t.thisObject);
                }, e.onerror = function(e) {
                    t.onError && t.onError.call(t.thisObject);
                }, e.onmessage = function(e) {
                    t.onSocketData && t.onSocketData.call(t.thisObject, e.data);
                };
            }, t.prototype.send = function(t) {
                this.socket.send(t);
            }, t.prototype.close = function() {
                this.socket.close();
            }, t.prototype.disconnect = function() {
                this.socket.disconnect && this.socket.disconnect();
            }, t;
        }();
        n.HTML5WebSocket = o, t(o.prototype, "egret.web.HTML5WebSocket", [ "egret.ISocket" ]), 
        e.ISocket = o;
    }(e.web || (e.web = {}));
}(n || (n = {}));